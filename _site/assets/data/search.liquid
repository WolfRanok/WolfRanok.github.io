[
  
  {
    "title"    : "OpenStack 期末复习",
    "category" : "",
    "tags"     : " OpenStack, 期末考试",
    "url"      : "/openstack",
    "date"     : "December 4, 2022",
    "excerpt"  : "OpenStack是Rackspace和NASA共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的Web Service。简单来说，OpenStack就是一个操作系统，一套软件，一套IaaS（基础设施即服务）软件，对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。\n\n\n\n前言\n\n以下为openstack的期末复习，考试考点整理，内容比较多且知识点生僻难懂，请好好准备，祝愿各位可以在期末获取一个好成绩！\n\n\n\n第一章考点\n\nOpenStack 的主要项...",
  "content"  : "OpenStack是Rackspace和NASA共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的Web Service。简单来说，OpenStack就是一个操作系统，一套软件，一套IaaS（基础设施即服务）软件，对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。\n\n\n\n前言\n\n以下为openstack的期末复习，考试考点整理，内容比较多且知识点生僻难懂，请好好准备，祝愿各位可以在期末获取一个好成绩！\n\n\n\n第一章考点\n\nOpenStack 的主要项目以及对应的项目名称\n\n\n  \n    \n      服务\n      直译\n      项目名称\n    \n  \n  \n    \n      Dashboard\n      仪表盘\n      Horizon\n    \n    \n      Computer\n      计算\n      Nova\n    \n    \n      Natwork\n      网络\n      Neutron\n    \n    \n      Object Storage\n      对象存储\n      Swift\n    \n    \n      Block Storage\n      块存储\n      Cindar\n    \n    \n      Identity\n      身份\n      Keystone\n    \n    \n      Image\n      镜像\n      Glance\n    \n    \n      Telemetry\n      计量\n      Ceilometer\n    \n    \n      Orchestration\n      编排\n      Heat\n    \n    \n      Database\n      数据库\n      Trove\n    \n    \n      Data Processing\n      数据处理\n      Sahara\n    \n  \n\n\n\n\n第四章考点\n\nREST 含义解释\nREST 是 Representational State Transfer 的缩写，通常译为表现层状态转化\n\n客户端在使用HTTP提供的四种操作（GET、POST、PUT、DELETE）访问服务器上的资源时，这些操作会让服务端的状态发生转化，而这种转化是建立在表现层之上的，所以被称之为表现层转化。\n\n\nOpenStack 的认证与API 请求流程\n\n\n  向云管理员提供的身份端点请求一个认证令牌。\n  如果请求成功，服务器会返回一个认证令牌。\n  发送API请求，并在X-Auht-Token头部包含上一步返回的令牌认证。\n  如果遇到未授权（401）的错误，则需要重新请求另一个令牌。\n\n\n获取OpenStack认证令牌\n\n\n  进入demo环境：source keystonerc_demo\n  运行命令cURL来请求一个令牌。\n\n\n发送API请求\n\n\n  设置OS_TOKEN环境变量，将其值设为令牌ID： export OS_TOKEN=令牌ID\n  设置OS_PROJECT_NAME环境变量：export OS_PROJECT_NAME=demo\n  设置OS_COMPUTE_API环境变量：export OS_COMPUTE_API=http://192.168.199.21:8774/v2.1\n  使用Compute API列出示例类型。\n\n\n\n第五章\n\nKeystone的管理层次结构\n\n\n    \n    \n        \n    \n    \n\n\n问：在一个域中的用户User1是否可以管理项目Project1\n\n答：可以，因为用户User1是系统管理员，拥有对项目Project1的管理权限。\n\n\nKeystone认证流程图\n这张图需要背下来。\n\n\n    \n    \n        \n    \n    \n\n\n对图片的解释：\n\n\n  用户向Keystone提供凭证，Keystone验证通过后向用户返回令牌的同时还会返回一个通用目录。\n  用户使用该令牌向该目录列表中的端点请求该用户对应的项目信息，Keystone验证通过后返回用户对应的项目列表\n  用户从列表中选择要访问的项目再次向Keystone发出请求，Keystone验证通过后返回管理该项目的服务列表，并允许访问该项目的令牌。\n  用户会通过这个服务和通用目录映射找到服务的端点，并通过端点找到实际服务组件的位置。\n  用户在凭借项目令牌和端点来访问实际上的服务组件。\n  服务组件会向Keystone提供这个用户项目令牌进行验证，Keystone验证通过后会返回一系列的确认信息和附加信息给服务\n  服务执行一系列操作。\n\n\n配置文件中对两个值的解释\n\n”” 空字符串\n表示“always”（总是）\n\n”!” 感叹号\n表示“nerver”或者“nobady”，即拒绝。\n\n小知识点\n\n\n  oslo.policy是json格式的文件。\n  openstack是使用python语言实现的。\n\n"
} ,
  
  {
    "title"    : "Jekyll 入门指导",
    "category" : "",
    "tags"     : " Jekyll, web前端",
    "url"      : "/jekyll",
    "date"     : "December 4, 2022",
    "excerpt"  : "jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n\n\n前言\n\n该博客的部署使用的就是Jekyll框架，Jekyll是一门很成熟的技术（也可能是有点老的缘故），他可以将makedown格式的文档转化成一个个静态的页面，即便你没有系统的学过前端三件套...",
  "content"  : "jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。\n\n\n\n前言\n\n该博客的部署使用的就是Jekyll框架，Jekyll是一门很成熟的技术（也可能是有点老的缘故），他可以将makedown格式的文档转化成一个个静态的页面，即便你没有系统的学过前端三件套也可以制作自己的主页（真的太棒了！）。\n\n对于使用者来说只需要找到对应的资源模板，套用jekyll即可得到你想要的博客。\n\n如果你想要了解更多，这个是Jekyll官网的传送门 \\(\\Longrightarrow\\) Jekyll\n\n\n\nJekyll 基础知识\n\n基本结构\nJekyll 也遵循「约定大于配置」的基本原则，所以上手成本极低。\n\n在新创建的项目目录下，有几个重要的文件夹：\n\n_layouts\n\n用于存放各种布局.html 的文件用于对.md文件的转换，在md设置的消息头中的变量，.md文件选择了layout布局之后，会引入对应的布局.html中，html会存放这些变量的默认值，\n\n_drafts\n\n用于存放.md博客的草稿，不会再jekyll工作的时候生成，需要使用指令jekyll server –draft 才会显示在界面中\n_posts\n\n用于存放博客文章\n_site\n\n用于存放项目构建完成之后所生成的静态文件，也就是说，静态网站的所有文件都会来源于此，其中 CSS 文件、JS 文件以及图片文件，会存放在该目录下的 assets 文件夹中。我们可以直接把该目录下的文件拿去部署\n\n除此之外，还有一些其他文件：\n_config.yml\n\n是项目的配置文件，一些全局配置会写在这个文件内，比如 collections（后续推文会讲解），默认文件/路径，等等。总之，这里可以自定义很多东西\n\n.gitignore\n\n创建项目时会自动生成，不需要纳入到 CVS 的文件存放于此，它可以限制一些元素在_site 中的生成\n\nGemfile &amp;amp; Gemfile.lock\n\n存放项目所依赖的 Ruby gems，里面拥有存放页面的样式信息，当新加入了主题配置之后，需要使用bundle install指令安装新的配置才能使用。需要使用新的主题时，需要在_config.yml文件的there做更改。注意，使用了新的布局之后可能会导致一些布局不可用，例如“post”，因为在新的主题上可能没有定义这样的布局。所以使用新的布局之后要在_layout中查看一下是否有对应的布局可以使用。\n\nabout.md\n\n会存放有关在界面中的about的内容，生成的页面会出现在主界面上的位置，同理命名其他的文件也会在主界面的上方出现\n\n\n\nmakedown 语法\npermalink\n可以用于自定义所创建页面的URL。例如，permalink：/Jekyll/ 表示创建的页面会在主页面URL中后加上/Jekyll\n\nlayout\n表示自己所使用的界面样式，常见的值有post\n\n._config.yml\n\n\n  defaults：可用于写一些默认值，例如为layout设置默认值（要注意以下冒号的位置）\n    defaults:\n  - \n scope:\n   path: &quot;&quot;  # 这里填写此默认值影响的返回路径\n values:   # 这里补充默认值\n     layout: &quot;post&quot;\n    \n    再例如对图片文件的加载：\n    defaults:\n  -\n scope:\n   path: &quot;assets/img&quot;\n values:\n   image: true\n    \n    该例子表示，在html文件中可能加载图片信息的位置会在，assets/img的文件夹下寻找\n  \n\n\n\n常用指令\n\n  jekyll new 工程名  创建工程\n  bundle exec jekyll server   启动项目，启动项目之后可以在浏览器中访问http://127.0.0.1:400/看到效果。\n  jekyll new PATH --blank  创建新的空项目\n  jekyll build 或 jekyll b 构建项目，生成可部署的 _site 目录\n  jekyll serve 或 jekyll s  构建并运行项目，会自动监听文件变化，不需要反复执行\n  jekyll clean  清除所有的构建产物\n  jekyll new-theme  创建一个新的主题脚手架\n  jekyll doctor  诊断，输出所有已经废弃的依赖包或者有问题的配置\n\n"
} ,
  
  {
    "title"    : "MySql 学习笔记",
    "category" : "",
    "tags"     : " MySql, 数据库",
    "url"      : "/mysql",
    "date"     : "December 3, 2022",
    "excerpt"  : "MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。\n\n\n前言\n本人比较懒，所以专门挑了一个篇幅比较少的MySql来写博客，主要还是针对笔记的性质来写的。如果有错欢迎指正。\n\n\n\nMySql 基本语法\n1.分组\nGROUP BY 字段名 [HAVING 条件表达式]\n\n2.去重\n在 select的字段前面加上distinct就可以去重\n\n3.插入多行数据\n\n格式：\ninsert into 表名[（字段名1...",
  "content"  : "MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。\n\n\n前言\n本人比较懒，所以专门挑了一个篇幅比较少的MySql来写博客，主要还是针对笔记的性质来写的。如果有错欢迎指正。\n\n\n\nMySql 基本语法\n1.分组\nGROUP BY 字段名 [HAVING 条件表达式]\n\n2.去重\n在 select的字段前面加上distinct就可以去重\n\n3.插入多行数据\n\n格式：\ninsert into 表名[（字段名1，字段名2,…）] values(值\\(a_1\\)，值\\(b_1\\),…), (值\\(a_2\\),值\\(b_2\\),…)\n\n示例：\ninsert into mywork\nvalues(&quot;小明&quot;,18),(&quot;小红&quot;,20)\n\n\n4.外连接\n语法：\nselect 字段列表 from 表1 [inner] join 表2 on 连接条件;\n示例:\n\nselect * \nfrom wuhan.commercialhousing \njoin secondhouse on district regexp qy\nlimit 10;\n\n\n同理还有左外连接：left join，右外连接：right join\n\n5.排序\n\n排序语句：order by 字段值[ desc | asc]\n其中 asc是表示升序（默认），表示降序\n\n示例：\nselect customer_number\nfrom Orders\ngroup by customer_number\norder by COUNT(*) desc\n\n\n6.if语句\n\n语法：IF(expr1,expr2,expr3)\n\n如果 expr1 是TRUE (或者expr1 &amp;lt;&amp;gt; 0 且 expr1 &amp;lt;&amp;gt; NULL)，则 IF()的返回值为expr2; 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。\n\n7.ifnull语句\n\n语法：IFNULL(expr1,expr2)\nexpr1不为NULL，则 IFNULL() 的返回值为expr1; 否则其返回值为 expr2。IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。\n\n8.正则语句\n\n关键字：regexp\n\n使用语法：被检测字符串 regexp [binary] 正则语句\n不区分大小写（即大写和小写都匹配）。为区分大小写，可以使用 BINARY 关键字例如：\nWHHERE name REGEXP BINARY &#39;Hern .000&#39;\n\n\n9.存在判断语句 exists\n\n当我们只需要判断某些满足特定条件的数据是否存在时，为了提高效率，我们不需要将所有的数据捞出来判断，只需要判断是否存在就可以了。\n采用exists即可满足需求。\n示例：\nselect exists (SELECT *\n        from  a \n        where\n        money&amp;gt;0 and time&amp;gt;&#39;2021-03-05&#39;;\n)\n\n\nmysql常用函数\n\n日期比较函数：datediff\n\n语法：DATEDIFF(date1,date2)\n参数说明\ndate1: 比较日期1\ndate2: 比较日期2\n\nDATEDIFF函数返回date1 - date2的计算结果，date1和date2两个参数需是有效的日期或日期时间值;如果参数传递的是日期时间值，DATEDIFF函数仅将日期部分用于计算，并忽略时间部分(只有值的日期部分参与计算)\n\n示例：\nSELECT DATEDIFF(&#39;2022-04-29&#39;,&#39;2022-04-30&#39;); --返回 -1\nSELECT DATEDIFF(&#39;2022-04-30&#39;,&#39;2022-04-29&#39;); --返回 1\n\n\n日期加减函数：date_add\n\n语法：date_add(‘某个日期时间’,interval 1 时间种类名)\n示例：\n\nselect date_add(data, interval 1 year); --加1年\nselect date_add(fata, interval 1 month); --加1月\n\n\nquarter:季，week:周，day:天，hour:小时，minute:分钟，second:秒，microsecond:毫秒\n注：也可以不用变量，直接加减某个时间，如：select date_add(‘1998-01-01’, interval 1 day);\n\n字符串专题\n字符串拼接：concat\n\n将给入的参数逐一拼接\n例如：\nconcat(‘%’,’abc’,’%’) --结果为%abc%\n\n字符串与日期的相互转换\n使用语法：\nDATE_FORMAT(date,format) 日期转字符串\nSTR_TO_DATE(str,format) 字符串转日期\n示例：\n\nselect DATE_FORMAT(now(),&#39;%Y-%m-%d %H:%i:%s&#39;);\n\n返回：2022-12-01 10:07:41\n\nselect str_to_date(&#39;2022-8-7&#39;,&#39;%Y&#39;)\n\n返回：2022-00-00\n因为这里只获取到了年份，但是作为datetime对象需要补全月份和日所以会有-00-00出现。\n\n组内字符串拼接 group_concat\n\n语法：\nGROUP_CONCAT([DISTINCT] column1 [ORDER BY column2 ASC|DESC] [SEPARATOR seq])\n\n\n将分组中column1这一列对应的多行的值按照column2 升序或者降序进行连接，其中分隔符为seq\n如果用到了DISTINCT，将表示将不重复的column1按照column2升序或者降序连接\n如果没有指定SEPARATOR的话，也就是说没有写，那么就会默认以 ‘,’分隔\n\n字符串截取 substring\n语法格式：SUBSTRING(str, begin, end)\nsubstring函数可以将字符串str从下标begin到end截取下来（下标从1开始计算）（闭区间包括begin和end），其中end默认为空，当end省略时表示截取到字符串最后。\nmysq支持逆向访问，即可以使用负数表示下标，负数的下标即从右边开始计算的下标。\n示例：\nselect substring(&quot;01234&quot;,1,2);\t-- 01\nselect substring(&quot;01234&quot;,1);\t-- 01234\nselect substring(&quot;01234&quot;,1,100); -- 01234\nselect substring(&quot;01234&quot;,-1);\t-- 4\n\n\n字符串大小写转换\nupper(str)  字符串中所有字母转大写\nlower(str)  字符串中所有字母转小写\n\n技巧语法\n\n查询排名前n的数据\n\n使用limit n语句实现（该语句需要放在查询结果的最后）\n\n示例：\n\nSELECT * FROM wuhan.secondhouse limit 10;\n\n\n使用正则配对字符串\n\n使用regexp关键字实现\n格式： 字段值 regexp 正则字符串\n示例：\n\nselect distinct district,house_type,wq_area,wq_num,yqy_area,yqy_num\nfrom commercialhousing\nwhere district regexp &#39;江岸&#39;;\n\n"
} ,
  
  {
    "title"    : "博客测试",
    "category" : "",
    "tags"     : " Test, Image",
    "url"      : "/demo",
    "date"     : "October 18, 2013",
    "excerpt"  : "这里写需要展示在外部的内容，且需要与正文隔一个空行\n\n一级标题\n二级标题\n三级标题\n四级标题\n五级标题\n六级标题\n\n\n需要说明的一点是，makedown完全支持html格式的代码\n\n百度一下 超链接需要是http格式的\n\n这是一个公式 \\(a^2+b^2 &amp;gt; 2ab\\)\n\n这是一个行内代码块\n\n在写代码的时候可以用指定语言的方式来表现出不同的高亮，代码块之间需要有一个空行\ndef showw():\n    print(&quot;这是一个python代码块&quot;)\n\n\nvoid show(){\n ...",
  "content"  : "这里写需要展示在外部的内容，且需要与正文隔一个空行\n\n一级标题\n二级标题\n三级标题\n四级标题\n五级标题\n六级标题\n\n\n需要说明的一点是，makedown完全支持html格式的代码\n\n百度一下 超链接需要是http格式的\n\n这是一个公式 \\(a^2+b^2 &amp;gt; 2ab\\)\n\n这是一个行内代码块\n\n在写代码的时候可以用指定语言的方式来表现出不同的高亮，代码块之间需要有一个空行\ndef showw():\n    print(&quot;这是一个python代码块&quot;)\n\n\nvoid show(){\n    cout&amp;lt;&amp;lt;&quot;这是一个C++代码块&quot;;\n}\n\n\n斜体文字\n\n斜体文字\n\n粗体文字\n\n粗体文字\n\n粗斜体文字\n\n粗斜体文字\n\n\n\n\n\n\n\n删除线\n\n下划线\n\n\n  警告内容\n\n\n表格是制作方式类似于latex\n\n\n  \n    \n      hex\n      dec\n      oct\n    \n  \n  \n    \n      0\n      0\n      0\n    \n    \n      5\n      5\n      5\n    \n    \n      A\n      10\n      12\n    \n    \n      F\n      16\n      20\n    \n    \n      F5\n      21\n      25\n    \n  \n\n\n导入图片,图片的主路径在assets/img处\n\n\n    \n    \n        \n    \n    \n\n\n导入多张图片，只需要在图片导入的位置用，分隔即可\n\n\n    \n    \n        \n    \n    \n    \n        \n    \n    \n\n\n"
} 
  
  
  
]
