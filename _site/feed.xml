<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-05T14:28:17+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ranok</title><subtitle>A website with blog posts and pages</subtitle><entry><title type="html">OpenStack 期末复习</title><link href="http://localhost:4000/openstack" rel="alternate" type="text/html" title="OpenStack 期末复习" /><published>2022-12-04T00:00:00+08:00</published><updated>2022-12-04T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-openstack</id><content type="html" xml:base="http://localhost:4000/openstack"><![CDATA[<p>OpenStack是Rackspace和NASA共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的Web Service。简单来说，OpenStack就是一个操作系统，一套软件，一套IaaS（基础设施即服务）软件，对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。</p>

<hr />

<h2 id="前言">前言</h2>

<p>以下为openstack的期末复习，考试考点整理，内容比较多且知识点生僻难懂，请好好准备，祝愿各位可以在期末获取一个好成绩！</p>

<hr />

<h2 id="第一章考点">第一章考点</h2>

<h2 id="openstack-的主要项目以及对应的项目名称">OpenStack 的主要项目以及对应的项目名称</h2>

<table>
  <thead>
    <tr>
      <th>服务</th>
      <th>直译</th>
      <th>项目名称</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dashboard</td>
      <td>仪表盘</td>
      <td>Horizon</td>
    </tr>
    <tr>
      <td>Computer</td>
      <td>计算</td>
      <td>Nova</td>
    </tr>
    <tr>
      <td>Natwork</td>
      <td>网络</td>
      <td>Neutron</td>
    </tr>
    <tr>
      <td>Object Storage</td>
      <td>对象存储</td>
      <td>Swift</td>
    </tr>
    <tr>
      <td>Block Storage</td>
      <td>块存储</td>
      <td>Cindar</td>
    </tr>
    <tr>
      <td>Identity</td>
      <td>身份</td>
      <td>Keystone</td>
    </tr>
    <tr>
      <td>Image</td>
      <td>镜像</td>
      <td>Glance</td>
    </tr>
    <tr>
      <td>Telemetry</td>
      <td>计量</td>
      <td>Ceilometer</td>
    </tr>
    <tr>
      <td>Orchestration</td>
      <td>编排</td>
      <td>Heat</td>
    </tr>
    <tr>
      <td>Database</td>
      <td>数据库</td>
      <td>Trove</td>
    </tr>
    <tr>
      <td>Data Processing</td>
      <td>数据处理</td>
      <td>Sahara</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="第四章考点">第四章考点</h2>

<h4 id="rest-含义解释">REST 含义解释</h4>
<p>REST 是 Representational State Transfer 的缩写，通常译为<strong>表现层状态转化</strong></p>

<p>客户端在使用HTTP提供的四种操作（GET、POST、PUT、DELETE）访问服务器上的资源时，这些操作会让服务端的状态发生转化，而这种转化是建立在表现层之上的，所以被称之为表现层转化。</p>

<hr />
<h4 id="openstack-的认证与api-请求流程">OpenStack 的认证与API 请求流程</h4>

<ol>
  <li>向云管理员提供的身份端点请求一个认证令牌。</li>
  <li>如果请求成功，服务器会返回一个认证令牌。</li>
  <li>发送API请求，并在X-Auht-Token头部包含上一步返回的令牌认证。</li>
  <li>如果遇到未授权（401）的错误，则需要重新请求另一个令牌。</li>
</ol>

<h5 id="获取openstack认证令牌">获取OpenStack认证令牌</h5>

<ol>
  <li>进入demo环境：<code class="language-plaintext highlighter-rouge">source keystonerc_demo</code></li>
  <li>运行命令cURL来请求一个令牌。</li>
</ol>

<h5 id="发送api请求">发送API请求</h5>

<ol>
  <li>设置OS_TOKEN环境变量，将其值设为令牌ID： <code class="language-plaintext highlighter-rouge">export OS_TOKEN=令牌ID</code></li>
  <li>设置OS_PROJECT_NAME环境变量：<code class="language-plaintext highlighter-rouge">export OS_PROJECT_NAME=demo</code></li>
  <li>设置OS_COMPUTE_API环境变量：<code class="language-plaintext highlighter-rouge">export OS_COMPUTE_API=http://192.168.199.21:8774/v2.1</code></li>
  <li>使用Compute API列出示例类型。</li>
</ol>

<hr />
<h2 id="第五章">第五章</h2>

<h4 id="keystone的管理层次结构">Keystone的管理层次结构</h4>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/openstack/Keystone.bmp" alt="Keystone.bmp" />
    </div>
    
</div>

<p>问：在一个域中的用户<code class="language-plaintext highlighter-rouge">User1</code>是否可以管理项目<code class="language-plaintext highlighter-rouge">Project1</code></p>

<p>答：可以，因为用户User1是系统管理员，拥有对项目Project1的管理权限。</p>

<hr />
<h4 id="keystone认证流程图">Keystone认证流程图</h4>
<p>这张图需要背下来。</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/openstack/KeystoneWWork.bmp" alt="KeystoneWWork.bmp" />
    </div>
    
</div>

<p>对图片的解释：</p>

<ol>
  <li>用户向Keystone提供凭证，Keystone验证通过后向用户返回令牌的同时还会返回一个通用目录。</li>
  <li>用户使用该令牌向该目录列表中的端点请求该用户对应的项目信息，Keystone验证通过后返回用户对应的项目列表</li>
  <li>用户从列表中选择要访问的项目再次向Keystone发出请求，Keystone验证通过后返回管理该项目的服务列表，并允许访问该项目的令牌。</li>
  <li>用户会通过这个服务和通用目录映射找到服务的端点，并通过端点找到实际服务组件的位置。</li>
  <li>用户在凭借项目令牌和端点来访问实际上的服务组件。</li>
  <li>服务组件会向Keystone提供这个用户项目令牌进行验证，Keystone验证通过后会返回一系列的确认信息和附加信息给服务</li>
  <li>服务执行一系列操作。</li>
</ol>

<h4 id="配置文件中对两个值的解释">配置文件中对两个值的解释</h4>

<h5 id="-空字符串">”” 空字符串</h5>
<p>表示“always”（总是）</p>

<h5 id="-感叹号">”!” 感叹号</h5>
<p>表示“nerver”或者“nobady”，即拒绝。</p>

<h2 id="小知识点">小知识点</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">oslo.policy</code>是<code class="language-plaintext highlighter-rouge">json</code>格式的文件。</li>
  <li><code class="language-plaintext highlighter-rouge">openstack</code>是使用<code class="language-plaintext highlighter-rouge">python</code>语言实现的。</li>
</ol>]]></content><author><name>Ranok</name></author><category term="OpenStack" /><category term="期末考试" /><summary type="html"><![CDATA[OpenStack是Rackspace和NASA共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的Web Service。简单来说，OpenStack就是一个操作系统，一套软件，一套IaaS（基础设施即服务）软件，对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。]]></summary></entry><entry><title type="html">Jekyll 入门指导</title><link href="http://localhost:4000/jekyll" rel="alternate" type="text/html" title="Jekyll 入门指导" /><published>2022-12-04T00:00:00+08:00</published><updated>2022-12-04T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll"><![CDATA[<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>

<hr />

<h2 id="前言">前言</h2>

<p>该博客的部署使用的就是Jekyll框架，Jekyll是一门很成熟的技术（也可能是有点老的缘故），他可以将makedown格式的文档转化成一个个静态的页面，即便你没有系统的学过前端三件套也可以制作自己的主页（真的太棒了！）。</p>

<p>对于使用者来说只需要找到对应的资源模板，套用jekyll即可得到你想要的博客。</p>

<p>如果你想要了解更多，这个是Jekyll官网的传送门 \(\Longrightarrow\) <a href="http://jekyllrb.com/">Jekyll</a></p>

<hr />

<h2 id="jekyll-基础知识">Jekyll 基础知识</h2>

<h3 id="基本结构">基本结构</h3>
<p>Jekyll 也遵循「约定大于配置」的基本原则，所以上手成本极低。</p>

<p>在新创建的项目目录下，有几个重要的文件夹：</p>

<h4 id="_layouts">_layouts</h4>

<p>用于存放各种布局.html 的文件用于对.md文件的转换，在md设置的消息头中的变量，.md文件选择了layout布局之后，会引入对应的布局.html中，html会存放这些变量的默认值，</p>

<h4 id="_drafts">_drafts</h4>

<p>用于存放.md博客的草稿，不会再jekyll工作的时候生成，需要使用指令jekyll server –draft 才会显示在界面中</p>
<h4 id="_posts">_posts</h4>

<p>用于存放博客文章</p>
<h4 id="_site">_site</h4>

<p>用于存放项目构建完成之后所生成的静态文件，也就是说，静态网站的所有文件都会来源于此，其中 CSS 文件、JS 文件以及图片文件，会存放在该目录下的 assets 文件夹中。我们可以直接把该目录下的文件拿去部署</p>

<p>除此之外，还有一些其他文件：</p>
<h4 id="_configyml">_config.yml</h4>

<p>是项目的配置文件，一些全局配置会写在这个文件内，比如 collections（后续推文会讲解），默认文件/路径，等等。总之，这里可以自定义很多东西</p>

<h4 id="gitignore">.gitignore</h4>

<p>创建项目时会自动生成，不需要纳入到 CVS 的文件存放于此，它可以限制一些元素在_site 中的生成</p>

<h4 id="gemfile--gemfilelock">Gemfile &amp; Gemfile.lock</h4>

<p>存放项目所依赖的 Ruby gems，里面拥有存放页面的样式信息，当新加入了主题配置之后，需要使用bundle install指令安装新的配置才能使用。需要使用新的主题时，需要在_config.yml文件的there做更改。注意，使用了新的布局之后可能会导致一些布局不可用，例如“post”，因为在新的主题上可能没有定义这样的布局。所以使用新的布局之后要在_layout中查看一下是否有对应的布局可以使用。</p>

<h4 id="aboutmd">about.md</h4>

<p>会存放有关在界面中的about的内容，生成的页面会出现在主界面上的位置，同理命名其他的文件也会在主界面的上方出现</p>

<hr />

<h2 id="makedown-语法">makedown 语法</h2>
<h4 id="permalink">permalink</h4>
<p>可以用于自定义所创建页面的URL。例如，permalink：/Jekyll/ 表示创建的页面会在主页面URL中后加上/Jekyll</p>

<h4 id="layout">layout</h4>
<p>表示自己所使用的界面样式，常见的值有post</p>

<h4 id="_configyml-1">._config.yml</h4>

<ol>
  <li>defaults：可用于写一些默认值，例如为layout设置默认值（要注意以下冒号的位置）
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">defaults</span><span class="pi">:</span>
  <span class="pi">-</span> 
<span class="err"> </span><span class="na">scope</span><span class="pi">:</span>
   <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>  <span class="c1"># 这里填写此默认值影响的返回路径</span>
 <span class="na">values</span><span class="pi">:</span>   <span class="c1"># 这里补充默认值</span>
     <span class="na">layout</span><span class="pi">:</span> <span class="s2">"</span><span class="s">post"</span>
</code></pre></div>    </div>
    <p>再例如对图片文件的加载：</p>
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">defaults</span><span class="pi">:</span>
  <span class="pi">-</span>
<span class="err"> </span><span class="na">scope</span><span class="pi">:</span>
   <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">assets/img"</span>
 <span class="na">values</span><span class="pi">:</span>
   <span class="na">image</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div>    </div>
    <p>该例子表示，在html文件中可能加载图片信息的位置会在，assets/img的文件夹下寻找</p>
  </li>
</ol>

<hr />
<h2 id="常用指令">常用指令</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">jekyll new 工程名</code>  创建工程</li>
  <li><code class="language-plaintext highlighter-rouge">bundle exec jekyll server</code>   启动项目，启动项目之后可以在浏览器中访问http://127.0.0.1:400/看到效果。</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll new PATH --blank</code>  创建新的空项目</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll build</code> 或 <code class="language-plaintext highlighter-rouge">jekyll b</code> 构建项目，生成可部署的 _site 目录</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll serve</code> 或 <code class="language-plaintext highlighter-rouge">jekyll s</code>  构建并运行项目，会自动监听文件变化，不需要反复执行</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll clean</code>  清除所有的构建产物</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll new-theme</code>  创建一个新的主题脚手架</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll doctor</code>  诊断，输出所有已经废弃的依赖包或者有问题的配置</li>
</ol>]]></content><author><name>Ranok</name></author><category term="Jekyll" /><category term="web前端" /><summary type="html"><![CDATA[jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。]]></summary></entry><entry><title type="html">MySql 学习笔记</title><link href="http://localhost:4000/mysql" rel="alternate" type="text/html" title="MySql 学习笔记" /><published>2022-12-03T00:00:00+08:00</published><updated>2022-12-03T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-mysql</id><content type="html" xml:base="http://localhost:4000/mysql"><![CDATA[<p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>

<hr />
<h2 id="前言">前言</h2>
<p>本人比较懒，所以专门挑了一个篇幅比较少的MySql来写博客，主要还是针对笔记的性质来写的。如果有错欢迎指正。</p>

<hr />

<h2 id="mysql-基本语法">MySql 基本语法</h2>
<h4 id="1分组">1.分组</h4>
<p><code class="language-plaintext highlighter-rouge">GROUP BY</code> 字段名 [<code class="language-plaintext highlighter-rouge">HAVING</code> 条件表达式]</p>

<h4 id="2去重">2.去重</h4>
<p>在 <code class="language-plaintext highlighter-rouge">select</code>的字段前面加上<code class="language-plaintext highlighter-rouge">distinct</code>就可以去重</p>

<h4 id="3插入多行数据">3.插入多行数据</h4>

<p>格式：<br />
<code class="language-plaintext highlighter-rouge">insert into</code> 表名[（字段名1，字段名2,…）] <code class="language-plaintext highlighter-rouge">values</code>(值\(a_1\)，值\(b_1\),…), (值\(a_2\),值\(b_2\),…)</p>

<p>示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">insert</span> <span class="k">into</span> <span class="n">mywork</span>
<span class="k">values</span><span class="p">(</span><span class="nv">"小明"</span><span class="p">,</span><span class="mi">18</span><span class="p">),(</span><span class="nv">"小红"</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="4外连接">4.外连接</h4>
<p>语法：<br />
<code class="language-plaintext highlighter-rouge">select</code> 字段列表 <code class="language-plaintext highlighter-rouge">from</code> 表1 [inner] <code class="language-plaintext highlighter-rouge">join</code> 表2 <code class="language-plaintext highlighter-rouge">on</code> 连接条件;
示例:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> 
<span class="k">from</span> <span class="n">wuhan</span><span class="p">.</span><span class="n">commercialhousing</span> 
<span class="k">join</span> <span class="n">secondhouse</span> <span class="k">on</span> <span class="n">district</span> <span class="n">regexp</span> <span class="n">qy</span>
<span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>同理还有左外连接：<code class="language-plaintext highlighter-rouge">left join</code>，右外连接：<code class="language-plaintext highlighter-rouge">right join</code></p>

<h4 id="5排序">5.排序</h4>

<p>排序语句：<code class="language-plaintext highlighter-rouge">order by</code> 字段值<code class="language-plaintext highlighter-rouge">[ desc | asc]</code>
其中 <code class="language-plaintext highlighter-rouge">asc</code>是表示升序（默认），表示降序</p>

<p>示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">customer_number</span>
<span class="k">from</span> <span class="n">Orders</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">customer_number</span>
<span class="k">order</span> <span class="k">by</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">desc</span>
</code></pre></div></div>

<h4 id="6if语句">6.if语句</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">IF(expr1,expr2,expr3)</code></p>

<p>如果 expr1 是<code class="language-plaintext highlighter-rouge">TRUE</code> (或者expr1 &lt;&gt; 0 且 expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2;<br /> 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。</p>

<h4 id="7ifnull语句">7.ifnull语句</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">IFNULL(expr1,expr2)</code>
expr1不为<code class="language-plaintext highlighter-rouge">NULL</code>，则 IFNULL() 的返回值为expr1; 否则其返回值为 expr2。<br />IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。</p>

<h4 id="8正则语句">8.正则语句</h4>

<p>关键字：<code class="language-plaintext highlighter-rouge">regexp</code></p>

<p>使用语法：被检测字符串 <code class="language-plaintext highlighter-rouge">regexp [binary]</code> 正则语句
不区分大小写（即大写和小写都匹配）。为区分大小写，可以使用 BINARY 关键字<br />例如：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">WHHERE</span> <span class="n">name</span> <span class="n">REGEXP</span> <span class="nb">BINARY</span> <span class="s1">'Hern .000'</span>
</code></pre></div></div>

<h4 id="9存在判断语句-exists">9.存在判断语句 exists</h4>

<p>当我们只需要判断某些满足特定条件的数据是否存在时，为了提高效率，我们不需要将所有的数据捞出来判断，只需要判断是否存在就可以了。
采用exists即可满足需求。<br />
示例：<br /></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">exists</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span>
        <span class="k">from</span>  <span class="n">a</span> 
        <span class="k">where</span>
        <span class="n">money</span><span class="o">&gt;</span><span class="mi">0</span> <span class="k">and</span> <span class="nb">time</span><span class="o">&gt;</span><span class="s1">'2021-03-05'</span><span class="p">;</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="mysql常用函数">mysql常用函数</h2>

<h4 id="日期比较函数datediff">日期比较函数：datediff</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">DATEDIFF(date1,date2)</code>
参数说明<br />
date1: 比较日期1<br />
date2: 比较日期2<br /></p>

<p>DATEDIFF函数返回date1 - date2的计算结果，date1和date2两个参数需是有效的日期或日期时间值;如果参数传递的是日期时间值，DATEDIFF函数仅将日期部分用于计算，并忽略时间部分(只有值的日期部分参与计算)</p>

<p>示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">DATEDIFF</span><span class="p">(</span><span class="s1">'2022-04-29'</span><span class="p">,</span><span class="s1">'2022-04-30'</span><span class="p">);</span> <span class="c1">--返回 -1</span>
<span class="k">SELECT</span> <span class="n">DATEDIFF</span><span class="p">(</span><span class="s1">'2022-04-30'</span><span class="p">,</span><span class="s1">'2022-04-29'</span><span class="p">);</span> <span class="c1">--返回 1</span>
</code></pre></div></div>

<h4 id="日期加减函数date_add">日期加减函数：date_add</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">date_add(‘某个日期时间’,interval 1 时间种类名)</code><br />
示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">date_add</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="n">interval</span> <span class="mi">1</span> <span class="nb">year</span><span class="p">);</span> <span class="c1">--加1年</span>
<span class="k">select</span> <span class="n">date_add</span><span class="p">(</span><span class="n">fata</span><span class="p">,</span> <span class="n">interval</span> <span class="mi">1</span> <span class="k">month</span><span class="p">);</span> <span class="c1">--加1月</span>
</code></pre></div></div>

<p>quarter:季，week:周，day:天，hour:小时，minute:分钟，second:秒，microsecond:毫秒<br />
注：也可以不用变量，直接加减某个时间，如：select date_add(‘1998-01-01’, interval 1 day);</p>

<h3 id="字符串专题">字符串专题</h3>
<h4 id="字符串拼接concat">字符串拼接：concat</h4>

<p>将给入的参数逐一拼接<br />
例如：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">concat</span><span class="p">(</span><span class="err">‘</span><span class="o">%</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="n">abc</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="o">%</span><span class="err">’</span><span class="p">)</span> <span class="c1">--结果为%abc%</span>
</code></pre></div></div>
<h4 id="字符串与日期的相互转换">字符串与日期的相互转换</h4>
<p>使用语法：<br />
<code class="language-plaintext highlighter-rouge">DATE_FORMAT(date,format) </code>日期转字符串<br />
<code class="language-plaintext highlighter-rouge">STR_TO_DATE(str,format) </code>字符串转日期<br />
示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">DATE_FORMAT</span><span class="p">(</span><span class="n">now</span><span class="p">(),</span><span class="s1">'%Y-%m-%d %H:%i:%s'</span><span class="p">);</span>
</code></pre></div></div>
<p>返回：2022-12-01 10:07:41</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">str_to_date</span><span class="p">(</span><span class="s1">'2022-8-7'</span><span class="p">,</span><span class="s1">'%Y'</span><span class="p">)</span>
</code></pre></div></div>
<p>返回：2022-00-00<br />
因为这里只获取到了年份，但是作为datetime对象需要补全月份和日所以会有-00-00出现。</p>

<h4 id="组内字符串拼接-group_concat">组内字符串拼接 group_concat</h4>

<p>语法：<br /></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GROUP_CONCAT</span><span class="p">([</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="n">column1</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column2</span> <span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]</span> <span class="p">[</span><span class="n">SEPARATOR</span> <span class="n">seq</span><span class="p">])</span>
</code></pre></div></div>

<p>将分组中column1这一列对应的多行的值按照column2 升序或者降序进行连接，其中分隔符为seq<br />
如果用到了DISTINCT，将表示将不重复的column1按照column2升序或者降序连接<br />
如果没有指定SEPARATOR的话，也就是说没有写，那么就会默认以 ‘,’分隔</p>

<h4 id="字符串截取-substring">字符串截取 substring</h4>
<p>语法格式：<code class="language-plaintext highlighter-rouge">SUBSTRING(str, begin, end)</code><br />
substring函数可以将字符串str从下标begin到end截取下来（下标从1开始计算）（闭区间包括begin和end），其中end默认为空，当end省略时表示截取到字符串最后。<br />
mysq支持逆向访问，即可以使用负数表示下标，负数的下标即从右边开始计算的下标。<br />
示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>	<span class="c1">-- 01</span>
<span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">-- 01234</span>
<span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span> <span class="c1">-- 01234</span>
<span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">-- 4</span>
</code></pre></div></div>

<h4 id="字符串大小写转换">字符串大小写转换</h4>
<p><code class="language-plaintext highlighter-rouge">upper(str)</code>  字符串中所有字母转大写<br />
<code class="language-plaintext highlighter-rouge">lower(str)</code>  字符串中所有字母转小写</p>

<h2 id="技巧语法">技巧语法</h2>

<h4 id="查询排名前n的数据">查询排名前n的数据</h4>

<p>使用<code class="language-plaintext highlighter-rouge">limit</code> n语句实现（该语句需要放在查询结果的最后）</p>

<p>示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">wuhan</span><span class="p">.</span><span class="n">secondhouse</span> <span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="使用正则配对字符串">使用正则配对字符串</h4>

<p>使用<code class="language-plaintext highlighter-rouge">regexp</code>关键字实现
格式： <code class="language-plaintext highlighter-rouge">字段值 regexp 正则字符串</code>
示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">distinct</span> <span class="n">district</span><span class="p">,</span><span class="n">house_type</span><span class="p">,</span><span class="n">wq_area</span><span class="p">,</span><span class="n">wq_num</span><span class="p">,</span><span class="n">yqy_area</span><span class="p">,</span><span class="n">yqy_num</span>
<span class="k">from</span> <span class="n">commercialhousing</span>
<span class="k">where</span> <span class="n">district</span> <span class="n">regexp</span> <span class="s1">'江岸'</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>Ranok</name></author><category term="MySql" /><category term="数据库" /><summary type="html"><![CDATA[MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。]]></summary></entry><entry><title type="html">博客测试</title><link href="http://localhost:4000/demo" rel="alternate" type="text/html" title="博客测试" /><published>2013-10-18T00:00:00+08:00</published><updated>2013-10-18T00:00:00+08:00</updated><id>http://localhost:4000/blogging-with-title</id><content type="html" xml:base="http://localhost:4000/demo"><![CDATA[<p>这里写需要展示在外部的内容，且需要与正文隔一个空行</p>

<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<hr />

<p>需要说明的一点是，makedown完全支持html格式的代码</p>

<p><a href="https://www.baidu.com">百度一下</a> 超链接需要是http格式的</p>

<p>这是一个公式 \(a^2+b^2 &gt; 2ab\)</p>

<p>这是一个<code class="language-plaintext highlighter-rouge">行内代码</code>块</p>

<p>在写代码的时候可以用指定语言的方式来表现出不同的高亮，代码块之间需要有一个空行</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">showw</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"这是一个python代码块"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">show</span><span class="p">(){</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"这是一个C++代码块"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>斜体文字</em></p>

<p><em>斜体文字</em></p>

<p><strong>粗体文字</strong></p>

<p><strong>粗体文字</strong></p>

<p><strong><em>粗斜体文字</em></strong></p>

<p><strong><em>粗斜体文字</em></strong></p>

<hr />
<hr />
<hr />
<hr />
<hr />

<p><del>删除线</del></p>

<p><u>下划线</u></p>

<blockquote>
  <p>警告内容</p>
</blockquote>

<p>表格是制作方式类似于latex</p>

<table>
  <thead>
    <tr>
      <th>hex</th>
      <th>dec</th>
      <th>oct</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>5</td>
      <td>5</td>
      <td>5</td>
    </tr>
    <tr>
      <td>A</td>
      <td>10</td>
      <td>12</td>
    </tr>
    <tr>
      <td>F</td>
      <td>16</td>
      <td>20</td>
    </tr>
    <tr>
      <td>F5</td>
      <td>21</td>
      <td>25</td>
    </tr>
  </tbody>
</table>

<p>导入图片,图片的主路径在assets/img处</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/wolf-test.jpg" alt="wolf-test.jpg" />
    </div>
    
</div>

<p>导入多张图片，只需要在图片导入的位置用，分隔即可</p>

<div class="row">
    
    <div class="column">
        <img src="/assets/img/pexels/book-glass.jpeg" alt="book-glass.jpeg" />
    </div>
    
    <div class="column">
        <img src="/assets/img/feature-img/desk-messy.jpeg" alt="desk-messy.jpeg" />
    </div>
    
</div>]]></content><author><name>Ranok</name></author><category term="Test" /><category term="Image" /><summary type="html"><![CDATA[这里写需要展示在外部的内容，且需要与正文隔一个空行]]></summary></entry></feed>