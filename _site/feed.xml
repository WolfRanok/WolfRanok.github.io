<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-06T00:07:40+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ranok</title><subtitle>Wolf Biting Pencil</subtitle><entry><title type="html">大数据技术原理与应用</title><link href="http://localhost:4000/bigdata" rel="alternate" type="text/html" title="大数据技术原理与应用" /><published>2023-06-05T00:00:00+08:00</published><updated>2023-06-05T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-bigData</id><content type="html" xml:base="http://localhost:4000/bigdata"><![CDATA[<p>  “大数据技术原理与应用”是一门介绍大数据技术的课程。通过学习这门课程，学生可以深入了解大数据技术的原理和应用，并学会如何使用各种工具和技术来处理和管理大数据。此外，该课程还涵盖了大数据架构、设计和性能优化等方面的内容，这些知识对于开展大规模数据处理和分析项目非常重要。因此，“大数据技术原理与应用”对于计算机科学和数据科学领域的学生和从业人员，以及对大数据感兴趣的其他人士都有很大的意义。</p>

<hr />
<h1 id="前言">前言</h1>
<p>  本博客是本人反复听了上课的28分钟录音，听了8个小时左右辛苦肝出来的。如果你可以看到这篇博客，说明我对你有足够的信任，请不要辜负这份信任。</p>

<blockquote>
  <p>未经本人允许，请不要分享本博客出去，分享方式包括但不限于分享链接，截图等。</p>
</blockquote>

<hr />
<h1 id="考题整理">考题整理</h1>

<h2 id="客观题部分50分">客观题部分（50分）</h2>

<h3 id="1-hadoop运行模式有哪些">1. Hadoop运行模式有哪些？</h3>

<ol>
  <li>单机模式</li>
  <li>伪分布式模式</li>
  <li>完全分布式模式</li>
</ol>

<hr />

<h3 id="2-单机模式和伪分布式模式的区别">2. 单机模式和伪分布式模式的区别</h3>

<p>  单机模式只使用一个进程来运行所有的Hadoop服务和组件，而伪分布式模式则模拟了一个真正的分布式环境，它启动了多个进程来运行不同的Hadoop服务和组件，并且这些进程都能够相互通信。因此，伪分布式模式可以更好地模拟实际的生产环境，并且可以更好地测试Hadoop应用程序的性能和可靠性。</p>

<hr />

<h3 id="3-伪分布式的安装">3. 伪分布式的安装</h3>

<h4 id="31-hadoop的开发和运行需要什么环境">3.1 Hadoop的开发和运行需要什么环境？</h4>

<p>  需要Java环境在hadoop-env.sh 中配置</p>

<h4 id="32-伪分布式的安装需要修改哪些配置文件">3.2 伪分布式的安装需要修改哪些配置文件？</h4>

<p>  需要修改文件：core-site.xml hdfs-site.xml</p>

<h4 id="33有关fsdefaultfs的配置的两种问法">3.3有关fs.defaultFS的配置的两种问法</h4>

<h5 id="331问法一fsdefaultfs的参数在哪一个配置文件中进行配置">3.3.1问法一：fs.defaultFS的参数在哪一个配置文件中进行配置？</h5>

<p>  在sore-site.xml中配置</p>

<h5 id="333问法二配置namebode地址时由哪一个参数指定的">3.3.3问法二：配置NameBode地址时由哪一个参数指定的</h5>

<p>  由core-site.xml中的dfs.namenode.dir.参数指定</p>

<hr />

<h3 id="4-hadoop的核心功能组件">4 Hadoop的核心功能组件</h3>

<blockquote>
  <p>可能会考填空或简答。</p>
</blockquote>

<h4 id="41-填空的问法请列举出两个除hdfs和mapreduce之外的两个文件">4.1 填空的问法：请列举出两个除hdfs和MapReduce之外的两个文件</h4>

<ol>
  <li>HBase</li>
  <li>Hive</li>
  <li>Pig</li>
  <li>Mahout</li>
  <li>ZooKeeper</li>
  <li>Flume</li>
  <li>Sqoop</li>
  <li>Ambari</li>
</ol>

<h4 id="42-简答题的问法请举两个核心组件并说明其作用">4.2 简答题的问法：请举两个核心组件并说明其作用</h4>

<ol>
  <li>HBas：是一个提供高可靠性、高性能、可伸缩、实时读写、分布式的列式数据库</li>
  <li>Hive：是一个数据库工具</li>
  <li>Pig：是一种数据流语言和运行环境</li>
  <li>Mahout：是一个开源的项目，它提供了一些课扩展的机器学习领域经典算法的实现</li>
  <li>ZooKeeper：是一个高效和可靠的协同工作系统。5 Namenode</li>
</ol>

<hr />

<h3 id="namenode">Namenode</h3>

<blockquote>
  <p>Datanode会定时的为Namenode发送心跳</p>
</blockquote>

<h4 id="51用于存储数据块信息的目录结构的是哪一个结点">5.1用于存储数据块信息的目录结构的是哪一个结点？</h4>

<p>  Namenode</p>

<h4 id="52-从功能的角度分析namenode主要用于存储什么信息不确定">5.2 从功能的角度分析Namenode主要用于存储什么信息（不确定）</h4>

<p>  NameNode存储着文件系统树以及文件树中所有的文件和文件夹的元数据信息</p>

<h4 id="53在hdfs中保存着两个数据结构请说明这两个数据结构是什么有什么用">5.3在HDFS中保存着两个数据结构，请说明这两个数据结构是什么，有什么用？</h4>

<p>  这两个数据结构分别是FsImage和Editlog。<br />
  FsImageL用于维护文件系统树以及文件树中所有的文件和文件夹的元数据。<br />
  EditLog用于操作日志文件以及记录了所有针对文件的创建、删除、重命名等操作。<br /></p>

<hr />

<h4 id="6-datanode的主要功能是什么">6 DataNode的主要功能是什么？</h4>

<p>  负责管理它所在结点上存储的数据的读写,及存储数据（存放数据）<br /></p>

<blockquote>
  <p>DataNode和DataNode之间会进行进程通信</p>
</blockquote>

<hr />

<h3 id="7-hadoop集群主要瓶颈是什么">7 Hadoop集群主要瓶颈是什么？</h3>

<p>  不是CPU，主要瓶颈是<strong>磁盘IO</strong></p>

<hr />

<h3 id="8-ssh免密登录是为了什么目的是什么">8 ssh免密登录是为了什么/目的是什么？</h3>

<ol>
  <li>启动集群不需要输入密码</li>
  <li>进程之间可以免密通信</li>
  <li>免密登录<strong>不是必须的</strong></li>
</ol>

<hr />

<h3 id="9-hadoop的启停命令">9 Hadoop的启停命令</h3>

<ol>
  <li>start-all.sh：启动所有的Hadoop守护进程</li>
  <li>stop-all.sh：停止所有的Hadoop守护进程</li>
  <li>start-dfs.sh：启动Hadoop HDFS守护进程NameNode、SecondaryNameNode和DataNode</li>
  <li>stop-dfs.sh：停止Hadoop HDFS守护进程NameNode、SecondaryNameNode和DataNode</li>
  <li>单独启动某个进程：hadoop-daemons.sh start name</li>
  <li>单独关闭某个进程：hadoop-daemons.sh stop name</li>
</ol>

<hr />

<h3 id="10-hadoop是否支持随机读取">10 Hadoop是否支持随机读取</h3>

<p>  <strong>不支持</strong></p>

<hr />

<h3 id="11-指令相关">11 ：指令相关</h3>

<h4 id="111列举两个hdfs常用的shell命令">11.1列举<strong>两个</strong>HDFS常用的shell命令</h4>

<ol>
  <li>Hadoop fs -ls <path> 用于展示在指定目录<path>下的文件详细信息</path></path></li>
  <li>Hadoop fs -cat <path> 将指定文件的内容输出到标准输出</path></li>
  <li>Hadoop fs -mkdir [-p] <path> 创建一个或多个文件夹，-p选型用于递归的创建子文件夹</path></li>
  <li>Hadoop fs -cp <src> <dst> 将文件从源路径<src>复制到目标路径<dst></dst></src></dst></src></li>
</ol>

<h4 id="112-列举两个常用的java-api">11.2 列举两个常用的java API</h4>

<ol>
  <li>org.apache.hadoop.fs.FSDataInputStream：文件输入流，用于读Hadoop文件</li>
  <li>org.apache.hadoop.fs.FSDataOutputStream:文件输出流，用于写Hadoop文件</li>
  <li>org.apache.hadoop.fs.Path：用于表示hadoop文件系统中一个文件或者目录的路径</li>
</ol>

<hr />

<h3 id="12-hadoop的特性">12 Hadoop的特性</h3>

<h4 id="121-简答题的写法写5个不需要解释">12.1 简答题的写法（写5个，不需要解释）：</h4>

<ol>
  <li>高可靠性</li>
  <li>高效性</li>
  <li>高可扩展性</li>
  <li>高容错性</li>
  <li>成本低</li>
  <li>运行的在linux系统上</li>
  <li>支持各种编程语言</li>
</ol>

<h4 id="122-填空题的写法挑两个即可">12.2 填空题的写法（挑两个即可）：</h4>

<ol>
  <li>高可靠性</li>
  <li>高效性</li>
  <li>高可扩展性</li>
  <li>高容错性</li>
  <li>成本低</li>
  <li>运行的在linux系统上</li>
  <li>支持各种编程语言</li>
</ol>

<hr />

<h2 id="综合应用50分">综合应用（50分）</h2>

<h3 id="13-hive">13 Hive</h3>

<p>  大致题面：br</p>

<p>  给你一段数据（两种数据）：</p>

<p>  第一种：100 \t zhansan \t 18<br />
  第二种：100，zhansan，18</p>

<h4 id="131-使用hql语言创建一个数据库并指定路径">13.1 使用HQL语言创建一个数据库,并指定路径</h4>

<p>  use 指定的数据库;</p>

<p>  如果是第一种数据则写：<br />
  create table table_name(hight int, name string,age int) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘\t’</p>

<p>  如果是第二种数据则写：<br />
  create table table_name(hight int, name string,age int) ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’</p>

<h4 id="133-装载数据">13.3 装载数据</h4>

<p>  load data [local] inpath <path路径> into table <这里写刚才创建的数据表名></这里写刚才创建的数据表名></path路径></p>

<blockquote>
  <p>这里local表示在本地文件中获取，即如果在本地才需要加上</p>
</blockquote>

<h4 id="134-删除非空数据库">13.4 删除（非空）数据库</h4>

<p>  drop database <数据库名称> cascade</数据库名称></p>

<hr />

<h3 id="14-hbase">14 Hbase</h3>
<h4 id="141-设计逻辑结构">14.1 设计逻辑结构</h4>
<p>  题面：给你一个json串，设计一个逻辑结构</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/bigdata/1.png" alt="1.png" />
    </div>
    
</div>

<p>   答</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/bigdata/2.png" alt="2.png" />
    </div>
    
</div>

<h5 id="142-如何确定一个单元格">14.2 如何确定一个单元格？</h5>

<p>  以下面这个为例。</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/bigdata/3.png" alt="3.png" />
    </div>
    
</div>

<p>   现在以确定一个姓名为LiuJun的人为例：<br />
<strong>行键</strong>“201505002”，<strong>列族</strong>“info”<strong>限定符</strong>“email”和<strong>时间戳</strong>“1230016521”这四个坐标值确定的单元格[“201505002”,”Info”,”email”,”1230016521”]</p>

<h5 id="1422问法二我们的单元格是通过坐标来决定的这四维坐标分别是什么">14.2.2问法二：我们的单元格是通过坐标来决定的，这四维坐标分别是什么？</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="err">“</span><span class="n">行键</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">列族</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">列限定符</span><span class="err">”</span><span class="p">,</span><span class="err">”</span><span class="n">时间戳</span><span class="err">”</span><span class="p">]</span>
</code></pre></div></div>

<h4 id="143-创建表">14.3 创建表</h4>

<p>以第一题的表格为例：</p>

<pre><code class="language-SQL">create 'myTable', {NAME =&gt; 'personal_info'}, {NAME =&gt; 'office_info'}
</code></pre>
<h4 id="144-插入数据">14.4 插入数据</h4>

<p>  可以使用 put 命令向 HBase 表格中的特定单元格添加数据。以下是向名为 myTable 的表格中，行键为 row1，列族为 cf1，列名为 column1 的单元格添加数据的示例：</p>

<pre><code class="language-SQL">put 'myTable', 'row1', 'cf1:column1', 'value1'
</code></pre>

<p>  其中，myTable 是表格的名称，row1 是行键，cf1 是列族名称，column1 是列名。要将值 value1 添加到该单元格，请将其作为最后一个参数传递给 put 命令。</p>

<hr />

<h3 id="15-mapreduce">15 mapreduce</h3>

<h4 id="151mapreduce的编程规范">15.1MapReduce的编程规范</h4>

<p>用户编写的程序分成三个部分：</p>

<p><strong>1：Mapper</strong></p>
<ol>
  <li>用户自定义的Mapper要继承自己的父类</li>
  <li>Mapper的输入数据是KV对的形式（KV类型可自己定义）</li>
  <li>Mapper中的业务逻辑写在map0方法中</li>
  <li>Mapper的输出数据是KV对的形式（KV类型可自定义）</li>
</ol>

<p><strong>2：Reducer</strong></p>
<ol>
  <li>用户自定义的Reducer要继承自己的父类</li>
  <li>Reducer的输入数据类型对应Mapper输出数据类型</li>
  <li>Reducer中的业务逻辑写在reduceO方法中</li>
  <li>ReduceTask进程对每一组相同K的<kv>组调用一次reduce()方法</kv></li>
</ol>

<p><strong>3：Driver</strong><br />
相当于Yam集群的客户端，用于提交我们整个程序到YARN集群，提交的是封装了MapReduce程序相关运行参数的job对象。</p>

<h4 id="152自定义数据类型">15.2自定义数据类型</h4>

<ol>
  <li>实现Writable接口</li>
  <li>空参构造</li>
  <li>重写序列化方法</li>
  <li>重写反序列化方法</li>
  <li>如果需要把结果显示在文件中，则需要重写toString()</li>
  <li>如果需要将自定义的bean放在key中传输，则要实现Comparable接口</li>
</ol>

<h4 id="153代码实现">15.3代码实现</h4>

<h5 id="第一套卷子考点map逻辑实现">第一套卷子考点：map逻辑实现</h5>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/bigdata/4.png" alt="4.png" />
    </div>
    
</div>

<h5 id="1532第二套卷子考点driver逻辑实现">15.3.2第二套卷子考点：Driver逻辑实现</h5>

<p>  7点全要考</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/bigdata/5.png" alt="5.png" />
    </div>
    
</div>]]></content><author><name>Ranok</name></author><category term="big data" /><category term="java" /><category term="期末考试" /><summary type="html"><![CDATA[  “大数据技术原理与应用”是一门介绍大数据技术的课程。通过学习这门课程，学生可以深入了解大数据技术的原理和应用，并学会如何使用各种工具和技术来处理和管理大数据。此外，该课程还涵盖了大数据架构、设计和性能优化等方面的内容，这些知识对于开展大规模数据处理和分析项目非常重要。因此，“大数据技术原理与应用”对于计算机科学和数据科学领域的学生和从业人员，以及对大数据感兴趣的其他人士都有很大的意义。]]></summary></entry><entry><title type="html">xcpc模板积累</title><link href="http://localhost:4000/algorithm" rel="alternate" type="text/html" title="xcpc模板积累" /><published>2023-05-04T00:00:00+08:00</published><updated>2023-05-04T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-algorithm</id><content type="html" xml:base="http://localhost:4000/algorithm"><![CDATA[<p>  这是一个竞赛算法模板博客，用于应对xcpc等算法竞赛。此模板不一定是符合大众的模板，我会带有自己的风格。模板我会不断地更新，内容仅供参考。</p>

<hr />
<h1 id="目录">目录</h1>

<ul>
  <li><a href="#目录">目录</a></li>
  <li><a href="#算法模板积累">算法模板积累</a>
    <ul>
      <li><a href="#图论">图论</a>
        <ul>
          <li><a href="#单元最短路">单元最短路</a>
            <ul>
              <li><a href="#dijiestal">dijiestal</a></li>
              <li><a href="#spfa">SPFA</a></li>
            </ul>
          </li>
          <li><a href="#多远最短路">多远最短路</a>
            <ul>
              <li><a href="#floyd">Floyd</a></li>
            </ul>
          </li>
          <li><a href="#最小生成树">最小生成树</a>
            <ul>
              <li><a href="#prim">prim</a></li>
              <li><a href="#kruskar">Kruskar</a></li>
            </ul>
          </li>
          <li><a href="#spfa负环判断">spfa负环判断</a></li>
          <li><a href="#差分约束">差分约束</a></li>
          <li><a href="#最近公共祖先lca">最近公共祖先lca</a></li>
          <li><a href="#有向图的强连通分量">有向图的强连通分量</a></li>
          <li><a href="#无向图的强连通分量">无向图的强连通分量</a>
            <ul>
              <li><a href="#e-dcc缩点">e-dcc缩点</a></li>
              <li><a href="#v-dcc缩边">v-dcc缩边</a></li>
            </ul>
          </li>
          <li><a href="#二分图">二分图</a>
            <ul>
              <li><a href="#染色法判断二分图是否合理">染色法判断二分图是否合理</a></li>
              <li><a href="#匈牙利算法-解-二分图的最大匹配数">匈牙利算法 解 二分图的最大匹配数</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#dp">dp</a>
        <ul>
          <li><a href="#背包问题">背包问题</a>
            <ul>
              <li><a href="#完全背包">完全背包</a></li>
              <li><a href="#多重背包的二进制优化">多重背包的二进制优化</a></li>
            </ul>
          </li>
        </ul>
      </li>
      <li><a href="#数据结构">数据结构</a>
        <ul>
          <li><a href="#树状数组">树状数组</a></li>
          <li><a href="#线段树">线段树</a></li>
        </ul>
      </li>
      <li><a href="#数学">数学</a>
        <ul>
          <li><a href="#pow">pow</a></li>
          <li><a href="#矩阵快速幂">矩阵快速幂</a></li>
          <li><a href="#逆元计算">逆元计算</a></li>
          <li><a href="#欧拉筛">欧拉筛</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />
<h1 id="算法模板积累">算法模板积累</h1>

<hr />

<h2 id="图论">图论</h2>

<hr />

<h3 id="单元最短路">单元最短路</h3>

<hr />

<h4 id="dijiestal">dijiestal</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">head</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">edge</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">Next</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">val</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">tt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">z</span><span class="p">){</span>
    <span class="n">edge</span><span class="p">[</span><span class="o">++</span><span class="n">tt</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
    <span class="n">val</span><span class="p">[</span><span class="n">tt</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">;</span>
    <span class="n">Next</span><span class="p">[</span><span class="n">tt</span><span class="p">]</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
    <span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">tt</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="p">;</span>
    <span class="n">node</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="n">i</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="n">d</span><span class="p">(</span><span class="n">d</span><span class="p">){}</span>
    <span class="kt">bool</span> <span class="k">friend</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">node</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="n">node</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">d</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">d</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">dijiestal</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">){</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mh">0x3f</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>
    <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span><span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
    
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">node</span> <span class="n">e</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">i</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">y_val</span><span class="o">=</span><span class="n">val</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">y_val</span><span class="p">){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">y_val</span><span class="p">;</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />
<h4 id="spfa">SPFA</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">val</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="n">node</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="kt">int</span> <span class="n">val</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="n">val</span><span class="p">(</span><span class="n">val</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">){}</span>
<span class="p">};</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">b</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>   <span class="c1">// b[i]记录在牧场i处有多少只奶牛</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">c</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">spfa</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">){</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mh">0x3f</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>
    <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">u</span><span class="p">);</span>
    <span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">M</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        
        <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
        
        <span class="k">for</span><span class="p">(</span><span class="n">node</span> <span class="o">&amp;</span><span class="n">e</span><span class="o">:</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">y</span><span class="p">,</span><span class="n">val</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">val</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">val</span><span class="p">){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">val</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
                    <span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">res</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">p</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">MAX</span><span class="p">)</span> <span class="k">return</span> <span class="n">MAX</span><span class="p">;</span>
            <span class="n">res</span><span class="o">+=</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="多远最短路">多远最短路</h3>

<hr />

<h4 id="floyd">Floyd</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">memeset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mh">0x3f</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="o">&gt;&gt;</span><span class="n">z</span><span class="p">;</span>
    <span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">],</span><span class="n">z</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">+</span><span class="n">d</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="最小生成树">最小生成树</h3>
<hr />

<h4 id="prim">prim</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">n</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">res</span><span class="p">;</span>    <span class="c1">// 最小生成树的总路程长度</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">N</span><span class="p">];</span>
<span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="k">friend</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">node</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="n">node</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">d</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">d</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">prim</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
    <span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>

    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span><span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">u</span><span class="p">,</span><span class="mi">0</span><span class="p">});</span>

    <span class="n">memset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mh">0x3f</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>
    <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">node</span> <span class="n">e</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">i</span><span class="p">;</span>

        <span class="k">if</span><span class="p">(</span><span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
        <span class="n">res</span><span class="o">+=</span><span class="n">e</span><span class="p">.</span><span class="n">d</span><span class="p">;</span>

        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">];</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="n">y</span><span class="p">,</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]});</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<hr />
<h4 id="kruskar">Kruskar</h4>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">edge</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">head</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">Next</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">val</span><span class="p">[</span><span class="n">M</span><span class="p">],</span><span class="n">top</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">Hash</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="n">x</span><span class="o">?</span><span class="n">x</span><span class="o">:</span><span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">get</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">mange</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="n">x</span><span class="o">=</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
    <span class="n">y</span><span class="o">=</span><span class="n">get</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">!=</span><span class="n">y</span><span class="p">){</span>
        <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
        <span class="n">Hash</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">z</span><span class="p">){</span>
    <span class="n">edge</span><span class="p">[</span><span class="o">++</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
    <span class="n">val</span><span class="p">[</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">;</span>
    <span class="n">Next</span><span class="p">[</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
    <span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">top</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span><span class="p">;</span>
    <span class="n">node</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="n">i</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="n">d</span><span class="p">(</span><span class="n">d</span><span class="p">){}</span>
    <span class="k">friend</span> <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">node</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span><span class="k">const</span> <span class="n">node</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">d</span><span class="o">&gt;</span><span class="n">b</span><span class="p">.</span><span class="n">d</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">pirm</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">){</span>
    <span class="kt">bool</span> <span class="n">Hash</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mh">0x3f</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>
    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span><span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
    <span class="n">d</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">top</span><span class="p">().</span><span class="n">i</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="n">Hash</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
        <span class="n">Hash</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
        <span class="n">sum</span><span class="o">-=</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">z</span><span class="o">=</span><span class="n">val</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Hash</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="n">z</span><span class="o">&lt;</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">;</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="spfa负环判断">spfa负环判断</h3>

<p>输入的第一行是两个整数 N,K。
接下来 K 行，表示分配糖果时需要满足的关系，每行 3 个数字 X,A,B。</p>

<ol>
  <li>如果 X=1．表示第 A 个小朋友分到的糖果必须和第 B个小朋友分到的糖果一样多。</li>
  <li>如果 X=2，表示第 A 个小朋友分到的糖果必须少于第 B个小朋友分到的糖果。</li>
  <li>如果 X=3，表示第 A 个小朋友分到的糖果必须不少于第 B个小朋友分到的糖果。</li>
  <li>如果 X=4，表示第 A 个小朋友分到的糖果必须多于第 B个小朋友分到的糖果。</li>
  <li>如果 X=5，表示第 A 个小朋友分到的糖果必须不多于第 B 个小朋友分到的糖果。</li>
</ol>

<p>小朋友编号从1到 N。</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">spfa</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">cnt</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">q</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">INF</span><span class="p">;</span>
        <span class="n">mp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">ver</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">z</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">z</span><span class="p">){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">z</span><span class="p">;</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">cnt</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">n</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
                    <span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
<hr />
<h3 id="差分约束">差分约束</h3>
<p>实质上也是判断负环</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;cstring&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="mf">1e5</span><span class="o">+</span><span class="mi">10</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">K</span><span class="o">=</span><span class="mf">3e5</span><span class="o">+</span><span class="mi">10</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">head</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">Next</span><span class="p">[</span><span class="n">K</span><span class="p">],</span><span class="n">edge</span><span class="p">[</span><span class="n">K</span><span class="p">],</span><span class="n">ver</span><span class="p">[</span><span class="n">K</span><span class="p">],</span><span class="n">tot</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="kt">int</span> <span class="n">z</span><span class="p">){</span>
    <span class="n">edge</span><span class="p">[</span><span class="o">++</span><span class="n">tot</span><span class="p">]</span><span class="o">=</span><span class="n">z</span><span class="p">;</span>
    <span class="n">ver</span><span class="p">[</span><span class="n">tot</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
    <span class="n">Next</span><span class="p">[</span><span class="n">tot</span><span class="p">]</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
    <span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">tot</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">ll</span> <span class="n">d</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">stc</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span><span class="n">top</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">cnt</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">spfa</span><span class="p">(){</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">d</span><span class="p">);</span>
    <span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">stc</span><span class="p">[</span><span class="n">top</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">top</span><span class="p">){</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="n">stc</span><span class="p">[</span><span class="o">--</span><span class="n">top</span><span class="p">];</span>
        <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">ver</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">z</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&lt;</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">z</span><span class="p">){</span>
                <span class="n">d</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">z</span><span class="p">;</span>
                <span class="n">cnt</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">cnt</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">cnt</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
                    <span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                    <span class="n">stc</span><span class="p">[</span><span class="n">top</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">,</span><span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">k</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d %d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">t</span><span class="p">,</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span><span class="o">&amp;</span><span class="n">y</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
            <span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
            <span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">==</span><span class="mi">2</span><span class="p">){</span>
            <span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">==</span><span class="mi">3</span><span class="p">){</span>
            <span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">==</span><span class="mi">4</span><span class="p">){</span>
            <span class="n">add</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="n">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">spfa</span><span class="p">()){</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">"-1"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="n">ll</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="n">sum</span><span class="o">+=</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%lld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>
<hr />
<h3 id="最近公共祖先lca">最近公共祖先lca</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">4e4</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="n">N</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">struct</span> <span class="nc">E</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="n">next</span><span class="p">;</span>
<span class="p">}</span> <span class="n">e</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">root</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">dep</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="mi">17</span><span class="p">],</span> <span class="n">h</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">void</span> <span class="n">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">u</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">e</span><span class="p">[</span><span class="o">++</span><span class="n">len</span><span class="p">].</span><span class="n">v</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span> <span class="n">e</span><span class="p">[</span><span class="n">len</span><span class="p">].</span><span class="n">next</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">];</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">bfs</span><span class="p">()</span> <span class="p">{</span>        <span class="c1">// 初始化</span>
    <span class="kt">int</span> <span class="n">q</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">tt</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">hh</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">q</span><span class="p">[</span><span class="n">tt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">root</span><span class="p">;</span>   <span class="c1">// 进入一个根节点</span>
    <span class="n">dep</span><span class="p">[</span><span class="n">root</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dep</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">tt</span><span class="o">!=</span><span class="n">hh</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="n">q</span><span class="p">[</span><span class="n">hh</span><span class="o">++</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">h</span><span class="p">[</span><span class="n">u</span><span class="p">];</span> <span class="n">j</span><span class="p">;</span> <span class="n">j</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">v</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dep</span><span class="p">[</span><span class="n">v</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
            <span class="n">dep</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">dep</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="n">q</span><span class="p">[</span><span class="n">tt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">v</span><span class="p">;</span>
            <span class="n">f</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">u</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">t</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="n">f</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]][</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="n">lca</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 返回x，y的最近公共祖先</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dep</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">dep</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="o">-</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">x</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">dep</span><span class="p">[</span><span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">]]</span> <span class="o">&gt;=</span> <span class="n">dep</span><span class="p">[</span><span class="n">y</span><span class="p">])</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">f</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">i</span><span class="p">])</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">],</span> <span class="n">y</span> <span class="o">=</span> <span class="n">f</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="有向图的强连通分量">有向图的强连通分量</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">tarjan</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=++</span><span class="n">ti</span><span class="p">;</span>
    <span class="n">dic</span><span class="p">[</span><span class="o">++</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
    <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="o">~</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dfn</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
            <span class="n">tarjan</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
            <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">low</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">])</span> <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">dfn</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>     <span class="c1">// 联通块缩点</span>
        <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">ecc_cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="k">do</span><span class="p">{</span>
            <span class="n">y</span><span class="o">=</span><span class="n">dic</span><span class="p">[</span><span class="n">top</span><span class="o">--</span><span class="p">];</span>
            <span class="n">id</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">ecc_cnt</span><span class="p">;</span>
            <span class="n">ecc</span><span class="p">[</span><span class="n">ecc_cnt</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="o">!=</span><span class="n">y</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="无向图的强连通分量">无向图的强连通分量</h3>
<h4 id="e-dcc缩点">e-dcc缩点</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">dcc_cnt</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dfn</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">low</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">ti</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dic</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">top</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>   <span class="c1">// 用于记录边</span>

<span class="kt">void</span> <span class="nf">tarjan</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">pre</span><span class="p">){</span>  <span class="c1">// 用于计算桥的算法,pre是边不是点</span>
    <span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=++</span><span class="n">ti</span><span class="p">;</span>
    <span class="n">dic</span><span class="p">[</span><span class="n">top</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="o">~</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>    <span class="c1">// 注意这里的i表示head要初始化为-1</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dfn</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>    <span class="c1">// 这个点没走过</span>
            <span class="n">tarjan</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
            <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">low</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">&lt;</span><span class="n">low</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>  <span class="c1">//这里有桥</span>
                <span class="n">mp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">mp</span><span class="p">[</span><span class="n">i</span><span class="o">^</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">!=</span><span class="p">(</span><span class="n">pre</span><span class="o">^</span><span class="mi">1</span><span class="p">)){</span>   <span class="c1">// 这个点走过了，但不是父节点</span>
            <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">dfn</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span> <span class="c1">// 说明这个是一个连通域的根结点</span>
        <span class="n">id</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=++</span><span class="n">sign</span><span class="p">;</span>   <span class="c1">// 这里将联通域中所有的点压缩为一个点</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">dic</span><span class="p">[</span><span class="o">--</span><span class="n">top</span><span class="p">];</span><span class="n">y</span><span class="o">!=</span><span class="n">x</span><span class="p">;</span><span class="n">y</span><span class="o">=</span><span class="n">dic</span><span class="p">[</span><span class="o">--</span><span class="n">top</span><span class="p">])</span> <span class="n">id</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">sign</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<h4 id="v-dcc缩边">v-dcc缩边</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">tarjan</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=++</span><span class="n">ti</span><span class="p">;</span>
    <span class="n">dic</span><span class="p">[</span><span class="o">++</span><span class="n">top</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="n">root</span><span class="o">&amp;&amp;</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">==-</span><span class="mi">1</span><span class="p">){</span>   <span class="c1">// 孤立点</span>
        <span class="n">dcc_cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="n">dcc</span><span class="p">[</span><span class="n">dcc_cnt</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">sign</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="o">~</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>    <span class="c1">// 不是孤立点</span>
        <span class="c1">// 注意这里的i表示head要初始化为-1</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dfn</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
            <span class="n">tarjan</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
            <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">low</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">dfn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">&lt;=</span><span class="n">low</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>
                <span class="n">sign</span><span class="o">++</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span><span class="n">sign</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">||</span><span class="n">x</span><span class="o">!=</span><span class="n">root</span><span class="p">)</span> <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
                <span class="n">dcc_cnt</span><span class="o">++</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">z</span><span class="p">;</span>
                <span class="k">do</span><span class="p">{</span>
                    <span class="n">z</span><span class="o">=</span><span class="n">dic</span><span class="p">[</span><span class="n">top</span><span class="o">--</span><span class="p">];</span>
                    <span class="n">dcc</span><span class="p">[</span><span class="n">dcc_cnt</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">z</span><span class="p">);</span>
                <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">z</span><span class="o">!=</span><span class="n">y</span><span class="p">);</span>
                <span class="n">dcc</span><span class="p">[</span><span class="n">dcc_cnt</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">low</span><span class="p">[</span><span class="n">x</span><span class="p">],</span><span class="n">dfn</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="二分图">二分图</h3>
<hr />
<h4 id="染色法判断二分图是否合理">染色法判断二分图是否合理</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">c</span><span class="p">){</span>  <span class="c1">// 结点，颜色，阈值</span>
    <span class="n">color</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">c</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">edge</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">val_y</span><span class="o">=</span><span class="n">val</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="n">color</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">==</span><span class="n">color</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">color</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">&amp;&amp;!</span><span class="n">dfs</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="mi">3</span><span class="o">-</span><span class="n">c</span><span class="p">,</span><span class="n">mid</span><span class="p">))</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">check</span><span class="p">(){</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">color</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">color</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">color</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>     <span class="c1">// 出现矛盾就返回</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h4 id="匈牙利算法-解-二分图的最大匹配数">匈牙利算法 解 二分图的最大匹配数</h4>
<p>二分图的：
最小覆盖点的数量可以用匈牙利算法求解
最小覆盖点的数量 = 最大匹配数
最大独立集 = 总点数 - 最小覆盖点的数量</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>  <span class="c1">// 表示i是否被访问过</span>
<span class="kt">int</span> <span class="n">match</span><span class="p">[</span><span class="n">M</span><span class="p">];</span>   <span class="c1">// 表示i的配对对象是match[i],0表示还没有配对上</span>
<span class="kt">bool</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">head</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">=</span><span class="n">Next</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span> <span class="c1">// 递归的寻找可以与x配对的点</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="n">ver</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]){</span>  <span class="c1">// 这个点没有访问过</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span> <span class="c1">// 标记一下表示访问过了</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">match</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">||</span><span class="n">dfs</span><span class="p">(</span><span class="n">match</span><span class="p">[</span><span class="n">y</span><span class="p">])){</span>   <span class="c1">// 找到一个没有配对过的点，或者一个可以让出y的方案</span>
                <span class="n">match</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span> <span class="c1">// 回溯的标注与其配对的点</span>
                <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>   <span class="c1">// 没找到可以增广的点</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="o">*</span>
    <span class="o">*</span>
    <span class="o">*</span>
    <span class="kt">int</span> <span class="n">res</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>  <span class="c1">// 表示二分图的最大匹配数</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="c1">// 注意！！这里枚举的是二分图的左部（右部也可以）</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">mp</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">mp</span><span class="p">);</span>  <span class="c1">// 这一步不能少</span>
        <span class="k">if</span><span class="p">(</span><span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="dp">dp</h2>
<h3 id="背包问题">背包问题</h3>
<h4 id="完全背包">完全背包</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span> <span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">m</span> <span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">+</span><span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h4 id="多重背包的二进制优化">多重背包的二进制优化</h4>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">){</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d %d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">v</span><span class="p">,</span><span class="o">&amp;</span><span class="n">w</span><span class="p">,</span><span class="o">&amp;</span><span class="n">s</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">k</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">s</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">s</span><span class="o">-=</span><span class="n">k</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="n">v</span><span class="o">*</span><span class="n">k</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">k</span><span class="o">*</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">k</span><span class="o">*</span><span class="n">w</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="n">s</span><span class="o">*</span><span class="n">v</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">)</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="n">s</span><span class="o">*</span><span class="n">v</span><span class="p">]</span><span class="o">+</span><span class="n">w</span><span class="o">*</span><span class="n">s</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<hr />
<h2 id="数据结构">数据结构</h2>
<hr />
<h3 id="树状数组">树状数组</h3>
<p>点修改，区间查询</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span><span class="n">ll</span> <span class="n">d</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="n">i</span><span class="o">&amp;-</span><span class="n">i</span><span class="p">)</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="n">d</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">ll</span> <span class="n">ask</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">){</span>
    <span class="n">ll</span> <span class="n">res</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span><span class="n">i</span><span class="p">;</span><span class="n">i</span><span class="o">-=</span><span class="n">i</span><span class="o">&amp;-</span><span class="n">i</span><span class="p">)</span> <span class="n">res</span><span class="o">+=</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />
<h3 id="线段树">线段树</h3>

<p>区间修改，区间查询</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="o">=</span><span class="mf">2e5</span><span class="o">+</span><span class="mi">10</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="k">struct</span> <span class="nc">node</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span>
    <span class="n">ll</span> <span class="n">sum</span><span class="p">,</span><span class="n">add</span><span class="p">;</span>
    <span class="cp">#define l(p) tree[p].l
</span>    <span class="cp">#define r(p) tree[p].r
</span>    <span class="cp">#define add(p) tree[p].add
</span>    <span class="cp">#define sum(p) tree[p].sum
</span><span class="p">}</span><span class="n">tree</span><span class="p">[</span><span class="n">N</span><span class="o">*</span><span class="mi">4</span><span class="p">];</span>

<span class="kt">void</span> <span class="n">build</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
    <span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span><span class="n">r</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="n">r</span><span class="p">){</span>
        <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
    <span class="n">build</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">mid</span><span class="p">);</span>
    <span class="n">build</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">r</span><span class="p">);</span>
    <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span><span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">spead</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">)){</span>
        <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">+=</span><span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+=</span><span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">+=</span><span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+=</span><span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">change</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="kt">int</span> <span class="n">r</span><span class="p">,</span><span class="kt">int</span> <span class="n">d</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">){</span>
        <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+=</span><span class="n">d</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">add</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+=</span><span class="n">d</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">spead</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">mid</span><span class="p">)</span> <span class="n">change</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">mid</span><span class="o">&lt;</span><span class="n">r</span><span class="p">)</span> <span class="n">change</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
    <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">=</span><span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">ll</span> <span class="n">ask</span><span class="p">(</span><span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
    <span class="n">spead</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">)</span> <span class="k">return</span> <span class="n">sum</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">mid</span><span class="o">=</span><span class="p">(</span><span class="n">l</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="n">r</span><span class="p">(</span><span class="n">p</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
    <span class="n">ll</span> <span class="n">res</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&lt;=</span><span class="n">mid</span><span class="p">)</span> <span class="n">res</span><span class="o">+=</span><span class="n">ask</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">mid</span><span class="o">&lt;</span><span class="n">r</span><span class="p">)</span> <span class="n">res</span><span class="o">+=</span><span class="n">ask</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>


</code></pre></div></div>
<hr />

<h2 id="数学">数学</h2>
<hr />
<h3 id="pow">pow</h3>
<hr />

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ll</span> <span class="nf">pow</span><span class="p">(</span><span class="n">ll</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
    <span class="n">ll</span> <span class="n">res</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="n">res</span><span class="o">*=</span><span class="n">p</span><span class="p">;</span>
        <span class="n">p</span><span class="o">*=</span><span class="n">p</span><span class="p">;</span>
        <span class="n">res</span><span class="o">%=</span><span class="n">mod</span><span class="p">;</span>
        <span class="n">p</span><span class="o">%=</span><span class="n">mod</span><span class="p">;</span>
        <span class="n">n</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="矩阵快速幂">矩阵快速幂</h3>

<p>斐波那契前 n 项<strong>和</strong></p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span><span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;cstring&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">n</span><span class="p">,</span><span class="n">mod</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">res</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">};</span>
<span class="n">ll</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span>
             <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
             <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span> <span class="p">};</span>

<span class="kt">void</span> <span class="n">mul</span><span class="p">(){</span>
    <span class="n">ll</span> <span class="n">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
            <span class="n">c</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">])</span><span class="o">%</span><span class="n">mod</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">c</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">mulself</span><span class="p">(){</span>
    <span class="n">ll</span> <span class="n">c</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
                <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">+</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">])</span><span class="o">%</span><span class="n">mod</span><span class="p">;</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">a</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">mod</span><span class="p">;</span>
    <span class="n">n</span><span class="o">--</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="n">mul</span><span class="p">();</span>
        <span class="n">mulself</span><span class="p">();</span>
        <span class="n">n</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">res</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="逆元计算">逆元计算</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">exgcd</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">,</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="n">a</span><span class="p">;}</span>
    <span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="n">exgcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">%</span><span class="n">b</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">z</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
    <span class="n">x</span><span class="o">=</span><span class="n">y</span><span class="p">;</span>
    <span class="n">y</span><span class="o">=</span><span class="n">z</span><span class="o">-</span><span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="o">*</span><span class="n">y</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />
<h3 id="欧拉筛">欧拉筛</h3>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">prime</span><span class="p">[</span><span class="n">N</span><span class="p">],</span><span class="n">m</span><span class="p">;</span> <span class="c1">// 存放素数</span>
<span class="kt">bool</span> <span class="n">mp</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>     <span class="c1">// 判断是否为素数</span>
<span class="kt">int</span> <span class="n">v</span><span class="p">[</span><span class="n">N</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>

<span class="kt">void</span> <span class="n">primes</span><span class="p">(){</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">prime</span><span class="p">[</span><span class="n">m</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">,</span><span class="n">mp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">||</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;</span><span class="n">N</span><span class="o">/</span><span class="n">i</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span><span class="o">=</span><span class="n">prime</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Ranok</name></author><category term="算法" /><summary type="html"><![CDATA[  这是一个竞赛算法模板博客，用于应对xcpc等算法竞赛。此模板不一定是符合大众的模板，我会带有自己的风格。模板我会不断地更新，内容仅供参考。]]></summary></entry><entry><title type="html">基于svm实现的屏幕翻译项目解析</title><link href="http://localhost:4000/tranlate" rel="alternate" type="text/html" title="基于svm实现的屏幕翻译项目解析" /><published>2023-02-19T00:00:00+08:00</published><updated>2023-02-19T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-translate</id><content type="html" xml:base="http://localhost:4000/tranlate"><![CDATA[<p><a id="go_to_top"></a>
  不知不觉间，人工智能慢慢开始走进千家万户。无人驾驶、AI绘图、语音识别、AI聊天都是人工智能的领域。我作为一个智能的学生已经被迷得不行了，在这份热爱的支持下我完成了这份项目。虽然我的项目与当今智能技术无法比拟，但是其中运用到的机器学习模型（如<code class="language-plaintext highlighter-rouge">SVM</code>分类器）足以能够让我的项目归类到人工智能。</p>

<hr />
<h1 id="目录">目录</h1>
<ul>
  <li><a href="#目录">目录</a></li>
  <li><a href="#前言">前言</a></li>
  <li><a href="#项目总目标">项目总目标</a></li>
  <li><a href="#正文">正文</a>
    <ul>
      <li><a href="#数据收集与数据清洗">数据收集与数据清洗</a>
        <ul>
          <li><a href="#为什么要收集数据">为什么要收集数据？</a></li>
          <li><a href="#数据收集">数据收集</a></li>
          <li><a href="#数据规范化">数据规范化</a></li>
        </ul>
      </li>
      <li><a href="#建模与机器学习svm">建模与机器学习（SVM）</a>
        <ul>
          <li><a href="#对建模的理解与机器学习的理解">对建模的理解与机器学习的理解</a></li>
          <li><a href="#建模">建模</a>
            <ul>
              <li><a href="#1随机划分训练集与测试集">1.随机划分训练集与测试集</a></li>
              <li><a href="#2参数调优">2.参数调优</a></li>
              <li><a href="#3训练">3.训练</a></li>
              <li><a href="#4模型检验">4.模型检验</a></li>
              <li><a href="#5模型保存">5.模型保存</a></li>
            </ul>
          </li>
          <li><a href="#数据处理">数据处理</a></li>
        </ul>
      </li>
      <li><a href="#单词--句子的识别">单词 \&amp; 句子的识别</a>
        <ul>
          <li><a href="#q--a">Q \&amp; A</a></li>
          <li><a href="#findcontours轮廓获取函数说明">findContours轮廓获取函数说明</a>
            <ul>
              <li><a href="#函数说明">函数说明</a></li>
              <li><a href="#函数签名">函数签名</a></li>
              <li><a href="#代码演示">代码演示</a></li>
            </ul>
          </li>
          <li><a href="#首先从图片中分离出句子">首先从图片中分离出句子</a></li>
          <li><a href="#其次从句子中分离出单词">其次从句子中分离出单词</a></li>
          <li><a href="#最后从单词中分离出字母并识别">最后从单词中分离出字母并识别</a></li>
        </ul>
      </li>
      <li><a href="#翻译">翻译</a>
        <ul>
          <li><a href="#传统爬虫">传统爬虫</a></li>
          <li><a href="#selenium技术模块介绍">selenium技术模块介绍</a></li>
          <li><a href="#selenium与传统爬虫的对比">selenium与传统爬虫的对比</a>
            <ul>
              <li><a href="#传统爬虫爬百度翻译">传统爬虫爬百度翻译</a></li>
              <li><a href="#selenium爬百度翻译">selenium爬百度翻译</a></li>
            </ul>
          </li>
          <li><a href="#selenium效率优化">selenium效率优化</a>
            <ul>
              <li><a href="#1-使用显式等待">1. 使用显式等待</a></li>
              <li><a href="#2-无头浏览器">2. 无头浏览器</a></li>
              <li><a href="#3-多线程优化">3. 多线程优化</a></li>
            </ul>
          </li>
          <li><a href="#翻译实现">翻译实现</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#作者自己的一些话">作者自己的一些话</a></li>
</ul>

<hr />

<h1 id="前言">前言</h1>
<p>  此项目专用于204技术交流会使用，未经本人允许不得外传。为了更好地展示项目，所以在这里写下这篇博客。本博客面向新人，我尽可能的使用了最朴素的方式来表达我的项目技术流程以及算法思想，且文章中不会出现大量生僻难懂的术语，请放心食用。另外，此静态博客网基于<a href="http://jekyllrb.com/">Jekyll</a>框架搭建，但对<code class="language-plaintext highlighter-rouge">Jekyll</code>的讨论并不在此次技术交流之列中。如果你对<code class="language-plaintext highlighter-rouge">Jekyll</code>感兴趣，随时欢迎与我讨论❤️。</p>

<p>  本项目设计以及编码历时共7天，共计划分8个模块，项目大致可以划出以下几个技术分支：</p>
<ul>
  <li>基于opencv实现的数据清洗与预处理</li>
  <li>基于svm机器学习分类器识别字母</li>
  <li>基于selenium无头浏览器实现的翻译爬虫</li>
  <li>使用threading线程池优化</li>
</ul>

<hr />

<blockquote>
  <p>温馨提示：如果你觉得界面配色有些刺眼，你可以点击右上角的菜单，选择使用<strong>圆形</strong>按钮切换主题背景。</p>
</blockquote>

<h1 id="项目总目标">项目总目标</h1>

<p>  实现一个可以实时读取屏幕信息，并翻译图中英文的屏幕翻译器。</p>

<p>  效果展示如下图，左右分别为翻译前后的对比：</p>

<div class="row">
    
    <div style="flex: 33.333333333333336%">
        <img src="/assets/img/blog-img/translate/2.jpg" alt="2.jpg" />
    </div>
    
    <div style="flex: 33.333333333333336%">
        <img src="/assets/img/blog-img/translate/1.jpg" alt="1.jpg" />
    </div>
    
</div>

<p>  项目主要的技术点以及流程如下所示</p>

<div class="row">
    
    <div style="flex: 33.333333333333336%">
        <img class="single" src="/assets/img/blog-img/translate/9.png" alt="9.png" />
    </div>
    
</div>

<hr />
<h1 id="正文">正文</h1>

<hr />

<h2 id="数据收集与数据清洗">数据收集与数据清洗</h2>
<hr />

<h3 id="为什么要收集数据">为什么要收集数据？</h3>

<p>  要翻译屏幕中的英文，首先要做的应该是识别出屏幕中的英文。识别的工作是交由机器学习模型实现的，但是模型并不是一开始就拥有识别英文的能力。事实上你可以将<code class="language-plaintext highlighter-rouge">python</code>所提供机器学习模型视为空壳，只有通过不断的喂养其数据，主观的告诉模型什么是对的什么是错的，在不断的训练学习之后模型才有识别的能力。机器学习因此得名“机器学习”。</p>

<p>  什么？你问我为什么不直接去网上下载一个模型？<br />
  那肯定是<del>（没找到）</del>想要锻炼💪自己呀！</p>

<p>  一般的，一个模型的好坏主要最关键的因素是数据的优劣。数据越多越纯净就越容易训练出优秀的模型。因此数据整理的部分显的尤为重要。</p>

<hr />
<h3 id="数据收集">数据收集</h3>

<p>  模型需要识别的是屏幕中的英文，所以收集的数据也应该是印刷体的的字母图片。不过这类数据资源在网上很少能找得到，少数在<a href="https://www.php.cn/tool/git/413611.html">Gethub</a>和<a href="https://cloud.tencent.com/developer/news/68329">Kaggle</a>上找到的资源所训练出的模型效果都不尽人意。</p>

<p>  最终还是决定，自己动手创造数据。<br />
  首先准备好自制的52个大小写英文字母一份。</p>

<div class="row">
    
    <div style="flex: 33.333333333333336%">
        <img class="single" src="/assets/img/blog-img/translate/3.jpg" alt="3.jpg" />
    </div>
    
</div>

<p>  每个字母只有一张图片用以供应模型的训练肯定是不够用的，所以应该对数据进行扩充，保证至少每个字母对应能有20张匹配的图片。这里使用到的技术是图片的<strong>下采样</strong>以做到图片的扩充，简单的理解就是通过对一张图片采用随机的不同程度的模糊化处理从而到多张图片。</p>

<p>  其中对字母A的采样结果示意图如下：</p>

<div class="row">
    
    <div style="flex: 33.333333333333336%">
        <img class="single" src="/assets/img/blog-img/translate/4.jpg" alt="4.jpg" />
    </div>
    
</div>

<p>  你问我为什么不多造几个数据，而是使用下采样扩充？<br />
  <del>（肝不够多）</del>下采样得到的图片是对原有图片的衍生，同样拥有原图像的基本信息，用这样的数据进行训练不会影响模型的效果。</p>

<h3 id="数据规范化">数据规范化</h3>

<p>  图像数据需要最终供模型训练，而训练的接口是固定的，因此所有的数据应该有相同的规格。</p>

<p>  我的做法是将数据处理成 \(20*20\) 像素的黑白图片素材使用。</p>

<p>  也就是将一个普通的字母图片通过横向纵向的拉伸与压缩变成一个 \(20*20\) 标准的图片。显而易见的，这种做法很容易导致图片信息了流失。我在实践中也遇到了这个问题，其中影响最大的就是字母 \(il\) 等长宽比差距较大的字母，如果直接通过拉伸与放缩的手段让其规范化的话就会出现以下的结果（左边为原图，右边为处理后的图像）以至于影响到后面建模的效果:</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/5.jpg" alt="5.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/6.jpg" alt="6.jpg" />
    </div>
    
</div>

<p>  对此我的做法是显式地判断图片的长宽比，当长宽比超过4时，手动放缩，具体代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">resize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">img</span><span class="p">):</span>
        <span class="s">"""
        图像需要原先就是灰度图像
        将图片调整到标准大小20*20
        :param img: 原图像
        :return:finish_img
        """</span>

        <span class="k">if</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>  <span class="c1"># 表示长宽比太大了，不适合做拉伸操作
</span>            <span class="c1">## 待补充，这里需要解决过度拉伸的问题，可能需要寻找填充的方法
</span>            <span class="c1"># 计算需要用于填充的图像的宽高
</span>            <span class="n">high</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">wide</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>

            <span class="n">grid</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">high</span><span class="p">,</span> <span class="n">wide</span><span class="p">))</span>  <span class="c1"># 计算用于填充的黑色图片
</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">grid</span><span class="p">,</span> <span class="n">img</span><span class="p">))</span>  <span class="c1"># 左右都做填充
</span>            <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">img</span><span class="p">,</span> <span class="n">grid</span><span class="p">))</span>  <span class="c1"># 左右都做填充
</span>
            <span class="c1"># 最后将填充的图像重新转换为20*20的格式
</span>            <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">debug</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"这里做了一次对称填充"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
        <span class="c1"># 调整大小并返回
</span>        <span class="k">return</span> <span class="n">img</span>
</code></pre></div></div>
<hr />

<h2 id="建模与机器学习svm">建模与机器学习（SVM）</h2>

<h3 id="对建模的理解与机器学习的理解">对建模的理解与机器学习的理解</h3>
<p>  在数据规范化后我们得到了，噪音（杂质）相对较少的 \(20 * 20\)的图片信息，但是我们的\(SVM\)分类器模型（下面以“\(SVM\)”简称）还不能直接使用这些数据，\(SVM\)所反映的是多个数值影响一个数值的<strong>映射关系函数</strong>，可以简单的概括成以下的函数，训练的最终目的就是为了得到这个函数：</p>

\[f(x) = w_1x_1 + w_2x_2 + w_3x_3 + /dots w_nx_n\]

<blockquote>
  <p>其中 \(x_i\) 表示自变量，可以理解为对应图片像素点的数值，\(w_i\)表示权值，\(f(x)\)是最终计算出来的结果。</p>
</blockquote>

<p>  将之前清洗好的图像，当成一个个\(n\)组400维的方程组，使用\(SVM\) 算法“解方程”。</p>

<blockquote>
  <p>400维由来：一个20*20的图片有400个像素点</p>
</blockquote>

<p>  上面最终计算得到上面的式子，也就是我们所说的一个训练好的模型。</p>

<hr />
<h3 id="建模">建模</h3>
<p>  数据建模，在这里不是指3D建模，而是指一个<strong>机器学习</strong>的流程。这里数据建模用到了机器学习是本项目可以称之为<strong>人工智能</strong>的原因之一。<be>接下来将简单讲解机器学习的流程。</be></p>

<h4 id="1随机划分训练集与测试集">1.随机划分训练集与测试集</h4>

<p>  将整理好的数据，按照一定比例划分成训练集与测试集，训练集的数据顾名思义是用于训练数据的，测试集的数据是用来检验模型的正确率的。</p>

<blockquote>
  <p>训练集的数据就好比那些的有答案的课本，我们拿他学习提升自己的能力，而测试集则更像是试卷，用来检测我们的学习成果。</p>
</blockquote>

<h4 id="2参数调优">2.参数调优</h4>

<p>   一个模型往往有很多的参数需要我们定义，这些参数在不同的情况下需要取不同的数值才能使模型达到最优的效果。不同于平时的算法竞赛题目，这些参数值往往不是确定的，需要我们自己去调整。当然，我们不需要自己手动调参，我们可以用<a href="https://blog.csdn.net/guoyc439/article/details/123381908">网格搜索</a>与<a href="https://blog.csdn.net/qq_36535820/article/details/119762665">k折交叉验证</a>两种方法来解决最优参数的寻找问题。</p>

<p>  这两种算法的主要做法是，将训练集的数据继续分出一个和验证集，通过不断测试与调整，最终计算出最优模型的参数。由于篇幅有限，其具体做法这里不做过多的描述。</p>

<h4 id="3训练">3.训练</h4>

<p>  模型训练的操作，其实才是机器学习里面最难的部分，不过好在SVM已经被python封装好了，我们只需要提供前面清洗出的数据以及定义<a href="#2参数调优">参数调优</a>，稍等片刻即可得到训练好的模型。</p>

<h4 id="4模型检验">4.模型检验</h4>

<p>  将之前分出的测试集数据代入模型进行预测，计算正确率。当然评价一个模型的好坏的指标有很多其他的评价指标还有\(R^2\)，召回率等等，这里不做延伸。</p>

<h4 id="5模型保存">5.模型保存</h4>

<p>  每次训练一个模型经常要消耗大量的时间，为此我们需要保存训练好的模型，在下次做识别时就不需要再训练了。</p>

<p>  上面对机器学习的建模过程的描述地十分简单，但是实际的建模过程远比这个要复杂。只要前面在的“数据分析”“数据选择与清洗”“模型选择”“参数设置”等等环节出现了一个错误都有可能把你的人工智能模型训练成“人工智障”，而且前面的繁多步骤也会加大调参排错的难度。我也是花了4天左右的时间才训练出了一个比较过得去的模型。</p>

<blockquote>
  <p>⚡如果你也想入门人工智能，那要求你至少要有比较强的python基础，成熟的面向对象的思维，以及强大的心理素质。⚡</p>
</blockquote>

<p>  以下是py代码实现</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""
        SVM模型实现
        :return: None
        """</span>
        <span class="c1">## 数据分析与预处理
</span>        <span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_data</span><span class="p">()</span>

        <span class="c1">## 网格搜索,找到最优参数
</span>        <span class="n">machine_svm</span> <span class="o">=</span> <span class="n">svm</span><span class="p">.</span><span class="n">SVC</span><span class="p">()</span>

        <span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span><span class="s">'C'</span><span class="p">:</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">)}</span>  <span class="c1"># 这里设置了参数的测试范围
</span>        <span class="n">grid_search</span> <span class="o">=</span> <span class="n">GridSearchCV</span><span class="p">(</span><span class="n">machine_svm</span><span class="p">,</span> <span class="n">param_grid</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 建立网格搜索器模型
</span>        <span class="n">grid_search</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>  <span class="c1"># 开始搜索
</span>
        <span class="c1">## 创建分类器对象
</span>        <span class="k">print</span><span class="p">(</span><span class="s">"最优参数是 c= "</span><span class="p">,</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"最优模型正确率 = "</span><span class="p">,</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_score_</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">machine_svm</span> <span class="o">=</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_estimator_</span>  <span class="c1"># 获取最优模型
</span>
        <span class="c1">## 模型训练
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">machine_svm</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

        <span class="c1">## 模型验证
</span>        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">machine_svm</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
        <span class="n">correct</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">count_nonzero</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">y_test</span><span class="p">)</span>
        <span class="n">accuracy</span> <span class="o">=</span> <span class="n">correct</span> <span class="o">/</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span>

        <span class="k">print</span><span class="p">(</span><span class="s">"测试集正确率："</span><span class="p">,</span> <span class="n">accuracy</span><span class="p">)</span>

        <span class="c1">## 模型保存
</span>        <span class="n">joblib</span><span class="p">.</span><span class="n">dump</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">machine_svm</span><span class="p">,</span> <span class="s">'model/svm.pkl'</span><span class="p">)</span>

</code></pre></div></div>

<hr />

<h3 id="数据处理">数据处理</h3>

<p>  在前面，我们用做了特殊处理的图片对模型进行训练，所以在用该模型进行识别操作时，也需要对被识别图像做同样的操作。在之前清洗数据时我并没有详细讲解具体的操作，所以放到这里详细说明。</p>

<p>  我们想要预测一个图像，显然无法直接对一个RGB格式的图片下手，对于一个RGB格式的图片，它的每一个像素点都由三个数值组成（Rad Green Blue），这不利于识别，所以需要处理成一个数值，这样的处理过程我们称之为<strong>灰度化</strong>。</p>

<p>  如下方的两个图像就是做了灰度化处理的图像对比。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/7.jpg" alt="7.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/8.jpg" alt="8.jpg" />
    </div>
    
</div>

<p>  为了更好的配对模型，我们需要对灰度图进一步简化，通常的做法是将像素点间的差距拉的尽可能大（离散化），我们通常使用的方式是<strong>二值化</strong></p>

<p>  如下方的两个图像是灰度图像做了二值化处理的前后对比。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/8.jpg" alt="8.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/10.jpg" alt="10.jpg" />
    </div>
    
</div>

<p>  二值化后的图像，为过滤或弱化出图形中的小白点（噪音），我们常常采用高斯模糊（打马赛克）以及腐蚀的方法。</p>

<p>  如下图分别为做了高斯模糊和腐蚀操作的二值图像。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/11.jpg" alt="11.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/12.jpg" alt="12.jpg" />
    </div>
    
</div>

<p>  有时，我们会把握不好腐蚀操作的度，以至于一些重要信息也被过滤掉了，为了弥补过滤掉的内容，一般会对腐蚀后的图像做<strong>膨胀</strong>操作。<br />
一般的，先对一个图像做腐蚀再对齐做膨胀的组合操作我们称之为<strong>开运算</strong>。</p>

<p>  如下为两个分别是做了碰撞和开运算的图像。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/13.jpg" alt="13.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/14.jpg" alt="14.jpg" />
    </div>
    
</div>

<p>  通过<code class="language-plaintext highlighter-rouge">opencv</code>库实现以上操作，可以帮助我们从一张图片中提取出很多有效的信息。你可以从下面的代码中直观得体会出这个处理流程。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">change_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">img</span><span class="p">):</span>
        <span class="s">"""
        将图像进行预处理
        :param img:img 彩图
        :return: img 二值图
        """</span>
        <span class="c1">## 原图像备份
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 高斯模糊
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

        <span class="c1">## 图像灰度化
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 图像二值化
</span>        <span class="n">_</span><span class="p">,</span> <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY_INV</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 开运算降噪
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)),</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 膨胀运算
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_DILATE</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)),</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">copy_img</span>
</code></pre></div></div>
<hr />

<h2 id="单词--句子的识别">单词 &amp; 句子的识别</h2>

<p>  在前面的讲解中，我们已经得到了可以识别字母的模型和清洗好的数据。但是模型只有识别字母的能力没有识别单词的功能，更没有识别句子的能力。所以这里我们需要自己想办法将识别出来的字母进行组合拼凑。</p>

<hr />

<h3 id="q--a">Q &amp; A</h3>

<p>  问题1：为什么，模型无法识别单词？<br />
  答：模型是拿字母图集训练出来的，所以只能识别单词。</p>

<p>  问题2：是否能够训练出能识别单词的模型<br />
  答：可以，但是成本很大，效率也不高。对于26个字母都需要上百的图形数据取训练，如果换成数不胜数的单词的话，需要的数据那更是数不清。而且单词之间本身就有很多相似的部分，这也会加大识别的难度降低效率。</p>

<p>  问题3：如果模型不能识别单词，那要怎么处理这个问题呢？<br />
  答：其实使用<a href="#数据处理">数据处理</a>中说到的的方法就可以巧妙地处理这个问题，不过还要用到cv中的一个内置函数函数，具体操作请看下文。</p>

<hr />

<h3 id="findcontours轮廓获取函数说明">findContours轮廓获取函数说明</h3>

<h4 id="函数说明">函数说明</h4>

<p>   <a href="https://blog.csdn.net/m0_60447786/article/details/125452378">findContours</a>可以作用于，二值图像，查找出图像的所有轮廓信息并返回。</p>

<h4 id="函数签名">函数签名</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">findContours</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">contours</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">hierarchy</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">offset</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</code></pre></div></div>
<p>  image：表示一个二值度图像。<br />
  mode：使用的二值化的算法。<br />
  method：轮廓检测的方式。</p>

<p>  函数具体的使用方式这里不做过多的阐述，如果你对此感兴趣，详情请看这里👉<a href="https://blog.csdn.net/m0_60447786/article/details/125452378">findContours函数详细解析</a></p>

<h4 id="代码演示">代码演示</h4>

<p>  文字的描述或许依然让你难以理解。那么我们来看看下面的代码和效果展示。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_findContours</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""
        该函数用于展示findContours的函数
        :param img: img
        :return: img,con
    """</span>
    <span class="c1">## 轮廓提取
</span>    <span class="n">contours</span><span class="p">,</span> <span class="n">w1</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">RETR_EXTERNAL</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">CHAIN_APPROX_SIMPLE</span><span class="p">)</span>
    
    <span class="c1">## 轮廓绘制
</span>    <span class="n">show_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">copy_img</span><span class="p">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">contours</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
    <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">show_img</span><span class="p">)</span>
</code></pre></div></div>

<p>  如下两图，分别是原图和描绘轮廓后的图形。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/15.jpg" alt="15.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/16.jpg" alt="16.jpg" />
    </div>
    
</div>

<hr />

<h3 id="首先从图片中分离出句子">首先从图片中分离出句子</h3>

<p>  如何识别出一个句子？其实我们只需要框出句子的轮廓，再根据轮廓信息，从原图像中裁剪出来即可。</p>

<p>  但是前面谈到的findContours函数似乎只能查找出字母的轮廓，那要怎么做？</p>

<p>  其实只要适当的对图像做膨胀运算，让所有的字母粘连在一起，所有的单词粘连在一起，让它们形成一个整体。那这个整体不就是句子的轮廓了吗？怎么样是不是很巧妙？<br /></p>

<blockquote>
  <p>不能上手就对图像做膨胀运算，这可能会放大一些杂质（噪音）！</p>
</blockquote>

<p>  下面将处理过程进行展示，处理次序依次是高斯模糊、灰度化、二值化、开运算、膨胀</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/17.jpg" alt="17.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/18.jpg" alt="18.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/19.jpg" alt="19.jpg" />
    </div>
    
</div>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/20.jpg" alt="20.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/21.jpg" alt="21.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/22.jpg" alt="22.jpg" />
    </div>
    
</div>

<p>  代码实现如下。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">change_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">img</span><span class="p">):</span>
        <span class="s">"""
        将图像进行预处理
        :param img:img 彩图
        :return: img 二值图
        """</span>
        <span class="c1">## 原图像备份
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 高斯模糊
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

        <span class="c1">## 图像灰度化
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 图像二值化
</span>        <span class="n">_</span><span class="p">,</span> <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY_INV</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 开运算降噪
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)),</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="c1">## 膨胀运算
</span>        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">copy_img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_DILATE</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">)),</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">show</span><span class="p">(</span><span class="n">copy_img</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">copy_img</span>
</code></pre></div></div>

<hr />

<h3 id="其次从句子中分离出单词">其次从句子中分离出单词</h3>

<p>  这一步操作其实和，上一步差不多，只不过需要将膨胀运算等的参数略做调整，使得单词中的字母之间互相连接而单词之间不连接。</p>

<p>  除此之外，还要记录单词之间的次序，以便后期整理。</p>

<p>  话不多说，上结果：</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/23.jpg" alt="23.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/24.jpg" alt="24.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/25.jpg" alt="25.jpg" />
    </div>
    
</div>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/26.jpg" alt="26.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/27.jpg" alt="27.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/28.jpg" alt="28.jpg" />
    </div>
    
</div>

<p>  下面是代码展示，相比与句子识别部分的代码，下面还多了单词剪切和手动降噪的等代码逻辑。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">image_init</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">img</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="s">"""
        该函数用于将图像灰度化，模糊化，二值化等操作得到可以处理的图像
        :param img: img
        :return: img,con
        """</span>
        <span class="k">if</span> <span class="n">img</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">img</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">img</span>
        <span class="n">copy_img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>

        <span class="c1">## 高斯滤波
</span>        <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

        <span class="c1">## 灰度化处理
</span>        <span class="n">gray_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2GRAY</span><span class="p">)</span>

        <span class="c1">## 二值化
</span>        <span class="n">_</span><span class="p">,</span> <span class="n">binary</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">gray_img</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY_INV</span><span class="p">)</span>

        <span class="c1"># ## 开运算用以降噪
</span>        <span class="n">kernel</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">binary</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="c1">## 膨胀
</span>        <span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">binary</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_DILATE</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

        <span class="c1">## 轮廓提取
</span>        <span class="n">contours</span><span class="p">,</span> <span class="n">w1</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">RETR_EXTERNAL</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">CHAIN_APPROX_SIMPLE</span><span class="p">)</span>
        <span class="n">show_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">copy_img</span><span class="p">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">contours</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>

        <span class="c1">## 提取有效轮廓
</span>        <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">contours</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">cv2</span><span class="p">.</span><span class="n">contourArea</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">min_area</span><span class="p">:</span>  <span class="c1"># 过于小的部分抛弃
</span>                <span class="k">continue</span>

            <span class="n">rect</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">boundingRect</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">weight</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="n">rect</span>  <span class="c1"># 这个是轮廓的信息
</span>            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">rect</span><span class="p">)</span>  <span class="c1"># 收集所有的轮廓信息
</span>        <span class="c1"># contour 所表示的是每一个矩形轮廓的左上点和右下点的坐标
</span>
        <span class="n">contours</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span> <span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]]]</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">result</span><span class="p">]</span>

        <span class="c1">## 剪切对应的轮廓，并返回对应的轮廓矩形的左上点和右下点的坐标集合、
</span>        <span class="n">result_imgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">contour</span> <span class="ow">in</span> <span class="n">contours</span><span class="p">:</span>
            <span class="n">result_imgs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">copy_img</span><span class="p">[</span><span class="n">contour</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]:</span><span class="n">contour</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="n">contour</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]:</span><span class="n">contour</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]])</span>

        <span class="k">return</span> <span class="n">result_imgs</span><span class="p">,</span> <span class="n">contours</span>
</code></pre></div></div>

<hr />

<h3 id="最后从单词中分离出字母并识别">最后从单词中分离出字母并识别</h3>

<p>  其实这一步大体与前面步骤相同，只不过可能不需要再进行膨胀运算了，不然的话将字母整理粘合在一起就不好识别了。</p>

<p>  同样的，我们需要记录分离出来的字母的前后次序，以便整理出正确单词。</p>

<p>  对于每一个分离出来的字母图片同样按照之前<a href="#数据处理">数据处理</a>的步骤，整理成一个可供SVM分类器识别的二值图片后，进行字母预测。</p>

<p>  将识别好的字母按顺序组成单词，再将单词按照次序整理成句子（有些类似于函数回溯的过程）。那么我们就得到了图片的英文识别结果了。</p>

<p>  那么下面这两张图就是字母分离的结果，也是我们之前所展示过的。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/15.jpg" alt="15.jpg" />
    </div>
    
    <div style="flex: 10.0%">
        <img src="/assets/img/blog-img/translate/16.jpg" alt="16.jpg" />
    </div>
    
</div>

<p>  下面给出，字母图片处理的有关代码逻辑</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">resize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">img</span><span class="p">):</span>
        <span class="s">"""
        图像需要原先就是灰度图像
        将图片调整到标准大小20*20
        :param img: 原图像
        :return:finish_img
        """</span>

        <span class="k">if</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>  <span class="c1"># 表示长宽比太大了，不适合做拉伸操作
</span>            <span class="c1">## 待补充，这里需要解决过度拉伸的问题，可能需要寻找填充的方法
</span>            <span class="c1"># 计算需要用于填充的图像的宽高
</span>            <span class="n">high</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">wide</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>

            <span class="n">grid</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">high</span><span class="p">,</span> <span class="n">wide</span><span class="p">))</span>  <span class="c1"># 计算用于填充的黑色图片
</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">grid</span><span class="p">,</span> <span class="n">img</span><span class="p">))</span>      <span class="c1"># 左右都做填充
</span>            <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">img</span><span class="p">,</span> <span class="n">grid</span><span class="p">))</span>  <span class="c1"># 左右都做填充
</span>
            <span class="c1"># 最后将填充的图像重新转换为20*20的格式
</span>            <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>

          <span class="k">else</span><span class="p">:</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>

        <span class="c1"># 调整大小并返回
</span>        <span class="k">return</span> <span class="n">img</span>

</code></pre></div></div>
<hr />

<h2 id="翻译">翻译</h2>

<p>  翻译功能，本项目使用爬虫实现。<br /></p>

<h3 id="传统爬虫">传统爬虫</h3>

<p>  对于传统的爬虫，其一般步骤是：</p>

<ol>
  <li>抓包，找接口。</li>
  <li>寻找表单中的一些参数规律，并解析。</li>
  <li>封装请求头，保存<code class="language-plaintext highlighter-rouge">cookie</code>状态，考虑使用代理等。</li>
  <li>发送表单请求，获取返回信息。</li>
  <li>解析数据，并保存。</li>
</ol>

<p>  传统的爬虫方式，其实就是通过伪装成浏览器的方式获取网络资源的。这种做法的好处是，小巧轻便，速度快。</p>

<p>  但是其局限性也很大，一旦后台更改了接口访问方式、文本加密方式就可能要重写一个份代码。对于需要保存登录信息的网页，我们使用的<code class="language-plaintext highlighter-rouge">cookie</code>也需要时不时更新一下。一些网站带有的反爬机制也会增加传统爬虫的难度。</p>

<blockquote>
  <p>顺带一提，百度翻译现在已经加密了翻译接口的表单参数，用传统的爬虫已经爬不了了。</p>
</blockquote>

<p>  所以我选择selenium技术进行爬虫。</p>

<hr />

<h3 id="selenium技术模块介绍">selenium技术模块介绍</h3>

<p>  如果说传统爬虫是伪装成浏览器，那么<code class="language-plaintext highlighter-rouge">selenium</code>就是模拟成浏览器访问数据。</p>

<p>  什么是“模拟成浏览器”？</p>

<p>  就是像真的浏览器一样，加载一个网页上所有的数据包括，JavaScript，html，png，等等。<br />
  如果处理得当，这种爬虫可以规避 \(95%\) 的反爬监控。</p>

<hr />

<h3 id="selenium与传统爬虫的对比">selenium与传统爬虫的对比</h3>

<p>  selenium的工作思路是基于网页html结构的，而传统爬虫是针对的API接口。</p>

<p>  下面以百度翻译的爬取为例来说明这两种方式的区别。</p>

<hr />

<h4 id="传统爬虫爬百度翻译">传统爬虫爬百度翻译</h4>

<p>  1. 打开网页，输入数据，开始抓包。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img class="single" src="/assets/img/blog-img/translate/29.jpg" alt="29.jpg" />
    </div>
    
</div>

<p>  2. 找到带有，翻译结果的参数。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img class="single" src="/assets/img/blog-img/translate/30.jpg" alt="30.jpg" />
    </div>
    
</div>

<p>  3. 根据抓包工具提供的信息封装请求头。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img class="single" src="/assets/img/blog-img/translate/31.jpg" alt="31.jpg" />
    </div>
    
</div>

<p>  4. 整理表单数据，发送请求。</p>

<p>  5. 接收返回信息并解析。</p>

<hr />

<h4 id="selenium爬百度翻译">selenium爬百度翻译</h4>

<p>  1. 打开网页，找到输入框，从html源码中定位输入框的位置，编写<code class="language-plaintext highlighter-rouge">XPATH</code>语句。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img class="single" src="/assets/img/blog-img/translate/29.jpg" alt="29.jpg" />
    </div>
    
</div>

<p>  2. 在定位到的输入框组件中，（不需要手动输入）输入数据。</p>

<p>  3. 再次使用<code class="language-plaintext highlighter-rouge">XPATH</code>语法，直接从结果框中定位翻译结果。</p>

<div class="row">
    
    <div style="flex: 10.0%">
        <img class="single" src="/assets/img/blog-img/translate/33.jpg" alt="33.jpg" />
    </div>
    
</div>

<p>  selenium的优势在于，不需要繁琐的更新请求头，不用担心接口的更新而导致程序会失效，selenium相比传统的爬虫更加稳定，如果网页没有较大的改变selenium可以一直有效。selenium的难度也不大，只要有一点html基础和XPATH语法就可以灵活使用。</p>

<p>  selenium的劣势也很明显，由于是模拟浏览器，所以会加载很多用不上的信息，比如网页中的图片，视频之类的资源，这会使得爬取的速度下降。</p>

<hr />

<h3 id="selenium效率优化">selenium效率优化</h3>

<p>  前面有提到，selenium因加载无用信息而导致速度的下降，对此我们有以下几种方式来加速。</p>

<h4 id="1-使用显式等待">1. 使用显式等待</h4>

<p>  网页中的信息往往在没有全部加载出来前（通俗的讲就是，刷新箭头还在转的时候），就已经出现了我们想要的信息，这个时候我们不需要等待直接上手抓数据。<br />
  这种方式称之为显式等待。</p>

<h4 id="2-无头浏览器">2. 无头浏览器</h4>

<p>  所谓的无头浏览器就是，直接不展示界面，让selenium在后台加载数据，省去浏览器展示的时间。</p>

<h4 id="3-多线程优化">3. 多线程优化</h4>

<p>  这是一种传统的的方法。如果要访问多次，那么多个线程加载肯定比一个要快。要注意访问公共资源时<code class="language-plaintext highlighter-rouge">上锁</code>。</p>

<blockquote>
  <p>多线程优化用的好的话，程序效率会大大提升。不过这也同样加大了调试的难度。初学者要慎重使用。</p>
</blockquote>

<hr />

<h3 id="翻译实现">翻译实现</h3>

<p>  selenium爬虫的代码实现，部分代码</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">spider</span><span class="p">:</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">'https://fanyi.baidu.com/'</span>
    <span class="n">path_ad</span> <span class="o">=</span> <span class="s">'//div[@class="app-guide-inner"]/div[@class="app-guide-aside"]/span'</span>
    <span class="n">path_input</span> <span class="o">=</span> <span class="s">'//div[@class="textarea-wrap"]/textarea[@class="textarea"]'</span>
    <span class="n">path_out</span> <span class="o">=</span> <span class="s">'//p[@class="ordinary-output target-output clearfix"]/span'</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">get_no_ui_browser</span><span class="p">():</span>
        <span class="s">"""
        获得一个无界面浏览器对象
        :return: Chrome
        """</span>
        <span class="n">chrome_options</span> <span class="o">=</span> <span class="n">Options</span><span class="p">()</span>
        <span class="n">chrome_options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--headless'</span><span class="p">)</span>
        <span class="n">chrome_options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--disable-gpu'</span><span class="p">)</span>
        <span class="n">chrome_options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'blink-settings=imagesEnabled=false'</span><span class="p">)</span>  <span class="c1"># 可以选择不加载图片以提升速度
</span>        <span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="n">Chrome</span><span class="p">(</span><span class="n">chrome_options</span><span class="o">=</span><span class="n">chrome_options</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">browser</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">get_browser</span><span class="p">():</span>
        <span class="s">"""
        获得一个有界面浏览器对象（用于展示或者调试）
        :return:  Chrome
        """</span>

        <span class="k">return</span> <span class="n">webdriver</span><span class="p">.</span><span class="n">Chrome</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">click_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">object</span><span class="p">):</span>
        <span class="s">"""
        用于点击一个元素
        :param object:元素对象
        :return: None
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">browser</span><span class="p">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s">"arguments[0].click();"</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">close_ad</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 这里显示等待界面中的广告出现
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">ad</span> <span class="o">=</span> <span class="n">WebDriverWait</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">browser</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="n">until</span><span class="p">(</span><span class="n">EC</span><span class="p">.</span><span class="n">presence_of_element_located</span><span class="p">((</span><span class="n">By</span><span class="p">.</span><span class="n">XPATH</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">path_ad</span><span class="p">)))</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">click_object</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">ad</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">browser</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_browser</span><span class="p">()</span> <span class="k">if</span> <span class="n">debug</span> <span class="k">else</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_no_ui_browser</span><span class="p">()</span>  <span class="c1"># 获取一个浏览器对象
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">browser</span><span class="p">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>  <span class="c1"># 设置隐式等待的时间
</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">browser</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>  <span class="c1"># 打开界面
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">close_ad</span><span class="p">()</span>  <span class="c1"># 关闭界面上的广告
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">find_button</span><span class="p">()</span>  <span class="c1"># 寻找输入框
</span>
    <span class="k">def</span> <span class="nf">find_button</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""
        此方法用于实现常用元素的查找
        :return: None
        """</span>
        <span class="c1">## 寻找输入输出框框
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">text_input</span> <span class="o">=</span> <span class="n">WebDriverWait</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">browser</span><span class="p">,</span> <span class="mi">5</span><span class="p">).</span><span class="n">until</span><span class="p">(</span>
            <span class="n">EC</span><span class="p">.</span><span class="n">presence_of_element_located</span><span class="p">((</span><span class="n">By</span><span class="p">.</span><span class="n">XPATH</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">path_input</span><span class="p">)))</span>
        <span class="c1"># self.text_out = self.browser.find_element(by=By.XPATH, value=self.path_out)
</span>
    <span class="k">def</span> <span class="nf">input</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="s">"""
        用于给输入框输入句子
        :param text: 待翻译文本
        :return: bool
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">text_input</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>  <span class="c1"># 清除输入内容
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">text_input</span><span class="p">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>  <span class="c1"># 填写被翻译内容
</span>
    <span class="k">def</span> <span class="nf">get_translate_sentence</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""
        获取翻译结果
        :return:翻译结果
        """</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">text_out</span> <span class="o">=</span> <span class="n">WebDriverWait</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">browser</span><span class="p">,</span> <span class="mi">5</span><span class="p">).</span><span class="n">until</span><span class="p">(</span><span class="n">EC</span><span class="p">.</span><span class="n">presence_of_element_located</span><span class="p">((</span><span class="n">By</span><span class="p">.</span><span class="n">XPATH</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">path_out</span><span class="p">)))</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">''</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">text_out</span><span class="p">.</span><span class="n">text</span>

    <span class="k">def</span> <span class="nf">translate_sentence</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">wait</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
        <span class="s">"""
        用于实现翻译的逻辑
        :param text: 需要翻译的文本
        :return: 翻译结果
        """</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">input</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">wait</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_translate_sentence</span><span class="p">()</span>
</code></pre></div></div>

<p>  在加上多线程优化</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">translation_queue</span><span class="p">:</span>
    <span class="n">number</span> <span class="o">=</span> <span class="mi">5</span>  <span class="c1"># 默认开启界面数
</span>    <span class="n">queue</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># 浏览器队列
</span>    <span class="n">hh</span><span class="p">,</span> <span class="n">tt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>  <span class="c1"># 队列头，队列尾
</span>
    <span class="k">def</span> <span class="nf">add_browser</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">spider</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1">## 初始化线程池大小
</span>        <span class="k">if</span> <span class="n">number</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">number</span> <span class="o">=</span> <span class="n">number</span>

        <span class="c1">## 初始化5个浏览器
</span>        <span class="n">children</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">number</span><span class="p">):</span>
            <span class="n">children</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">add_browser</span><span class="p">))</span>
            <span class="n">children</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">start</span><span class="p">()</span>

        <span class="c1"># 等待所有浏览器初始化完毕
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">number</span><span class="p">):</span>
            <span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">join</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">set_text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">queue</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">tt</span><span class="p">].</span><span class="nb">input</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">tt</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">tt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">number</span>

    <span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">queue</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">hh</span><span class="p">].</span><span class="n">get_translate_sentence</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">hh</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">hh</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">number</span>
        <span class="k">return</span> <span class="n">text</span>

</code></pre></div></div>
<hr />

<h1 id="作者自己的一些话">作者自己的一些话</h1>

<p>  本项目其实只是对人工智能算法模型SVM分类器的一个小小的应用。一个模型能做的事情其实都很小很简单，因此对图片的数据清洗解析简化等的步骤尤为重要，而这些处理步骤其实就是，将我们所能看懂图片信息一步步转化成计算机能读的懂的数据。然后将计算机得到的结果转化成我们能读懂的信息（如图片，文字，视频）。这些转化的任务正是我们程序员的工作。</p>

<p>  在项目实操中，还是遇到了不少的困难，例如训练数据找不到，训练数据洗不干净，模型效率低，字母<code class="language-plaintext highlighter-rouge">il</code>分不清，传统爬虫爬不了翻译等等问题。</p>

<p>  程序试错试也是一个复杂的而又漫长的过程，多线程的优化更是进一步加大了编码的难度。</p>

<p>  实现部分远比我当初预想的要难得多，没有团队的支持所有模块都是我一人完成的，平均花了1-2天的时间，虽然很辛苦，但总之项目还是写出来了，代码不多一共1400行，但行行都是心血的付出。</p>

<p>  希望新人们在以后中遇到困难也可以坚持下去，办法总比困难多。只要方向是对的，那么坚持下去就没有错。</p>

<hr />

<p><a href="#go_to_top">回到顶部</a></p>]]></content><author><name>Ranok</name></author><category term="人工智能" /><category term="计算机视觉" /><category term="python" /><category term="机器学习" /><category term="爬虫" /><summary type="html"><![CDATA[  不知不觉间，人工智能慢慢开始走进千家万户。无人驾驶、AI绘图、语音识别、AI聊天都是人工智能的领域。我作为一个智能的学生已经被迷得不行了，在这份热爱的支持下我完成了这份项目。虽然我的项目与当今智能技术无法比拟，但是其中运用到的机器学习模型（如SVM分类器）足以能够让我的项目归类到人工智能。]]></summary></entry><entry><title type="html">Java EE</title><link href="http://localhost:4000/javaee" rel="alternate" type="text/html" title="Java EE" /><published>2022-12-24T00:00:00+08:00</published><updated>2022-12-24T00:00:00+08:00</updated><id>http://localhost:4000/shaoxing-javaee</id><content type="html" xml:base="http://localhost:4000/javaee"><![CDATA[<p>  Java EE，Java 平台企业版（Java Platform Enterprise Edition），之前称为Java 2 Platform, Enterprise Edition (J2EE)，2018年3月更名为 Jakarta EE(这个名称应该还没有得到群众认可)。是 Sun 公司为企业级应用推出的标准平台，用来开发B/S架构软件。Java EE 可以说是一个框架，也可以说是一种规范。</p>

<hr />

<h2 id="前言">前言</h2>
<p>  《java EE》是一门与就业相关度较高的一门课程，作为企业级的应用开发，虽然书本上学的ssm框架已经过时，但是作为我们初学者，它的价值还是不小的。</p>

<p>  本博客按知识点整理一些相关内容，祝愿你可以取得一个让自己满意的成绩。</p>

<hr />
<h2 id="问题解析">问题解析</h2>
<h4 id="spring中bean的作用域有哪些默认是哪一个">Spring中Bean的作用域有哪些，默认是哪一个</h4>

<p>  singleton：单例模式（<strong>默认</strong>），在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例</p>

<p>  prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例</p>

<p>  request：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效</p>

<p>  session：对于每次HTTP Session，使用session定义的Bean豆浆产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效</p>

<p>  globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效</p>

<hr />

<h4 id="spring中有哪些注解">Spring中有哪些注解</h4>
<p>  1. @Controller：将Controller层的类对象交由spring容器生成与管理</p>

<p>  2. @Service：将Service层的类对象交由spring容器生成与管理</p>

<p>  3. @Repository：将Dao层的类对象交由spring容器生成与管理</p>

<p>  4. @Component将类对象交由spring容器生成与管理</p>

<hr />

<h4 id="spring-aopioc的概念">Spring AOP、IOC的概念</h4>
<p>  AOP(Aspect-Oriented Programming:面向切面编程)：是指将那些与业务无关，却被多个业务模块所共同调用逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，提升系统的可维护性。</p>

<p>  IOC就是控制反转，是指程序将创建对象的控制权转交给Spring框架进行管理，由Spring通过java的反射机制根据配置文件在运行时动态的创建实例，并管理各个实例之间的依赖关系。</p>

<hr />

<h4 id="spring-aop中的通知类型">Spring AOP中的通知类型</h4>

<table>
  <thead>
    <tr>
      <th style="text-align: center">通知类型</th>
      <th style="text-align: center">注解</th>
      <th style="text-align: center">说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">before（前置通知）</td>
      <td style="text-align: center">@Before</td>
      <td style="text-align: center">通知方法在目标方法调用之前执行</td>
    </tr>
    <tr>
      <td style="text-align: center">after（后置通知）</td>
      <td style="text-align: center">@After</td>
      <td style="text-align: center">通知方法在目标方法返回或异常后调用</td>
    </tr>
    <tr>
      <td style="text-align: center">after-returning（返回通知）</td>
      <td style="text-align: center">@AfterReturning</td>
      <td style="text-align: center">通知方法会在目标方法返回后调用</td>
    </tr>
    <tr>
      <td style="text-align: center">after-throwing（异常抛出通知）</td>
      <td style="text-align: center">@AfterThrowing</td>
      <td style="text-align: center">通知方法会在目标方法抛出异常后调用</td>
    </tr>
    <tr>
      <td style="text-align: center">around（环绕通知）</td>
      <td style="text-align: center">@Around</td>
      <td style="text-align: center">通知方法会将目标方法封装起来</td>
    </tr>
  </tbody>
</table>

<hr />

<h4 id="spring-实现aop的动态代理的方式">Spring 实现AOP的动态代理的方式</h4>

<p>  1. JDK动态代理（基于接口实现的）：JDK动态代理制能对实现了接口的类生成代理，而不是针对类</p>

<p>  2. CGLIB动态代理（基于类实现的）：CGLIB是针对类实现代理，主要对指定的类生成一个子类，覆盖其中的方法，添加额外功能，因为是继承，所以该类方法不能用final来声明。</p>

<hr />

<h4 id="mybaes如何防止sql注入问题">MyBaes如何防止SQL注入问题</h4>

<p>  在编写MyBatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止SQL注入攻击。</p>

<hr />

<h4 id="动态sql的使用">动态SQL的使用</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"queryList"</span> <span class="na">parameterType=</span><span class="s">"com.jinzheng.pojo.Book"</span> <span class="na">resultType=</span><span class="s">"com.jinzheng.pojo.Book"</span><span class="nt">&gt;</span>
    select * from tb_book
    <span class="nt">&lt;where&gt;</span>
        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"id != null and id !='' "</span><span class="nt">&gt;</span>
            or id = #{id}
        <span class="nt">&lt;/if&gt;</span>
        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"name != null and name !='' "</span><span class="nt">&gt;</span>
            or name like concat('%',#{name},'%')
        <span class="nt">&lt;/if&gt;</span>
        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"press != null and press !='' "</span><span class="nt">&gt;</span>
            or press like concat('%',#{press},'%')
        <span class="nt">&lt;/if&gt;</span>
        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"author != null and author !='' "</span><span class="nt">&gt;</span>
            or author like concat('%',#{author},'%')
        <span class="nt">&lt;/if&gt;</span>
        <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"bookPrice != null and bookPrice !='' "</span><span class="nt">&gt;</span>
            or bookPrice = #{bookPrice}
        <span class="nt">&lt;/if&gt;</span>
    <span class="nt">&lt;/where&gt;</span>
<span class="nt">&lt;/select&gt;</span>
</code></pre></div></div>

<hr />

<h4 id="spring-mvc的工作原理">Spring MVC的工作原理</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/javaee/1.png" alt="1.png" />
    </div>
    
</div>

<hr />

<h4 id="开发java-web项目的三层架构">开发Java Web项目的三层架构</h4>

<p>  1)：数据访问层：(dao持久层)主要是对原始数据（数据库或者文本文件等存放数据的形式）的操作层，
而不是指原始数据，也就是说，是对数据的操作，而不是数据库，具体为业务逻辑层或表示层
提供数据服务．</p>

<p>  2)：业务逻辑层：(service)主要是针对具体的问题的操作，也可以理解成对数据层的操作，对数据业务
逻辑处理，如果说数据层是积木，那逻辑层就是对这些积木的搭建。具体的讲主要负责对数
据层的操作。也就是说把一些数据层的操作进行组合。</p>

<p>  3)：表示层：(controller)主要表示WEB方式，如果逻辑层相当强大和完善，
无论表现层如何定义和更改，逻辑层都能完善地提供服务。
主要对用户的请求接受，以及数据的返回，为客户端提供应用程序的访问。</p>

<hr />

<h4 id="serverlet需要实现的两个方法是什么">serverlet需要实现的两个方法是什么</h4>
<p>  1. toGet 方法<br />
  2. toPut 方法<br /></p>

<h4 id="jsp的9个内置对象">JSP的9个内置对象</h4>

<p>  1. Request对象<br />
  2. Response对象<br />
  3. Out对象<br />
  4. session对象<br />
  5. Application对象<br />
  6. PageContext对象<br />
  7. Config对象<br />
  8. Page（相当于this）对象<br />
  9. Exception对象</p>

<hr />

<h4 id="程序设计题">程序设计题</h4>
<h5 id="1-mybean">1. MyBean</h5>
<p>设计一个数据库访问的代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">userFindByIdTest</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">resources</span> <span class="o">=</span> <span class="s">"mybatis-config.xml"</span><span class="o">;</span>
    <span class="nc">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">reader</span> <span class="o">=</span> <span class="nc">Resources</span><span class="o">.</span><span class="na">getResourceAsReader</span><span class="o">(</span><span class="n">resources</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nc">SqlSessionFactory</span> <span class="n">sqlMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SqlSessionFactoryBuilder</span><span class="o">().</span><span class="na">build</span><span class="o">(</span><span class="n">reader</span><span class="o">);</span>
    <span class="nc">SqlSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">sqlMapper</span><span class="o">.</span><span class="na">openSession</span><span class="o">();</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="s">"findById"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUname</span><span class="o">());</span>
    <span class="n">session</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="2-aop">2. AOP</h5>
<p>基于注解的AOP代码：</p>

<h6 id="注册bean">注册bean</h6>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"userDao"</span> <span class="na">class=</span><span class="s">"com.itheima.demo03.UserDaoImpl"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"AnnoAdvice"</span> <span class="na">class=</span><span class="s">"com.itheima.demo04.AnnoAdvice"</span><span class="nt">/&gt;</span>
<span class="c">&lt;!-- 开启@aspectj的自动代理支持 --&gt;</span>
<span class="nt">&lt;aop:aspectj-autoproxy/&gt;</span>

</code></pre></div></div>

<h6 id="定义通知">定义通知</h6>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 1、在切面中，需要通过指定的注解将方法标识为通知方法
 * @Before：前置通知，在目标对象方法执行之前执行
 * @After：后置通知，在目标对象方法的finally字句中执行
 * @AfterReturning：返回通知，在目标对象方法返回值之后执行
 * @AfterThrowing：异常通知，在目标对象方法的catch字句中执行
 *
 * 2、切入点表达式：设置在标识通知的注解的value属性中
 * execution(public int com.atguigu.spring.aop.annotation.CalculatorImpl.add(int, int)
 * execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..)
 * 第一个*表示任意的访问修饰符和返回值类型
 * 第二个*表示类中任意的方法
 * ..表示任意的参数列表
 * 类的地方也可以使用*，表示包下所有的类
 * 3、重用切入点表达式
 * //@Pointcut声明一个公共的切入点表达式
 * @Pointcut("execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..))")
 * public void pointCut(){}
 * 使用方式：@Before("pointCut()")
 *
 * 4、获取连接点的信息
 * 在通知方法的参数位置，设置JoinPoint类型的参数，就可以获取连接点所对应方法的信息
 * //获取连接点所对应方法的签名信息
 * Signature signature = joinPoint.getSignature();
 * //获取连接点所对应方法的参数
 * Object[] args = joinPoint.getArgs();
 *
 */</span>
 
<span class="nd">@Component</span>
<span class="nd">@Aspect</span>  <span class="c1">//将当前组件标识为切面</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoggerAspect</span> <span class="o">{</span>
 
    <span class="nd">@Pointcut</span><span class="o">(</span><span class="s">"execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..))"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">pointCut</span><span class="o">(){}</span>
 
    <span class="c1">//前置通知</span>
    <span class="c1">//@Before("execution(public int com.atguigu.spring.aop.annotation.CalculatorImpl.add(int, int))")</span>
    <span class="c1">//@Before("execution(* com.atguigu.spring.aop.annotation.CalculatorImpl.*(..))")</span>
    <span class="nd">@Before</span><span class="o">(</span><span class="s">"pointCut()"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeAdviceMethod</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//获取连接点所对应方法的签名信息</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">();</span>
        <span class="c1">//获取连接点所对应方法的参数</span>
        <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getArgs</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoggerAspect，方法："</span><span class="o">+</span><span class="n">signature</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">"，参数："</span><span class="o">+</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">args</span><span class="o">));</span>
    <span class="o">}</span>
 
    <span class="c1">//后置通知</span>
    <span class="nd">@After</span><span class="o">(</span><span class="s">"pointCut()"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterAdviceMethod</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">){</span>
        <span class="c1">// System.out.println("LoggerAspect,后置通知");</span>
        <span class="c1">//获取连接点所对应方法的签名信息</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoggerAspect，方法："</span><span class="o">+</span><span class="n">signature</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">"，执行完毕"</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="c1">//返回通知</span>
    <span class="cm">/**
     * 在返回通知中若要获取目标对象方法的返回值
     * 只需要通过@AfterReturning注解的returning属性
     * 就可以将通知方法的某个参数指定为接收目标对象方法的返回值的参数
     */</span>
    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"pointCut()"</span><span class="o">,</span> <span class="n">returning</span> <span class="o">=</span> <span class="s">"result"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturningAdviceMethod</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">result</span><span class="o">){</span>
        <span class="c1">// System.out.println("LoggerAspect,返回通知");</span>
        <span class="c1">//获取连接点所对应方法的签名信息</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoggerAspect，方法："</span><span class="o">+</span><span class="n">signature</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">"，结果："</span><span class="o">+</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
 
      <span class="c1">//异常通知</span>
    <span class="nd">@AfterThrowing</span><span class="o">(</span> <span class="s">"pointCut()"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowingAdviceMethod</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">){</span>
        <span class="c1">//获取连接点所对应方法的签名信息</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoggerAspect，方法："</span><span class="o">+</span><span class="n">signature</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">",异常通知"</span><span class="o">);</span>
    <span class="o">}</span>
 
    <span class="cm">/**
     * 在异常通知中若要获取目标对象方法的异常
     * 只需要通过AfterThrowing注解的throwing属性
     * 就可以将通知方法的某个参数指定为接收目标对象方法出现的异常的参数
     */</span>
    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"pointCut()"</span><span class="o">,</span> <span class="n">throwing</span> <span class="o">=</span> <span class="s">"ex"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowingAdviceMethod</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Throwable</span> <span class="n">ex</span><span class="o">){</span>
        <span class="c1">//获取连接点所对应方法的签名信息</span>
        <span class="nc">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LoggerAspect，方法："</span><span class="o">+</span><span class="n">signature</span><span class="o">.</span><span class="na">getName</span><span class="o">()+</span><span class="s">"，异常："</span><span class="o">+</span><span class="n">ex</span><span class="o">);</span>
    <span class="o">}</span>
 
 
    <span class="c1">//环绕通知</span>
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"pointCut()"</span><span class="o">)</span>
    <span class="c1">//环绕通知的方法的返回值一定要和目标对象方法的返回值一致</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">aroundAdviceMethod</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">){</span>
        <span class="nc">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕通知--&gt;前置通知"</span><span class="o">);</span>
            <span class="c1">//表示目标对象方法的执行</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕通知--&gt;返回通知"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Throwable</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">throwable</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕通知--&gt;异常通知"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"环绕通知--&gt;后置通知"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="mybean-xml程序编写">MyBean XML程序编写</h4>
<p>要求写出对应的增删改查的几种代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>
<span class="cp">&lt;!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span>
<span class="nt">&lt;mapper</span> <span class="na">namespace=</span><span class="s">"com.jinzheng.dao.BookMapper"</span><span class="nt">&gt;</span>

<span class="c">&lt;!--    显示所有目录--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"findAll"</span> <span class="na">resultType=</span><span class="s">"com.jinzheng.pojo.Book"</span><span class="nt">&gt;</span>
        select * from tb_book
    <span class="nt">&lt;/select&gt;</span>

<span class="c">&lt;!--    根据id查询图书信息 --&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"findBookById"</span> <span class="na">parameterType=</span><span class="s">"Integer"</span>
            <span class="na">resultType=</span><span class="s">"com.jinzheng.pojo.Book"</span><span class="nt">&gt;</span>
        select *
        from tb_book
        where id=#{id}
    <span class="nt">&lt;/select&gt;</span>

<span class="c">&lt;!--    添加数据--&gt;</span>
    <span class="nt">&lt;insert</span> <span class="na">id=</span><span class="s">"addBook"</span> <span class="na">parameterType=</span><span class="s">"com.jinzheng.pojo.Book"</span><span class="nt">&gt;</span>
        insert into tb_book values (#{id},#{name},#{press},#{author},#{bookPrice})
    <span class="nt">&lt;/insert&gt;</span>

<span class="c">&lt;!--        删除数据--&gt;</span>
    <span class="nt">&lt;delete</span> <span class="na">id=</span><span class="s">"deleteById"</span> <span class="na">parameterType=</span><span class="s">"Integer"</span><span class="nt">&gt;</span>
        delete from tb_book where id = #{id}
    <span class="nt">&lt;/delete&gt;</span>

<span class="c">&lt;!--    修改数据--&gt;</span>
    <span class="nt">&lt;update</span> <span class="na">id=</span><span class="s">"updateBook"</span> <span class="na">parameterType=</span><span class="s">"com.jinzheng.pojo.Book"</span><span class="nt">&gt;</span>
        update tb_book
        <span class="nt">&lt;set&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"name != null and name != '' "</span><span class="nt">&gt;</span>
                name = #{name},
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"press != null and press != '' "</span><span class="nt">&gt;</span>
                press = #{press},
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"author != null and author != '' "</span><span class="nt">&gt;</span>
                author = #{author},
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"bookPrice != null and bookPrice != '' "</span><span class="nt">&gt;</span>
                bookPrice = #{bookPrice},
            <span class="nt">&lt;/if&gt;</span>

        <span class="nt">&lt;/set&gt;</span>
        where id = #{id}
    <span class="nt">&lt;/update&gt;</span>

<span class="c">&lt;!--        根据图书信息去模糊查询图书信息(动态SQL)--&gt;</span>
    <span class="nt">&lt;select</span> <span class="na">id=</span><span class="s">"queryList"</span> <span class="na">parameterType=</span><span class="s">"com.jinzheng.pojo.Book"</span> <span class="na">resultType=</span><span class="s">"com.jinzheng.pojo.Book"</span><span class="nt">&gt;</span>
        select * from tb_book
        <span class="nt">&lt;where&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"id != null and id !='' "</span><span class="nt">&gt;</span>
                or id = #{id}
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"name != null and name !='' "</span><span class="nt">&gt;</span>
                or name like concat('%',#{name},'%')
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"press != null and press !='' "</span><span class="nt">&gt;</span>
                or press like concat('%',#{press},'%')
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"author != null and author !='' "</span><span class="nt">&gt;</span>
                or author like concat('%',#{author},'%')
            <span class="nt">&lt;/if&gt;</span>
            <span class="nt">&lt;if</span> <span class="na">test=</span><span class="s">"bookPrice != null and bookPrice !='' "</span><span class="nt">&gt;</span>
                or bookPrice = #{bookPrice}
            <span class="nt">&lt;/if&gt;</span>
        <span class="nt">&lt;/where&gt;</span>
    <span class="nt">&lt;/select&gt;</span>

<span class="nt">&lt;/mapper&gt;</span>

</code></pre></div></div>]]></content><author><name>Ranok</name></author><category term="java" /><category term="java ee" /><category term="期末考试" /><summary type="html"><![CDATA[  Java EE，Java 平台企业版（Java Platform Enterprise Edition），之前称为Java 2 Platform, Enterprise Edition (J2EE)，2018年3月更名为 Jakarta EE(这个名称应该还没有得到群众认可)。是 Sun 公司为企业级应用推出的标准平台，用来开发B/S架构软件。Java EE 可以说是一个框架，也可以说是一种规范。]]></summary></entry><entry><title type="html">服务器</title><link href="http://localhost:4000/server" rel="alternate" type="text/html" title="服务器" /><published>2022-12-23T00:00:00+08:00</published><updated>2022-12-23T00:00:00+08:00</updated><id>http://localhost:4000/shaoxing-server</id><content type="html" xml:base="http://localhost:4000/server"><![CDATA[<p>  服务器指的是网络环境下为客户机(Client)提供某种服务的专用计算机，服务器安装有网络操作系统和各种服务器应用系统软件(如Web服务、电子邮件服务)的计算机。服务器具有高速的CPU运算能力、长时间的可靠运行、强大的I/O外部数据吞吐能力以及更好的扩展性。</p>

<hr />

<h2 id="前言">前言</h2>
<p>  《服务端技术原理与应用》是一门考察类课程，其课程本身难度不大，但是知识点比较多。希望你能好好准备，取得一个好成绩。</p>

<hr />

<h2 id="知识点剖析">知识点剖析</h2>

<h4 id="小点">小点</h4>
<ol>
  <li>在Windows server中，新建的用户属于users组<br /></li>
  <li>系统安装在NTFS盘中<br /></li>
  <li>ipconfig /release可以释放IP地址<br /></li>
  <li>权限以最低为准<br /></li>
  <li>每个人的最低权限都是只读权限</li>
</ol>

<hr />

<h3 id="1-域名空间结构">1. 域名空间结构</h3>
<h4 id="简单介绍">简单介绍</h4>
<p>  根域：代表域名命名空间的根，这里为空。</p>

<p>  顶级域：直接处于根域下面的域，代表一种类型的组织或一些国家。在Internet中，顶级域由InterNIC（Internet Network Information Center）进行管理和维护。</p>

<p>  二级域：在顶级域下面，用来标明顶级域以内的一个特定的组织。在Internet中，二级域也是由InterNIC负责管理和维护。</p>

<p>  子域：在二级域的下面所创建的域，它一般由各个组织根据自己的需求与要求，自行创建和维护。</p>

<p>  主机：是域名命名空间中的最下面一层，它被称之为完全合格的域名（Fully Qualified Domain Name，FQDN），例如www.sanxia.net.cn就是一个完全合格的域名。</p>

<h4 id="域名级别">域名级别</h4>

<p><strong>机构顶级域名：</strong><br />
  com 商业机构，<br />
  gov 政府机构，<br />
  edu 教育机构，<br />
  int 国际组织，<br />
  mil 军事部门，<br />
  net 网络运行与服务中心<br />
  org 其他的非赢利机构</p>

<p><strong>地区顶级域名：</strong><br />
  CN（中国）<br />
  hk （中国香港）<br />
  TW（中国台湾）<br />
  JP（日本）<br />
  RU（俄罗斯）<br />
  UK或GB（英国）</p>

<hr />

<h3 id="2window-server-2016主要新增功能">2.Window Server 2016主要新增功能</h3>
<h4 id="身份标识和访问权限">身份标识和访问权限</h4>
<p>  Window Server 2016的Active Directory域服务可以帮助组织保护Active Directory环境并为组织和个人设备提供更好的标识管理，并提供联合身份验证服务(AD FS) , AD FS对轻型目录访问协议(LDAP) 目录中存储的用户进行身份验证的新功能。</p>

<h4 id="系统管理性能">系统管理性能</h4>
<p>  Window Server 2016提供了新安装选项: Nano Server。 Nano Server针对私有云和数据中心进行优化的远程管理的服务器操作系统。其所需磁盘空间小，启动速度快。Windows Server 2016引入了一种新的PackageManagement功能(以前称为OneGet)，该功能可以允许IT专业人员或开发人员使软件发现、安装、清单(SDIl)在本地或远程自动进行，无论安装程序技术为何，也不管软件位于何处。</p>

<h4 id="系统网络管理">系统网络管理</h4>
<p>  Window Server 2016新增了软件定义的网络。与分布式防火墙和网络安全组联合使用，使你能够以类似于Azure的方式动态分段和保护工作负荷。其次，你可以使用System Center Virtual Machine</p>

<p>  Manager部署并管理整个软件定义的网络(SDN)堆栈。最后，可以使用Docker来管理Windows Server 容器网络，并将SDN 策略与虚拟机和容器关联。在TCP性能改进方面，默认初始拥塞窗口(ICW) 已从4增加到10并已实现TCP快速打开(TFO)。</p>

<h4 id="系统数据存储">系统数据存储</h4>
<p>  Windows Server 2016中的存储包括软件定义存储以及传统文件服务器的新功能和增强功能。存储空间直通允许通过使用具有本地存储的服务器构建高可用性和可缩放存储。存储副本可在各个服务器或群集之间实现存储不可知的块级同步复制，以便在站点间进行灾难恢复及故障转移群集扩展。</p>

<h4 id="web应用程序开发">web应用程序开发</h4>
<p>  Windows Server 2016中的lIS 10.0 Web服务器提供的新增功能包括:</p>

<p>  1. 在网络堆栈中支持HTTP/2协议，并与IIS10.0集成，允许IIS 10.0网站针对支持的配置为HTTP/2请求自动提供服务。</p>

<p>  2. 在Nano Server 中运行和管理lIS 10.0的功能</p>

<p>  3. 支持通配符主机头，使管理员能够为域设置Web 服务器，然后让Web服务器为任何子域的请求提供服务。
一个用于管理IIS的新 PowerShell模块(1ISAdministration)。</p>

<hr />

<h3 id="3dhcp报文">3.DHCP报文</h3>
<p>  DHCP服务器和客户端之间通过8种类型的报文进行通信。8种类型报文的格式相同，只是某些字段的取值不同。DHCP报文格式基于BOOTP的报文格式。它们是:</p>

<h4 id="1-dhcp-discover">1. DHCP DISCOVER:</h4>
<p>  这是DHCP客户端首次登录网络时进行DHCP过程的第一个报文，用来寻找DHCP服务器。</p>

<h4 id="2-dhcp-offer">2. DHCP OFFER:</h4>
<p>  DHCP服务器用来响应DHCP，DISCOVER报文，此报文携带了各种配置信息。</p>

<h4 id="3-dhcp-request">3. DHCP REQUEST</h4>
<p>  此报文用于以下三种用途：</p>

<p>  客户端初始化后，发送广播的DHCP REQUEST 报文来回应服务器的 DHCP OFFER 报文。</p>

<p>  客户端重启初始化后，发送广播的 DHCP REQUEST 报文来确认先前被分配的IP地址等配置信息。</p>

<p>  当客户端已经和某个IP地址绑定后，发送 DHCP REQUEST 报文来延长IP地址的租期。</p>

<h4 id="4-dhcp-ack">4. DHCP ACK:</h4>
<p>  服务器对客户端的DHCP REQUEST 报文的确认响应报文，客户端收到此报
文后，才真正获得了IP地址和相关的配置信息。</p>

<h4 id="5-dhcp-nak">5. DHCP NAK:</h4>
<p>  服务器对客户端的DHCP REQUEST 报文的拒绝响应报文，比如服务器对客户</p>

<p>  端分配的IP地址已超过使用租借期限（服务器没有找到相应的租约记录)或者由于某些原因无法正常分配IP地址，则发送 DHCP NAK报文作为应答（客户端移到了另一个新的网络)。</p>

<p>  通知DHCP客户端无法分配合适IP地址。DHCP客户端需要重新发送</p>

<h4 id="dhcp-discovery">DHCP DISCOVERY</h4>
<p>  报文来申请新的IP地址。</p>

<h4 id="dhcp-decline">DHCP DECLINE:</h4>
<p>  当客户端发现服务器分配给它的IP地址发生冲突时会通过发送此报文来通知服务器，并且会重新向服务器申请地址。</p>

<h4 id="dhcp-release">DHCP RELEASE:</h4>
<p>  客户端可通过发送此报文主动释放服务器分配给它的IP地址，当服务器收到此报文后，可将这个IP地址分配给其它的客户端。</p>

<h4 id="dhcp-inform">DHCP INFORM:</h4>
<p>  客户端已经获得了IP地址，发送此报文的目的是为了从服务器获得其他的一些网络配置信息，比如网关地址、DNS服务器地址等，</p>

<hr />

<h3 id="4操作题ip配置">4.操作题（ip配置）</h3>

<p>  在DHCP服务器上创建一个IP地址作用域，它的名称为“office”，所包含的IP地址范围为：192.168.1.1～192.168.1.100，子网掩码为：255.255.255.0，需要排除的IP地址范围为：192.168.1.51～192.168.1.60，采用默认的租约期限，不用配置DHCP选项。</p>

<h4 id="操作步骤">操作步骤：</h4>
<p>  步骤1：单击【开始】→【程序】→【管理工具】→【DHCP】，打开“DHCP”管理控制台。</p>

<p>  步骤2：右键单击这台计算机的名称，然后选择【新建作用域】 。</p>

<p>  步骤3：当出现“欢迎使用新建作用域向导”时，单击【下一步】按钮。这时出现“作用域名”对话框。</p>

<p>  步骤4：在“作用域名”对话框中，输入：“office”，然后单击【下一步】按钮。</p>

<p>  步骤5：在“IP地址范围”对话框中的【起始IP地址】中输入：192.168.1.1、在【结束IP地址】中输入：192.168.1.100、在【子网掩码】中输入：255.255.255.0。单击【下一步】。</p>

<p>  步骤6：在“添加排除”对话框中的【起始IP地址】中输入：192.168.1.51、在【结束IP地址】中输入： 192.168.1.60、然后单击【添加】按钮，再单击【下一步】按钮。</p>

<p>  步骤7：在“配置DHCP选项”对话框中，选择【否，我想稍后配置这些选项】，单击【下一步】按钮。</p>

<p>  步骤8：当出现“正在完成建立作用域向导”对话框时，单击【完成】按钮。</p>

<h3 id="5dhcp地址分配类型">5.DHCP地址分配类型</h3>
<p>DHCP允许有三种类型的地址分配如下:</p>

<h4 id="1自动分配方式">1.自动分配方式</h4>
<p>  当DHCP客户端第一次成功的从DHCP 服务器端租用到IP地址之后,就永远使用这个地址。</p>

<h4 id="2动态分配方式">2.动态分配方式</h4>
<p>  当DHCP第一次从 HDCP服务器端租用到IP地址之后，并非永久的使用该地址，只要租约到期，客户端就得释放这个IP地址，以给其它工作站使用。当然，客户端可以比其它主机更优先的更新租约，或是租用其它的IP地址。</p>

<h4 id="3手工分配方式">3.手工分配方式</h4>
<p>  DHCP客户端的IP地址是由网络管理员指定的,DHCP服务器只是把指定的IP地址告诉客户端。</p>

<hr />

<h3 id="6分布式文件系dfs的优点">6.分布式文件系（DFS）的优点</h3>
<p>  DFS是将相同的文件同时存储到网络上多台服务器上后，就可以有以下功能和优点:</p>

<h4 id="1访问文件更加容易">1.访问文件更加容易</h4>
<p>  分布式文件系统使用户可以更容易地访问文件。共享文件可能在物理上跨越多个服务器,用户只需要转到网络上的一个位置即可访问文件。</p>

<h4 id="2可用性">2.可用性</h4>
<p>  基于域的DFS命名空间以两种方法确保用户保持文件的访问，一是WindowsServer 20016自动将DFS拓扑发布到活动目录中，以确保DFS拓扑对域中所有服务器上的用户总是可见的;二是用户可以复制DFS根目录和DFS共享文件夹。复制意味着可以在域中的多个服务器上存储DFS根目录和DFS共享文件夹，即使这些文件驻留的一个物理服务器不可用，用户仍然可以访问此文件。</p>

<h4 id="3服务器负载平衡">3.服务器负载平衡</h4>
<p>  DFS根目录支持物理上分布在网络中的多个DFS共享文件夹。这一点很有用,例如，当用户将频繁访问某一文件时,并非所有的用户都在单个服务器上物理地访问此文件，这将会增加服务器的负担,DFS确保访问文件的用户分布于多个服务器。然而，在用户看来,文件驻留在网络上的相同位置。</p>

<h3 id="7服务器的分类">7.服务器的分类</h3>
<h4 id="主dns服务器">主DNS服务器</h4>
<p>  主域名服务器负责维护域中的域名服务信息，管理员需要配置正向解析文件、反向解析文件等相关信息，本身具有向客户机提供域名解析的功能。</p>

<h4 id="辅助dns服务器">辅助DNS服务器</h4>
<p>  辅助域名服务器不需要配置正向解析与反向解析的数据库文件，辅助域名服务器的正向解析与反向解析数据库是从主域名服务器复制得来的。辅助域名服务器的作用是分担主域名服务器的查询负担，提供域名查询的稳定性和可靠性。</p>

<h4 id="转发dns服务器">转发DNS服务器</h4>
<p>  转发DNS服务器(Forwarder Name Server)可以向其他DNS转发解析请求。</p>

<h4 id="惟缓存dns服务器">惟缓存DNS服务器</h4>
<p>  惟缓存DNS服务器不配置域名解析数据库文件，也不从主域名服务器同步其数据库信息。当本地DNS客户机有查询请求时，它会向某个远程DNS服务器转发查询请求。</p>

<hr />

<h3 id="8操作题账户配置">8.操作题（账户配置）</h3>

<p>在计算机上创建一个本地用户帐户，帐户名为“student”，密码为“12345”，并且允许用户在第一次登录时更改密码。</p>

<h4 id="操作步骤-1">操作步骤：</h4>

<p>步骤1：右键单击【我的电脑】→【管理】，然后在“计算机管理”对话框中的【本地用户和组】中右击【用户】，然后选择【新用户】 。</p>

<p>步骤2：在“新用户”对话框中的【用户名】中输入【student】 ，在【密码】中输入：12345，在【确认密码】中再次输入：12345，然后选中用户【下次登录时须更改密码 】 。</p>

<p>步骤3：单击【创建】按钮。</p>

<hr />

<h3 id="9如何在一台服务器上建立多个web站点">9.如何在一台服务器上建立多个Web站点</h3>

<ol>
  <li>使用不同的IP地址<br /></li>
  <li>使用不同的端口号<br /></li>
  <li>使用主机头<br /></li>
</ol>

<h3 id="10概念考察总汇">10.概念考察总汇</h3>

<h4 id="操作系统">操作系统</h4>
<p>  操作系统位于底层硬件与用户之间，是两者沟通的桥梁。用户可以通过操作系统的用户界面，输入命令。</p>

<h4 id="动态磁盘">动态磁盘</h4>
<p>  动态硬盘，即动态磁盘。动态硬盘是指在Windows操作系统的磁盘管理器中将本地硬盘升级得来的。</p>

<h4 id="dns">DNS</h4>
<p>  即域名系统，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</p>

<h4 id="vpn">VPN</h4>
<p>  VPN虚拟专用网络，利用公用网络架设专用网络活动目录。</p>

<h4 id="组策略">组策略</h4>
<p>  是管理员为用户和计算机定义并控制程序、网络资源及操作系统行为的主要工具。</p>]]></content><author><name>Ranok</name></author><category term="服务器" /><category term="期末考试" /><summary type="html"><![CDATA[  服务器指的是网络环境下为客户机(Client)提供某种服务的专用计算机，服务器安装有网络操作系统和各种服务器应用系统软件(如Web服务、电子邮件服务)的计算机。服务器具有高速的CPU运算能力、长时间的可靠运行、强大的I/O外部数据吞吐能力以及更好的扩展性。]]></summary></entry><entry><title type="html">计算机组成原理</title><link href="http://localhost:4000/computer" rel="alternate" type="text/html" title="计算机组成原理" /><published>2022-12-18T00:00:00+08:00</published><updated>2022-12-18T00:00:00+08:00</updated><id>http://localhost:4000/shaoxing-computer</id><content type="html" xml:base="http://localhost:4000/computer"><![CDATA[<p>计算机组成原理重点讲授计算机系统的硬件组成，及其主要功能子系统的基本原理和逻辑设计；主要内容包括计算机系统概述，数据的表示、运算与校验，CPU子系统，存储子系统，总线与I/O子系统，I/O设备及接口等。</p>

<hr />

<h2 id="前言">前言</h2>
<p>本博客针对《计算机组成原理》课程进行期末复习，其中复习形式以<strong>对真题的解答</strong>为主要方式。本门课程偏硬件，对于软件专业的可能需要花费更多的时间来攻克本门课程。希望你顺利通过本门考试。</p>

<hr />

<h2 id="考题分析">考题分析</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">题型</th>
      <th style="text-align: center">单项分数</th>
      <th style="text-align: center">题量</th>
      <th style="text-align: center">总分</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">选择</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">20</td>
    </tr>
    <tr>
      <td style="text-align: center">判断</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">10</td>
    </tr>
    <tr>
      <td style="text-align: center">简答</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">20</td>
    </tr>
    <tr>
      <td style="text-align: center">计算</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">30</td>
    </tr>
    <tr>
      <td style="text-align: center">综合</td>
      <td style="text-align: center">15</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">30</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="选择题">选择题</h2>

<h4 id="1-两个数9f5-h和513-h相加得-c-">1. 两个数\(9F5 H\)和\(513 H\)相加，得( C ).</h4>

<blockquote>
  <p>后缀<code class="language-plaintext highlighter-rouge">H</code>表示16进制，其表示方式\(9F5 H\)等价于\((9F5)_{16}\)</p>
</blockquote>

<p>  A: BDBH<br />
  B: CD8H<br />
  C: F08H<br />
  D: CC8H</p>

<h4 id="2--d-表示法主要用于表示浮点数中的阶码">2. ( D )表示法主要用于表示浮点数中的阶码。</h4>

<p>  A: 原码<br />
  B: 补码<br />
  C: 反码<br />
  D: 移码<br /></p>

<h4 id="3-存储字长是-c-">3. 存储字长是( C )</h4>
<blockquote>
  <p>存储字长是位数，大小才是个数</p>
</blockquote>

<p>  A: 存储单元的个数<br />
  B: 机器指令的位数<br />
  C: 存放在一个存储单元之后的二进制代码位数<br />
  D: 机器字长<br /></p>

<h4 id="4-若x补--110001100则x原-b-">4. 若[x]补 = 1.10001100，则[x]原=( B )。</h4>
<blockquote>
  <p>这里的第一位表示符号位不是小数点<br />
原码 = 补码按位取反后 + 1</p>
</blockquote>

<p>  A: 1.0010101<br />
  B: 1.01110100<br />
  C: 0.0010110<br />
  D: 0.1101010<br /></p>

<h4 id="5-若cpu的地址线为a0a15某芯片存储单元有8k则加在该存储器芯片上的地址线为-c-">5. 若CPU的地址线为A0~A15，某芯片存储单元有8K，则加在该存储器芯片上的地址线为( C )。</h4>
<blockquote>
  <p>1k 表示 \(2^{10}\) 所以可以推算出 8k 表示 \(2^{13}\) 所以总线占据13位</p>
</blockquote>

<p>  A: A0~A10<br />
  B: A0~A11<br />
  C: A0~A12<br />
  D: A0~A13<br /></p>

<h4 id="6-冯诺依曼机工作方式的基本特点是-b-">6. 冯.诺依曼机工作方式的基本特点是( B )。</h4>

<p>  A: 多指令流单数据流<br />
  B: 按地址访问并顺序执行指令<br />
  C: 堆栈操作<br />
  D: 存储器按内容选择地址<br /></p>

<h4 id="7-某一ram-芯片其容为10248位其数据线和地延线分别为-c-">7. 某一RAM 芯片，其容为1024*8位，其数据线和地延线分别为( C )。</h4>
<blockquote>
  <p>1024 表示地址线 \(2^{10}\) 共10位，数据线为8位</p>
</blockquote>

<p>  A: 3、10<br />
  B: 10、3<br />
  C: 8、10<br />
  D: 10、8<br /></p>

<h4 id="8-cache的地址映射中若主存中的任意一块均可映射到cache内的任意一块的位置上称-b-">8. Cache的地址映射中，若主存中的任意一块均可映射到Cache内的任意一块的位置上，称( B )。</h4>
<blockquote>
  <p>直接映射表示：取模映射，每一个块只能映射到模数固定的位置上。<br />
全相联映射：如题意。<br />
组相联映射：组间直接映射，组内全映射<br /></p>
</blockquote>

<p>  A: 直接映射<br />
  B: 全相联映射<br />
  C: 组相联映射<br />
  D: 以上全是<br /></p>

<h4 id="9-某机字长8位来用补码形式则机疑数能表示的范国是-c-">9. 某机字长8位，来用补码形式，则机疑数能表示的范国是( C )。</h4>
<blockquote>
  <p>左闭右开</p>
</blockquote>

<p>  A: -127~+127<br />
  B: -128~+128<br />
  C: -128~+127<br />
  D: -127~+128<br /></p>

<h4 id="10-计算机操作的最小单位时间是-a-">10. 计算机操作的最小单位时间是( A )。</h4>

<p>  A: 时钟周期<br />
  B: 机器周期<br />
  C: CPU周期<br />
  D: 指令周期<br /></p>

<hr />

<h2 id="判断题">判断题</h2>

<h4 id="11超前进位不要考虑前一位来的进位">11．超前进位不要考虑前一位来的进位。（✔）</h4>
<h4 id="12-在补码的加减法中用两位符号位判断溢出两位符号位组合为10时表示结果正溢">12. 在补码的加减法中，用两位符号位判断溢出,两位符号位组合为10时，表示结果正溢。（✖）</h4>
<blockquote>
  <p>00	结果为正，无溢出 <br />
01	正溢，（大于机器所能表示的最大正数）<br />
10	负溢，（小于机器所能表示的最小负数）<br />
11	结果为负，无溢出<br /></p>
</blockquote>

<h4 id="13-nand闪存更适用作为u盘-">13. NAND闪存更适用作为U盘。 （✔）</h4>
<h4 id="14-在程序的执行过程中cache与主存的地址映射是由操作系统来管理的-">14. 在程序的执行过程中，Cache与主存的地址映射是由操作系统来管理的。 (✖)</h4>
<blockquote>
  <p>此处应该把<code class="language-plaintext highlighter-rouge">操作系统</code>换成<code class="language-plaintext highlighter-rouge">硬件</code></p>
</blockquote>

<h4 id="15存取时间比存取周期花费的时间要长一些-">15．存取时间比存取周期花费的时间要长一些。 (✖)</h4>
<blockquote>
  <p>存取周期包括了存储时间，所以存储周期时间要更长</p>
</blockquote>

<h4 id="16-浮点数的正负由阶码的正负符号决定-">16. 浮点数的正负由阶码的正负符号决定。 (✖)</h4>
<blockquote>
  <p>正负由符号位决定</p>
</blockquote>

<h4 id="17-nor闪存更适用作为程序存储器-">17. NOR闪存更适用作为程序存储器。 (✖)</h4>

<h4 id="18-e2prom-是带电可擦可编程的只读存储-">18. \(E^2PROM\) 是带电可擦可编程的只读存储。 (✔)</h4>
<h4 id="19硬件实现的功能一般比款件实现具有更尚的执行速度-">19．硬件实现的功能一般比款件实现具有更尚的执行速度。 (✔)</h4>
<h4 id="20-动态存储dram的刷新是以列为单位的-">20. 动态存储DRAM的刷新是以列为单位的。 (✖)</h4>
<blockquote>
  <p>应该以<strong>行</strong>为单位</p>
</blockquote>

<hr />

<h2 id="简答题">简答题</h2>
<h4 id="21-任意写出五种指令寻址方式">21. 任意写出五种指令寻址方式。</h4>

<p>  1. 隐含寻址
  2. 立即寻址
  3. 直接寻址
  4. 间接寻址
  5. 寄存器寻址
  6. 寄存器间接寻址
  7. 偏移寻址
  8. 堆栈寻址</p>

<h4 id="22写出-nor和nand型flash闪存各自的优缺点">22．写出 NOR和NAND型Flash闪存各自的优缺点</h4>
<p>  NOR可靠性高，适用于擦除次数和编程操作较少，而直接执行代码的场合。
  NAND存储速度快，闪存有10倍于NOR闪存的可擦除次数，适用于大容量存储设备。</p>

<hr />

<h2 id="计算题">计算题</h2>
<h3 id="23-二进制计算">23. 二进制计算</h3>
<blockquote>
  <p>指数 = 阶码 - 127</p>

  <p>IEEE754标准: 1位符号位 + 8位阶码 + 23位尾数</p>
</blockquote>

<h4 id="1设浮点数的阶码和尾数部分均用二进制补码表示按照浮点数的运算规则计算xyx2-1010101100y2-100-0101000">(1)设浮点数的阶码和尾数部分均用二进制补码表示，按照浮点数的运算规则计算X+Y:<br />\(X=2^{-101}*0.101100，Y=2^{-100}*(-0.101000)\)</h4>

<p>  [x]浮=1011;0.101100，[y]浮=1100;1.011000</p>

<p>  对阶:小阶向大阶看齐。</p>

<p>  △E=EA-EB=-1</p>

<p>  [x]浮’=1100;0.010110</p>

<p>  尾数相加：00.010110+11.011000=11.101110</p>

<p>  需左规一次</p>

<p>  [x+y]浮=1011；1.011100</p>

<p>  X+Y=2-101*（-0.100100）</p>

<h4 id="2将十进制数10375表示成单精度的ieee754标准规定的32位短浮点数结呆以十六进制形式给出">（2）将十进制数10.375表示成单精度的IEEE754标准规定的32位短浮点数（结呆以十六进制形式给出)。</h4>

<p>将整数部分和小数部分整理成二进制可以得到：</p>

<p>  \(10.375=(1010.011)_2\)</p>

<p>移动小数点，使其位于第一二位之间：</p>

<p>  \(1010.011=1.010011 X 2^3\)</p>

<p>可以得到：</p>

<p>  \(S=0 E=3+127=130 M=010011\)</p>

<p>所以有二进制的IEEE754标准表达式：</p>

<p>  \(01000001 00100110 00000000 00000000\)</p>

<p>最终得到16进制的IEEE754标准表达式：</p>

<p>  \((41260000)_{16}\)</p>

<h3 id="24设主存容量为256k字cache容量为2k字块长为256字存储器按字寻址">24．设主存容量为256K字，Cache容量为2K字，块长为256字，存储器按字寻址。</h3>
<blockquote>
  <p>块数 = 容量 / 块长</p>

  <p>直接映射标志位 = s - r<br />
全相联映射标志位 = s<br />
w = log(块大小)，r = log(Cache行数)，s = log(主存块数) - w</p>
</blockquote>

<h4 id="1在直接映射方式下设计主存地址格式并求标志位的位数">1)在直接映射方式下,设计主存地址格式并求标志位的位数;</h4>

<p>  \(块大小 = 256 = 2^8 = 2^w 字节\)<br />
  \(所以w=8位\)</p>

<p>  \(主存寻址单元数 = 256K = 2^{18} = 2^{s+w}\)<br />
  \(所以s = 18-8 = 10 位\)</p>

<p>  \(Cache的行大小=2K/256=2^2=2^r\)<br />
  \(所以r=2 位，标记位位数=s-r=10-2=8位\)</p>

<p>综上所述：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">标记s-r</th>
      <th style="text-align: center">行r</th>
      <th style="text-align: center">字地址w</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">8位</td>
      <td style="text-align: center">2位</td>
      <td style="text-align: center">8位</td>
    </tr>
  </tbody>
</table>

<p>标记位的位数是<strong>8</strong>位</p>

<h4 id="2在全相联映射方式下设计主存地址格式并求标志位的位数">2)在全相联映射方式下，设计主存地址格式并求标志位的位数。</h4>
<p>  \(块大小 = 256 = 2^8 = 2^w 字节\)<br />
  \(所以w=8位\)</p>

<p>  \(主存寻址单元数 = 256K = 2^{18} = 2^{s+w}\)<br />
  \(所以s = 18-8 = 10 位\)</p>

<p>综上所述</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">标记s</th>
      <th style="text-align: center">字地址w</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">10位</td>
      <td style="text-align: center">8位</td>
    </tr>
  </tbody>
</table>

<p>标记位的位数是<strong>10</strong>位</p>

<hr />

<h2 id="综合题">综合题</h2>

<h3 id="25用8k2位的sram芯片组成32k8位的存储器试问">25．用8K*2位的SRAM芯片组成32K*8位的存储器。试问:</h3>

<h4 id="1地址寄存器多少位5分">1)地址寄存器多少位?(5分)</h4>

<p>  字大小 = 32K = 2^15<br />
  所以需要15位</p>

<h4 id="2共需要多少片sram5分">2)共需要多少片SRAM?(5分)</h4>

<p>由题意可得
  新组成的存储器，需要4倍的字扩容、4倍的位扩容才能得到<br />
  所以：需要\(4*4 = 16\)片</p>

<h4 id="3画出此存储器的组成简要框图5分">3)画出此存储器的组成简要框图。(5分)</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/computer/1.jpg" alt="1.jpg" />
    </div>
    
</div>

<h3 id="26-作图微指令与微操作">26. 作图（微指令与微操作）</h3>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/computer/3.jpg" alt="3.jpg" />
    </div>
    
</div>

<h4 id="参见图1的数据通路画出取数指令ldar3ro的指令周期流程图其含义是将r3为地址数存单元的内容取至寄存器ro中画出方框图并标出各微操作信号序列">参见图1的数据通路,画出取数指令“LDA(R3),RO的指令周期流程图,其含义是将(R3)为地址数存单元的内容取至寄存器RO中，画出方框图并标出各微操作信号序列。</h4>
<blockquote>
  <p>输入可以不用画</p>

  <p>在下图中，包括菱形在内的上面部分是<strong>取指</strong>，不包括菱形的下部分是<strong>执行</strong></p>
</blockquote>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/computer/2.bmp" alt="2.bmp" />
    </div>
    
</div>]]></content><author><name>Ranok</name></author><category term="计算机组成原理" /><category term="期末考试" /><summary type="html"><![CDATA[计算机组成原理重点讲授计算机系统的硬件组成，及其主要功能子系统的基本原理和逻辑设计；主要内容包括计算机系统概述，数据的表示、运算与校验，CPU子系统，存储子系统，总线与I/O子系统，I/O设备及接口等。]]></summary></entry><entry><title type="html">马克思主义原理</title><link href="http://localhost:4000/marxism" rel="alternate" type="text/html" title="马克思主义原理" /><published>2022-12-17T00:00:00+08:00</published><updated>2022-12-17T00:00:00+08:00</updated><id>http://localhost:4000/shaoxing-marxism</id><content type="html" xml:base="http://localhost:4000/marxism"><![CDATA[<p>马克思主义基本原理是指马克思主义政治经济学、辩证唯物主义和历史唯物主义以及科学社会主义。它是马克思主义科学体系的基本理论、基本范畴，是其立场、观点和方法的理论表达。</p>

<hr />

<h2 id="前言">前言</h2>
<p>本篇博客为对马原课程的期末复习整理，主要是针对68个知识点来整理的，内容较多。祝愿你可以在考试中拿下一个好成绩！</p>

<hr />

<h2 id="考试题型">考试题型</h2>

<table>
  <thead>
    <tr>
      <th>题型</th>
      <th>题量</th>
      <th>分值（题/分）</th>
      <th>总分</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>单选</td>
      <td>20</td>
      <td>1</td>
      <td>20</td>
    </tr>
    <tr>
      <td>多选</td>
      <td>10</td>
      <td>2</td>
      <td>20</td>
    </tr>
    <tr>
      <td>简答</td>
      <td>2</td>
      <td>5</td>
      <td>10</td>
    </tr>
    <tr>
      <td>论述</td>
      <td>2</td>
      <td>10</td>
      <td>20</td>
    </tr>
    <tr>
      <td>分析</td>
      <td>2</td>
      <td>15</td>
      <td>30</td>
    </tr>
    <tr>
      <td>合计</td>
      <td>36</td>
      <td> </td>
      <td>100</td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="考题分析">考题分析</h2>

<hr />

<h3 id="导论">导论</h3>
<h4 id="1马克思主义的三个基本组成部分及其理论来源p2p5">1.马克思主义的三个基本组成部分及其理论来源（P2、P5）</h4>
<p>  三个基本组成部分：马克思主义哲学、马克思主义政治经济学和科学社会主义。<br />
  理论来源：德国古典哲学、英国古典政治经济学、英法两国的空想社会主义。</p>

<h4 id="2马克思主义产生的社会根源阶级基础和思想渊源p4-5待确定">2.马克思主义产生的社会根源、阶级基础和思想渊源（P4-5）（待确定）</h4>
<p>  社会根源：资本主义生产方式的发展。<br />
  阶级基础：无产阶级斗争对科学理论的需求。 <br />
  思想渊源：19世纪西欧三大先进思潮。细胞学说，能量守恒与转化定律，生物进化论，为马克思主义的产生提供了<strong>自然科学前提</strong>。</p>

<h4 id="3马克思主义公开问世的标志p6">3.马克思主义公开问世的标志（P6）</h4>
<p>  《共产党宣言》的发表。</p>

<h4 id="4反杜林论p7">4.《反杜林论》（P7）</h4>
<p>  恩格斯写出了《反杜林论》。全面阐述了马克思主义理论体系。</p>

<h4 id="5马克思主义的鲜明特征p10-11">5.马克思主义的鲜明特征（P10-11）</h4>
<p>  科学性，人民性，实践性，发展性。</p>

<h4 id="6马克思主义的当代价值p12-15多选">6.马克思主义的当代价值（P12-15）（多选）</h4>
<p>  观察当代世界变化的认识工具<br />
  指引当代中国发展的行动指南<br />
  引领人类社会进步的科学真理。</p>

<h4 id="7自觉学习和运用马克思主义p17-18">7.自觉学习和运用马克思主义（P17-18）</h4>
<p>  努力学习和掌握马克思主义的基本立场观点方法。<br />
  努力学习和掌握马克思主义中国化的理论成果。<br />
  坚持理论联系实际的马克思主义学风。<br />
  自觉将马克思主义内化于心外化于行。</p>

<hr />

<h3 id="第一章">第一章</h3>
<h4 id="8哲学的基本问题p21">8.哲学的基本问题（P21）</h4>
<p>  哲学的基本问题主要包括两方面内容。一是存在和思维，物质和意识谁为本源的问题，即何者为第一性的问题，对于这一问题的不同回答形成了<strong>唯物主义和唯心主义</strong>两种根本对立的哲学派别，二是存在和思维，物质和意识是否具有同一性的问题，即思维能否正确的反映存在人能否认识或彻底认识世界的问题，对这一问题的不同回答，产生了<strong>可知论和不可知论</strong>的理论分野</p>

<h4 id="9意识的本质p26">9.意识的本质（P26）</h4>
<p>  意识是人脑这样一种特殊物质的机能和属性，是客观世界的主观映象。</p>

<h4 id="10主观能动和客观规律性的辩证统一p27">10.主观能动和客观规律性的辩证统一（P27）</h4>
<p>  一方面尊重客观规律是正确发挥主观能动性的前提。<br />
  另一方面只有充分发挥主观能动性，才能正确认识和利用客观规律。</p>

<h4 id="11联系的含义及特点p32">11.联系的含义及特点（P32）</h4>
<p>  联系是指事物内部各要素之间和事物之间互相影响，互相制约，互相作用的关系。<br />
  联系具有客观性，普遍性、多样性、条件性。</p>

<h4 id="12发展的实质p33">12.发展的实质（P33）</h4>
<p>  新事物的产生和旧事物的灭亡。</p>

<h4 id="13矛盾的同一性和斗争性原理及其方法论要求p35-36">13.矛盾的同一性和斗争性原理及其方法论要求（P35-36）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  矛盾的同一性是指矛盾着的对立面，互相依存，互相贯通的性质和趋势，有两个方面的含义<br />
  一是矛盾着的对立面，相互依存互为存在的前提并共处于一个统一个体中。<br />
  二是矛盾着的对立面，互相贯通，在一定条件下可以互相转化。矛盾的斗争性是矛盾着的，对立面互相排斥，互相分离的性质和趋势。</p>

<p>方法论要求：<br />
  矛盾的统一性和斗争性的辩证关系原理，要求我们在观察和处理问题时，必须善于把两者结合起来，既要看到矛盾双方的对立，又要看到矛盾双方的统一，在斗争中把握同一性，在同一性中把握斗争性。</p>

<h4 id="14矛盾的普遍性和特殊性的辩证关系原理及其方法论要求p37">14.矛盾的普遍性和特殊性的辩证关系原理及其方法论要求（P37）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  矛盾的普遍性和特殊性是辩证统一的关系，矛盾的普遍性，即矛盾的共性，矛盾的特殊性，即矛盾的个性。 <br />
  二者相互区别矛盾的共性是无条件的，绝对的矛盾的，个性是有条件的，相对的<br />
  二者相互区别任何存在的事物都是共性和个性的有机统一，共性寓于个性之中，没有离开个性的共性，也没有离开共性的个性<br />
  二者在一定条件下相互转化<br />
  方法论要求我们坚持个性与共性相结合的分析方法</p>

<p>方法论要求：<br />
  矛盾同一性和斗争性的辩证关系原理要求，我们在观察和处理问题时，必须善于把两者结合起来，在斗争性中把握同一性，在同一性中把握斗争性，既要看到矛盾双方的对立，又要看到矛盾双方的统一。</p>

<h4 id="15量变质变规律及其方法论要求p38">15.量变质变规律及其方法论要求（P38）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  第一量变是质变的必要准备；<br />
  第二质变是量变的必然结果；<br />
  第三量变和质变是相互渗透的；</p>

<p>方法论要求：<br />
  一方面当事物的发展处在量变阶段时，要踏踏实实做好日常工作，为未来重大改变做准备。<br />
  另一方面当质变来临的时候要果断的不失时机的抓住机遇，促成质变，使工作迈上新台阶。</p>

<h4 id="16辩证的否定观及其方法论要求p39">16.辩证的否定观及其方法论要求（P39）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  第一否定是事物自我否定；<br />
  第二否定是事物发展的环节；<br />
  第三否定是新旧事物联系的环节；<br />
  第四辩证否定的实质是扬弃。</p>

<p>方法论要求：<br />
  按照否定之父定规律办事，就要求我们树立辩证的否定观，反对形而上学的肯定一切或否定一切，要对事物采取科学分析的态度，使实践活动符合事物自我否定的辩证本性，同时又要求我们正确看待事物发展的过程，既要看到道路的曲折，又要看到前途的光明。</p>

<h4 id="17原因与结果p41">17.原因与结果（P41）</h4>
<p>  <strong>原因与结果</strong>是揭示事物引起和被引起关系的一对范畴，在事物的普遍联系中，引起某种现象的现象就是原因，被某种现象所引起的现象就是结果。</p>

<h4 id="18辩证思维能力p50">18.辩证思维能力（P50）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  提高辩证思维能力，要求我们客观地而不是主观地联系地，而不是孤立地发展地，而不是静止的全面地而不是片面地系统地而不是零散地观察事物，把握事物的本质和发展规律，找到解决问题的方法和途径。<br />
  以问题为向导，善于正确分析矛盾，在对立中把握统一在统一中把握对立，克服极端化，片面化，善于运用辩证思维谋划事业发展。</p>

<hr />

<h3 id="第二章">第二章</h3>
<h4 id="19实践的基本特征p62-63">19.实践的基本特征（P62-63）</h4>
<p>  实践具有客观实在性、自觉能动性、社会历史性。</p>

<h4 id="20实践对认识的决定作用p67-68">20.实践对认识的决定作用（P67-68）</h4>
<blockquote>
  <p>本知识点考查论述题</p>
</blockquote>

<p>实践是认识的来源；
  实践是认识发展的动力；<br />
  实践是认识的目的；<br />
  实践是检验认识真理的唯一标准。</p>

<h4 id="21两条根本对立的认识路线p69">21.两条根本对立的认识路线（P69）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  在认识的本质问题上，存在着两条根本对立的认识路线：<br />
  一条是坚持从物到感觉和思想的唯物主义认识路线。<br />
  另一条是坚持从思想和感觉到物的唯心主义认识路线。</p>

<h4 id="22认识的本质p71">22.认识的本质（P71）</h4>
<p>  在认识的本质问题上，存在着两条根本对立的认识路线：<br />
  一条是坚持从物到感觉和思想的唯物主义认识路线；<br />
  另一条是坚持从思想和感觉到物的唯心主义认识路线。</p>

<h4 id="23感性认识和理性认识的辩证统一关系p74">23.感性认识和理性认识的辩证统一关系（P74）</h4>
<blockquote>
  <p>本知识点考查论述题</p>
</blockquote>

<p>  第一理性认识依赖于感性认识；<br />
  第二感性认识有待于发展和深化为理性认识；<br />
  第三感性认识和理性认识相互渗透相互包含<br />
  第四毛泽东说。我们的实践证明，感觉到了的东西，我们不能立刻理解它，只有理解了的东西才更深刻的感觉它。这段话形象的说明了感性认识上升为理性认识的重要性以及二者关系的交融性</p>

<h4 id="24实践与认识的辩证运动规律p77">24.实践与认识的辩证运动规律（P77）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  实践与认识的辩证运动是由一个感性认识到理性认识，又有理性认识，到实践的飞跃是实践认识再实践，再认识循环往复以至无穷的辩证发展过程。</p>

<h4 id="25真理的一元性p81">25.真理的一元性（P81）</h4>
<p>  真理的一元性是指在同一条件下，对于特定的认识客体的真理性认识<strong>只有一个</strong>，而不可能有多个</p>

<h4 id="26真理的绝对性和相对性的含义p81-82">26.真理的绝对性和相对性的含义（P81-82）</h4>
<p>  真理的绝对性真理的绝对性是指真理主客观统一的确定性和发展的无限性；<br />
  真理的相对性真理的相对性是指人们在一定条件下对客观事物及其本质和发展规律的正确认识总是有限度的，不完善的；</p>

<h4 id="27真理与谬误的辩证关系p85">27.真理与谬误的辩证关系（P85）</h4>
<blockquote>
  <p>本知识点考查简答题</p>
</blockquote>

<p>  第一，真理与谬误相互对立；<br />
  第二，真理与谬误的对立又是相对的，它们在一定条件下能够相互转化。</p>

<h4 id="28实践是检验真理的唯一标准p87">28.实践是检验真理的唯一标准（P87）</h4>
<p>  实践之所以能够作为检验真理的唯一标准，是由<strong>真理的本性和实践的特点</strong>决定的。</p>

<h4 id="29价值的基本特性p91-92">29.价值的基本特性（P91-92）</h4>
<p>  第一，价值的主体性，价值的主体性是指价值直接与主体相联系，始终以主体为中心；<br />
  第二，价值的客观性，价值的客观性是指在一定条件下客体对于主体的意义不依赖于主体的主观意识而存在；<br />
  第三，价值的多维性，价值的多维性是指每个主体的价值，关系具有多样性，同一客体相对于主体的不同需要与会产生不同的价值；<br />
  第四，价值的社会历史性，主体和客体的不断变化决定了价值的社会历史性</p>

<h4 id="30价值评价的特点p92-94">30.价值评价的特点（P92-94）</h4>
<blockquote>
  <p>本知识点考查简答题</p>
</blockquote>

<p>  第一，评价与主客体的价值关系为认识对象；<br />
  第二，评价结果与评价主体直接相关；<br />
  第三，评价结果的正确与否依赖于客体状态和主体需要的认识；<br />
  第四，价值评价有科学与非科学之别。</p>

<h4 id="31真理与价值在实践中的辩证统一p95-96">31.真理与价值在实践中的辩证统一（P95-96）</h4>
<p>  人们的实践活动总是受着真理尺度和价值尺度的制约。<br />
  任何实践活动都是在这两种尺度共同制约下进行的，任何成功的实践都是真理尺度和价值尺度的统一，是合规律性和合目的性的统一。<br />
  一方面价值尺度必须以真理为前提。<br />
  另一方面人类自身需要的内在尺度推动着人们不断发现新的真理。</p>

<h4 id="32理论创新和实践创新的良性互动p106-107">32.理论创新和实践创新的良性互动（P106-107）</h4>
<p>  实践创新为理论创新提供不竭的动力源泉；<br />
  理论创新为实践创新提供科学的行动指南；<br />
  努力实现理论创新与实践创新的良性互动。</p>

<hr />

<h3 id="第三章">第三章</h3>
<h4 id="33自然地理环境在人类社会生存和发展中的重要作用p112">33.自然地理环境在人类社会生存和发展中的重要作用（P112）</h4>
<p>  自然地理环境是指人类社会所处的地理位置相联系的自然条件的总和，是人类社会生存和发展永恒的必要的条件，是人们生活和生产的自然基础。</p>

<h4 id="34物质生产方式p113">34.物质生产方式（P113）</h4>
<p>  物质的生产方式是社会存在和发展的基础及决定力量。</p>

<h4 id="35社会存在和社会意识的辩证关系p116">35.社会存在和社会意识的辩证关系（P116）</h4>
<blockquote>
  <p>本知识点考查简答题（有待补充）</p>
</blockquote>

<p>  社会存在和社会意识是辩证统一的，社会存在决定社会意识，社会意识是社会存在的反映，并反作用于社会存在</p>

<h4 id="36社会意识对社会存在具有能动的反作用p117">36.社会意识对社会存在具有能动的反作用（P117）</h4>
<p>  社会意识对社会存在具有能动的反作用，这是社会意识相对独立性的突出表现。</p>

<h4 id="37生产力p121">37.生产力（P121）</h4>
<p>  <strong>劳动者</strong>是生产力中最活跃的因素</p>

<h4 id="38经济基础与上层建筑的辩证关系p127">38.经济基础与上层建筑的辩证关系（P127）</h4>
<p>  经济基础与上层建筑是辩证统一的，经济基础决定上层建筑，上层建筑反作用于经济基础，二者相互影响相互作用。</p>

<h4 id="39社会形态更替的一般规律及特殊形式p133-136">39.社会形态更替的一般规律及特殊形式（P133-136）</h4>
<p>  社会形态的内涵；<br />
  社会形态更替的统一性和多样性<br />
  社会形态更替的必然性与人们的历史选择性；<br />
  社会形态更替的前进性和曲折性。</p>

<h4 id="40社会革命在社会发展中的重要作用p148">40.社会革命在社会发展中的重要作用（P148）</h4>
<p>  革命对社会发展起巨大作用，“革命是历史的火车头”，是社会进步和政治进步的强大推动力。社会革命是实现社会形态根体的重要手段和决定性环节。</p>

<h4 id="41改革在社会历史发展中的重要作用p149">41.改革在社会历史发展中的重要作用（P149）</h4>
<p>  在一定社会形态总的量变过程中，当社会基本矛盾发展到一定程度带有尚未激化到引起社会革命的程度时，就需要依靠改革的途径或手段来改变与生产力不相适应的生产关系和与经济基础不相适应的上层建筑。</p>

<h4 id="42科学技术在社会发展中的作用p151-153">42.科学技术在社会发展中的作用（P151-153）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  积极作用：每一次科技革命都不同程度地引起了生产方式，生活方式和思维方式的深刻变化和社会的巨大进步。首先对生产方式产生了深刻影响，其次对于生活方式产生了巨大影响，最后促进了思维方式的变革。</p>

<p>  消极作用：例如工业的发展带来水和空气的污染，大规模的开垦和过度放牧，造成森林和草原的生态破坏。生命科学的发展提出了涉及人自身尊严，健康，遗传以及生态安全和环境保护等方面的伦理问题，基因工程可能导致基因歧视转基因食品的安全性和基因治疗克隆技术的适用范围等问题引起了人们高度关注。互联网可以迅速广泛的传播大量有用的信息，但也存在大量垃圾信息和虚假信息，并可能侵害国家安全，企业经营秘密以及个人隐私。</p>

<p>  方法论要求：正确认识和运用科学技术：一，充分发挥其积极作用，努力创造条件，将消极作用转化为积极作用。二首要的就是有合理的社会制度，保障科学技术的正确运用，始终坚持使科学技术为人类社会的健康发展服务，让科学技术为人类造福</p>

<h4 id="43两种历史观在历史创造者问题上的对立p153">43.两种历史观在历史创造者问题上的对立（P153）</h4>
<p>  唯物史观与唯心史观的对立，在历史创造者问题上表现为<strong>群众史观</strong>与<strong>英雄史观</strong>的对立。</p>

<h4 id="44人民群众在创造历史过程中的决定作用p157">44.人民群众在创造历史过程中的决定作用（P157）</h4>
<p>  人民群众是社会物质财富的创造者，人民群众是社会精神财富的创造者，人民群众是社会改革的决定力量。</p>

<h4 id="45群众路线p159">45.群众路线（P159）</h4>
<p>  一切为了群众，一切依靠群众，从群众中来到群众中去。</p>

<hr />

<h3 id="第四章">第四章</h3>
<h4 id="46商品及其二因素p169-170">46.商品及其二因素（P169-170）</h4>
<p>  商品是用来交换能满足人的某种需要的劳动产品，具有使用价值和价值两因素或两种属性。<br />
  价值是商品所持有的社会属性。</p>

<h4 id="47商品价值量的决定p171">47.商品价值量的决定（P171）</h4>
<p>  决定商品价值量的不是生产商品的个别劳动时间，而是<strong>社会必要劳动时间</strong>。</p>

<h4 id="48价值规律的表现形式p174">48.价值规律的表现形式（P174）</h4>
<p>  商品经济中价值规律的表现形式是商品的价格围绕商品的价值自发的波动。</p>

<h4 id="49资本原始积累的两个途径p186">49.资本原始积累的两个途径（P186）</h4>
<p>  一是用暴力手段剥夺农民的土地，二是用暴力手段掠夺货币财富。</p>

<h4 id="50资本主义生产过程的两重性p192">50.资本主义生产过程的两重性（P192）</h4>
<p>  资本主义生产过程具有二重性：<br />
  一方面生产物质资料的劳动过程；<br />
  另一方面是生产剩余价值的过程及价值增值过程。</p>

<h4 id="51剩余价值的含义p193">51.剩余价值的含义（P193）</h4>
<p>  剩余价值是雇佣工人所创造的，并被资本家无偿占有的，超过劳动力价值的那部分价值，他是雇佣工人劳动价值的凝结。</p>

<h4 id="52资本主义的基本矛盾p206">52.资本主义的基本矛盾（P206）</h4>
<p>  生产社会化和生产资料资本主义私人占有之间的矛盾，是资本主义的基本矛盾。</p>

<hr />

<h3 id="第五章">第五章</h3>
<h4 id="53资本主义发展的客观规律p220">53.资本主义发展的客观规律（P220）</h4>
<p>  自由竞争引起生产集中和资本集中生产集中和资本集中发展到一定阶段必然引起垄断，这是资本主义发展的客观规律。</p>

<h4 id="54金融寡头对国家机器的控制p223">54.金融寡头对国家机器的控制（P223）</h4>
<p>  金融寡头对国家机器的控制主要是通过<strong>同政府的“个人联合”</strong>来实现的。</p>

<h4 id="55垄断价格p224">55.垄断价格（P224）</h4>
<p>  垄断价格，包括<strong>垄断高价</strong>和<strong>垄断低价</strong>两种形式。</p>

<h4 id="56国家垄断资本主义的含义p225">56.国家垄断资本主义的含义（P225）</h4>
<p>  国家垄断资本主义是国家政权和私人垄断资本联合在一起的垄断资本主义。</p>

<h4 id="57金融垄断资本得以形成和壮大的重要制度条件p229">57.金融垄断资本得以形成和壮大的重要制度条件（P229）</h4>
<p>  <strong>金融自由化</strong>与<strong>金融创新</strong>是金融垄断资本得以形成和壮大的重要制度条件。</p>

<h4 id="58经济全球化的表现p235">58.经济全球化的表现（P235）</h4>
<p>  生产全球化，贸易全球化，金融全球化。</p>

<h4 id="59第二次世界大战后居主导地位的资本所有制形式p240">59.第二次世界大战后，居主导地位的资本所有制形式（P240）</h4>
<p>  法人资本所有制崛起并成为居主导地位的资本所有制形式。</p>

<h4 id="60第二次世界大战后资本主义发生变化的根本推动力量p244">60.第二次世界大战后资本主义发生变化的根本推动力量（P244）</h4>
<p>  <strong>科学技术革命</strong>和<strong>生产力的发展</strong>，是资本主义发生变化的根本推动力量</p>

<hr />

<h3 id="第六章">第六章</h3>
<h4 id="61空想社会主义发展到高级阶段的三个代表人物p259">61.空想社会主义发展到高级阶段的三个代表人物（P259）</h4>
<p>  法国的圣西门、傅立叶和英国的欧文。</p>

<h4 id="62社会主义从理想到现实的伟大飞跃p265">62.社会主义从理想到现实的伟大飞跃（P265）</h4>
<p>  十月革命实现了社会主义从理想到现实的伟大飞跃。</p>

<h4 id="63无产阶级是最先进最革命的阶级p274">63.无产阶级是最先进最革命的阶级（P274）</h4>
<p>  无产阶级是最先进最革命的阶级，肩负着推翻资本主义旧世界、建立社会主义和共产主义新世界的历史使命。</p>

<h4 id="64探索适合本国国情的发展道路p290-291">64.探索适合本国国情的发展道路（P290-291）</h4>
<p>  第一，探索社会主义发展道路，必须坚持对待马克思主义的科学态度。<br />
  第二，探索社会主义发展道路，必须坚持从当时当地的社会历史条件出发，坚持“走自己的路”。<br />
  第三，探索社会主义发展道路，必须充分吸收人类的一切文明成果。<br />
  发展社会主义不能照搬苏联社会主义的模式，照搬别国模式，从来不能成功，这是一个被历史反复证明了的颠扑不破的真理。</p>

<hr />

<h3 id="第七章">第七章</h3>
<h4 id="65预见未来社会的方法论原则p300-303多选">65.预见未来社会的方法论原则（P300-303）（多选）</h4>
<p>  在揭示人类社会发展一般规律的基础上指明社会发展的方向。<br />
  在剖析资本主义旧世界的过程中阐发未来新世界的特点。<br />
  在社会主义社会发展中不断深化对未来共产主义社会的认识。<br />
  立足于揭示未来社会的一般规律，而不对各种细节做具体描绘。</p>

<h4 id="66共产主义社会个人消费品的分配方式p306">66.共产主义社会个人消费品的分配方式（P306）</h4>
<p>  在共产主义社会，个人消费品的分配方式是“<strong>各尽所能，按需分配</strong>”。</p>

<h4 id="67马克思主义追求的根本价值目标p309">67.马克思主义追求的根本价值目标（P309）</h4>
<p>  <strong>实现人的自由而全面的发展</strong>是马克思主义追求的根本，价值目标也是共产主义社会的根本特征。</p>

<h4 id="68实现共产主义是历史发展的必然p312-313">68.实现共产主义是历史发展的必然（P312-313）</h4>
<p>  共产主义理想作为一种社会理想，是对人类社会发展规律认识的基础上，设想的社会目标。<br />
  遗产主义理想是一定会实现的，是以前的社会发展规律以及资本主义社会的基本矛盾发展为依据的。<br />
  社会主义运动的实践，特别是社会主义国家的兴起和不断发展已经并正在用事实证明共产主义理想实现的必然性。</p>]]></content><author><name>Ranok</name></author><category term="马克思主义基本原理" /><category term="期末考试" /><summary type="html"><![CDATA[马克思主义基本原理是指马克思主义政治经济学、辩证唯物主义和历史唯物主义以及科学社会主义。它是马克思主义科学体系的基本理论、基本范畴，是其立场、观点和方法的理论表达。]]></summary></entry><entry><title type="html">机器学习</title><link href="http://localhost:4000/machinelearning" rel="alternate" type="text/html" title="机器学习" /><published>2022-12-09T00:00:00+08:00</published><updated>2022-12-09T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-machineLearning</id><content type="html" xml:base="http://localhost:4000/machinelearning"><![CDATA[<p>今天的人工智能主要依赖的不再是符号知识表示和程序推理机制，现代 AI 而是建立在新的基础上，即机器学习。无论是传统的基于数学的机器学习模型或决策树，还是深度学习的神经网络架构，当今人工智能领域的大多数 AI 应用程序都是基于机器学习技术。</p>

<hr />

<h2 id="前言">前言</h2>
<p>机器学习是智能专业的专核心课，其科目本身的难度较高，不论是在于理论层面还是代码实现层面都有一定的难度。想要征服机器学习还是一件非常具有挑战性的事情。</p>

<p>本次博客整理了有关机器学习课程的期末考试重点，希望同学们可以获得一个好成绩。</p>

<hr />

<h2 id="问题一有关拟合的问题">问题一：有关拟合的问题</h2>
<h4 id="什么是过拟合和欠拟合">什么是过拟合和欠拟合？</h4>

<p>过拟合是指模型在训练集上表现很好，到了验证和测试阶段就很差，即模型的泛化能力很差。
欠拟合是指模型在训练集上表现的不好，以至于在验证和测试阶段表现的也比较差。</p>

<h4 id="如何解决过拟合与欠拟合">如何解决过拟合与欠拟合？</h4>
<h5 id="过拟合的解决方法">过拟合的解决方法：</h5>
<ol>
  <li>重新调整一下参数和超参数。</li>
  <li>对数据进行特征降维处理，有选择性的抛弃一些特征。</li>
  <li>降低模型的复杂度。</li>
  <li>使用正则化约束。</li>
</ol>

<h5 id="欠拟合的解决方法">欠拟合的解决方法：</h5>
<ol>
  <li>增加模型的复杂度，例如使用神经网络代替线性回归、用随机森林代替决策树。</li>
  <li>考虑选用更多更具有代表意义的特征的数据特征。</li>
  <li>重新调整一下参数和超参数。</li>
  <li>降低正则化约束。</li>
</ol>

<h4 id="决策树如何防止过拟合">决策树如何防止过拟合</h4>
<p>剪枝。</p>

<hr />
<h2 id="问题二回归模型与分类模型的区别是什么请举例说明">问题二：回归模型与分类模型的区别是什么？请举例说明。</h2>

<p>回归模型：是对连续变量，进行预测的模型，即回归问题是定量问题。<br />
回归模型问题的举例：对某城市房价预测、对某地区空气湿度的预测。</p>

<p>分类模型：是对离散变量、进行预测的模型，即分类问题是定类问题。<br />
分类模型问题的举例：对明天是否下雨的预测、判断病人是否患有某种疾病的预测。</p>

<hr />
<h2 id="问题三机器学习的四大问题是什么">问题三：机器学习的四大问题是什么？</h2>
<p>回归、分类、聚类、降维。</p>

<hr />
<h2 id="问题四机器学习的一般步骤需要以某一实物为例">问题四：机器学习的一般步骤。（需要以某一实物为例）</h2>
<h4 id="回归问题以披萨价格预测为例">回归问题以披萨价格预测为例。</h4>
<h5 id="明确任务收集数据">明确任务收集数据。</h5>
<p>在一定范围内的各个城市中随机选取若干家披萨店，作为初始数据。</p>
<h5 id="数据分析与预处理">数据分析与预处理。</h5>
<p>将数据特征初步定为以下几项：</p>

<p>比萨的尺寸、披萨的脂肪含量、披萨的制作成本、披萨的口味、披萨的品牌、披萨所在城市的GDP水平、生产披萨的披萨店的知名度。</p>

<p>分析这些特征是否出现缺失值，对缺失值较多的特征直接删除。对缺失值较少的使用平均值填补定量的特征（例如披萨的脂肪含量），使用众数填补定类的特征（例如披萨的口味）。</p>

<p>将定类数据数值化，方便后期计算。</p>

<p>使用灰色关联分析法有选择性地剔除关联度较小的几个特征，即进行降维与特征选择处理。</p>

<h5 id="模型训练">模型训练</h5>

<p>选择使用线性回归解决该回归问题。</p>

<h5 id="模型评估与参数调优">模型评估与参数调优</h5>

<p>R2评估，模型的优劣，当R2的值越接近1时模型性能越好。
使用k折交叉验证方法选取出最佳的学习率等参数并再次进行模型训练。</p>

<h5 id="模型应用">模型应用</h5>

<p>将训练模型保存下来，并公布用以推广。</p>

<h4 id="分类问题以肿瘤预测为例">分类问题以肿瘤预测为例。</h4>
<h5 id="明确任务收集数据-1">明确任务收集数据。</h5>
<p>随机选取若干家医院的肿瘤病人数据作为初始数据</p>

<h5 id="数据分析与预处理-1">数据分析与预处理。</h5>

<p>将数据特征初步定为以下几项：
肿瘤的直径、体积、颜色、数量、肿瘤是否为良性、病人体温、病人是否出现炎症等信息。</p>

<p>将肿瘤是否为良性作为目标列作为输出项并做数值化处理。</p>

<p>分析这些特征是否出现缺失值，对缺失值较多的特征直接删除。对缺失值较少的使用平均值填补定量的特征（例如肿瘤的直径），使用众数填补定类的特征（例如病人是否出现炎症）。</p>

<p>使用灰色关联分析法有选择性地剔除关联度较小的几个特征，即进行降维与特征选择处理。</p>

<h5 id="模型训练-1">模型训练</h5>

<p>选择使用逻辑回归解决该分类问题。</p>

<h5 id="模型评估与参数调优-1">模型评估与参数调优</h5>

<p>使用AUC值评估模型的优劣，当R2的值越接近1时模型性能越好。
使用k折交叉验证方法选取出最佳的激活函数的阈值等参数并再次进行模型训练。</p>

<h5 id="模型应用-1">模型应用</h5>

<p>将训练模型保存下来，并公布用以推广。</p>

<hr />

<h2 id="问题五k折交叉验证的简述">问题五：k折交叉验证的简述。</h2>

<p>k折交叉验证常用于参数调优，使得更容易训练出较高性能的模型。</p>

<p>k折交叉验证的工作流程：<br /></p>
<ol>
  <li>将训练集随机地进行k块、并选出其中1块作为验证集。</li>
  <li>用其余k-1块的数据进行训练，并用验证集，计算出这一次的误差。</li>
  <li>重复k次以上步骤，每次选取不同的块作为验证集</li>
  <li>统计每一次计算得到的误差估计，并取平均值作为本次训练参数的最终指标。</li>
</ol>

<hr />

<h2 id="问题六模型的评估标准">问题六：模型的评估标准</h2>
<h4 id="回归问题的评估标准">回归问题的评估标准</h4>
<ol>
  <li>MSE（均方误差） 预测残差的平方和，数值越小越好。</li>
  <li>RMSE（平均绝对误差）是在MSE的基础上开根号计算得到，同样数值越小越好。</li>
  <li>MAE（平均绝对误差）预测残差的绝对值之和，值越小越好。</li>
  <li>R2 (R方分数)既考虑预测值与真值之间的差异又考虑问题本身与真值之间的差异。结果的约接近于1越好。
    <h4 id="分类问题的评估标准">分类问题的评估标准</h4>
  </li>
  <li>正确率（Accuracy）即被预测正确的样本在所有预测样本中的占比。</li>
  <li>召回率(TRR) 即在所有真的正类中被模型预测出来的比例。</li>
  <li>AUC值：AUC的概率意义是随机取一对正负样本，正样本得分大于负样本得分的概
 AUC的范围在[0, 1]之间，并且越接近1越好，越接近0.5属于乱猜</li>
</ol>

<hr />

<h2 id="问题七决策树的建立以ppt为例">问题七：决策树的建立（以ppt为例）</h2>
<h4 id="考察公式">考察公式：</h4>

<p>信息熵公式：\(H(X)=\sum_{i=1}^{n}p_i log_2^{\frac{1}{p_i}}=-\sum_{i=1}^{n}p_i log_2{p_i}\)<br />
信息增益公式：\(Gain(D,a)=Ent(D)-Ent(d|a)=Ent(D)-\sum_{v=1}^V \frac{D_v}{D}Ent(D_v)\)</p>

<h4 id="问题描述">问题描述</h4>

<p>如下图，第一列为论坛号码，第二列为性别，第三列为活跃度，最后一列用户是否流失。</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/1.png" alt="1.png" />
    </div>
    
</div>

<p>根据该图整理得到如下表格：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/2.png" alt="2.png" />
    </div>
    
</div>

<h4 id="整体熵为多少">整体熵为多少</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/3.png" alt="3.png" />
    </div>
    
</div>

<h5 id="计算按照性别划分的信息增益">计算按照性别划分的信息增益</h5>

<p>要计算性别的信息增益需要先计算性别的信息熵</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/4.png" alt="4.png" />
    </div>
    
</div>

<p>因此得到按照性别划分的信息增益为</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/5.png" alt="5.png" />
    </div>
    
</div>

<h4 id="计算按照活跃度划分的信息增益">计算按照活跃度划分的信息增益</h4>

<p>同样的，要计算活跃度的信息增益需要先计算活跃度的信息熵</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/6.png" alt="6.png" />
    </div>
    
</div>

<p>因此得到按照活跃度划分的信息增益为：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/14.png" alt="14.png" />
    </div>
    
</div>

<h4 id="比较两种特征对流失度的影响">比较两种特征对流失度的影响</h4>

<p>活跃度的信息增益比性别的信息增益大，也就是说，活跃度对用户流失的影响比性别大。</p>

<h4 id="做出决策树图形并说明理由">做出决策树图形并说明理由</h4>

<p>根据第三问的分析，活跃度的信息增益比性别的信息增益大所以要选用，活跃度作为决策树的根节点。最终结果如下所示：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/7.png" alt="7.png" />
    </div>
    
</div>

<hr />

<h2 id="问题八逻辑回归的优化目标函数是什么交叉熵中的两个概率是分布什么不确定">问题八：逻辑回归的优化目标函数是什么？交叉熵中的两个概率是分布什么？(不确定)</h2>

<p>逻辑回归的优化目标函数是:对数似然函数。 <br />
交叉熵的灵感概率是：真实分布，非真实分布。</p>

<h2 id="问题九简述k近邻的算法流程以及问题问题分析">问题九：简述k近邻的算法流程，以及问题问题分析</h2>
<h3 id="算法流程">算法流程</h3>
<ol>
  <li><strong>计算距离</strong>：计算已知类别数据集中的点与当前点之间的距离
2）<strong>排序</strong>：按距离递增次序排序
3）<strong>选择</strong>：选取与当前点距离最小的k个点
4）<strong>计算频次</strong>：统计前k个点所在的类别出现的频率
5）<strong>确定类别</strong>：返回前k个点出现频率最高的类别作为当前点的预测分类</li>
</ol>

<h3 id="计算题以ppt为例">计算题（以ppt为例）</h3>
<h4 id="考察公式-1">考察公式</h4>
<p>欧氏距离：平方和开根号 <br />
曼哈顿距离（城市街区距离）：绝对值的和</p>

<h3 id="提问">提问</h3>
<p>假设我们现在有几部电影，如何去预测序号9电影的类别？</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/8.png" alt="8.png" />
    </div>
    
</div>

<p>分别计算每个电影和被预测电影的距离，然后求解</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/9.png" alt="9.png" />
    </div>
    
</div>

<p>所以最终结果预测为喜剧片。</p>

<hr />

<h2 id="问题十标准化与归一化问题以ppt为例">问题十：标准化与归一化问题（以PPT为例）</h2>
<h4 id="归一化重点">归一化（重点）</h4>

<p><strong>归一化定义</strong>：通过对原始数据进行变换把数据映射到(默认为[0,1])之间</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/10.png" alt="10.png" />
    </div>
    
</div>

<p>作用于每一列，max为一列的最大值，min为一列的最小值，那么X’’为最终结果，mx，mi分别为指定区间值，默认mx为1，mi为0</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/11.png" alt="11.png" />
    </div>
    
</div>

<h4 id="标准化">标准化</h4>

<p>定义：通过对原始数据进行变换把数据变换到均值为0,标准差为1范围内</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/12.png" alt="12.png" />
    </div>
    
</div>

<p>其中，它作用于每一列，mean为平均值，σ为标准差</p>

<hr />

<h2 id="问题十一k均值k-means聚类的算法">问题十一：k均值（k-means）聚类的算法</h2>
<h4 id="流程">流程</h4>
<ol>
  <li>随机设置K个特征空间内的点作为初始的聚类中心</li>
  <li>对于其他每个点计算到K个中心的距离，未知的点选择最近的一个聚类中心点作为标记类别</li>
  <li>接着对着标记的聚类中心之后，重新计算出每个聚类的新中心点（平均值）</li>
  <li>如果计算得出的新中心点与原中心点一样（质心不再移动），那么结束，否则重新进行第二步过程</li>
</ol>

<hr />

<h2 id="问题十二梯度下降法">问题十二：梯度下降法</h2>
<h4 id="梯度下降算法的作用">梯度下降算法的作用：</h4>

<p>梯度下降法是一个优化算法，可以递归地找到模型的最小值，从而找到在最优参数。</p>

<h4 id="需要处理的问题">需要处理的问题：</h4>

<ol>
  <li>学习率：需要在模型建立的速度和质量上做出权衡，学习率过大可能会导致最终结果不收敛，学习率过小会导致训练时间过长。</li>
  <li>方向：计算出当前点的梯度方向，并向下不断更新自己的位置。</li>
  <li>终止条件：考虑使用迭代次数、损失函数值到达一定范围之后终止。</li>
</ol>

<hr />

<h2 id="问题十三逻辑回归不确定">问题十三：逻辑回归（不确定）</h2>
<h4 id="损失函数">损失函数：</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/13.png" alt="13.png" />
    </div>
    
</div>

<h4 id="目标函数">目标函数</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/14.png" alt="14.png" />
    </div>
    
</div>

<h4 id="定义">定义：</h4>
<p>逻辑回归是机器学习中的一种分类模型，做二分类（1/0）任务，并给出相应概率。</p>
<h4 id="sigmoid函数">sigmoid函数</h4>
<p>sigmoid可以将数值压缩到[0,1]的范围内。</p>

<hr />

<h2 id="问题十四编程大题">问题十四：编程大题</h2>
<h4 id="线性回归以实验为例">线性回归（以实验为例）</h4>

<table>
  <thead>
    <tr>
      <th>序号</th>
      <th>直径（英寸）</th>
      <th>价格（ 美元）</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <td>2</td>
      <td>8</td>
      <td>9</td>
    </tr>
    <tr>
      <td>3</td>
      <td>10</td>
      <td>13</td>
    </tr>
    <tr>
      <td>4</td>
      <td>14</td>
      <td>17.5</td>
    </tr>
    <tr>
      <td>5</td>
      <td>18</td>
      <td>18</td>
    </tr>
  </tbody>
</table>

<h5 id="该线性回归是一个几元函数表达式是什么">该线性回归是一个几元函数，表达式是什么？</h5>
<p>是一个一元线性回归函数。<br />
表达式为：\(f(x) = w_1x_1 + b\)<br />
其中\(w_1\)表示的是“直径”特征的权重，\(x_1\)表示“直径”变量，\(b\)表示截距</p>

<h5 id="代码实现">代码实现</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LinearRegression</span>   <span class="c1"># 最小二乘法线性回归
</span><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">X_train_old</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">18</span><span class="p">]).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Y_train_old</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mf">17.5</span><span class="p">,</span><span class="mi">18</span><span class="p">]).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_train_old</span><span class="p">,</span><span class="n">Y_train_old</span>

<span class="c1"># 因为数据较少所以没必要再单独划出测试集了
</span><span class="n">X_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X_train_old</span><span class="p">,</span><span class="n">Y_train_old</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">33</span><span class="p">,</span><span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
<span class="c1"># X_train,X_test,Y_train,Y_test = X_train_old,[],Y_train_old,[]
</span><span class="n">X_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_test</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">LinearRegression</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">Y_train</span><span class="p">)</span>

<span class="n">T_sim1</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

</code></pre></div></div>
<h5 id="逻辑回归以实验为例">逻辑回归（以实验为例）</h5>
<p>代码实现：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>

<span class="c1"># 1.获取数据
</span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Sample code number'</span><span class="p">,</span> <span class="s">'Clump Thickness'</span><span class="p">,</span> <span class="s">'Uniformity of Cell Size'</span><span class="p">,</span> <span class="s">'Uniformity of Cell Shape'</span><span class="p">,</span>
                   <span class="s">'Marginal Adhesion'</span><span class="p">,</span> <span class="s">'Single Epithelial Cell Size'</span><span class="p">,</span> <span class="s">'Bare Nuclei'</span><span class="p">,</span> <span class="s">'Bland Chromatin'</span><span class="p">,</span>
                   <span class="s">'Normal Nucleoli'</span><span class="p">,</span> <span class="s">'Mitoses'</span><span class="p">,</span> <span class="s">'Class'</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="sa">r</span><span class="s">"breast-cancer-wisconsin.data"</span><span class="p">,</span><span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">22</span><span class="p">)</span>
<span class="n">x_train</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="n">estimator</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">()</span>
<span class="n">estimator</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="n">y_predict</span> <span class="o">=</span> <span class="n">estimator</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
</code></pre></div></div>
<h2 id="问题十五随机森林">问题十五：随机森林</h2>
<h4 id="随机森林的算法流程随机森林bagging决策树">随机森林的算法流程（随机森林=Bagging+决策树）</h4>

<ol>
  <li>随机选取m条数据</li>
  <li>随机选取k个特征</li>
  <li>训练决策树</li>
  <li>重复1-3</li>
  <li>对上面的若决策树进行平权投票</li>
</ol>

<h4 id="bagging和boosting的区别">bagging和boosting的区别</h4>

<h5 id="区别一数据方面">区别一:数据方面</h5>
<ol>
  <li>Bagging：对数据进行采样训练；</li>
  <li>Boosting：根据前一轮学习结果调整数据的重要性。</li>
</ol>

<h5 id="区别二投票方面">区别二:投票方面</h5>
<ol>
  <li>Bagging：所有学习器平权投票；</li>
  <li>Boosting：对学习器进行加权投票。</li>
</ol>

<h5 id="区别三学习顺序">区别三:学习顺序</h5>
<ol>
  <li>Bagging的学习是并行的，每个学习器没有依赖关系；</li>
  <li>Boosting学习是串行，学习有先后顺序。</li>
</ol>

<h5 id="区别四主要作用">区别四:主要作用</h5>
<ol>
  <li>Bagging主要用于提高泛化性能（解决过拟合，也可以说降低方差）</li>
  <li>Boosting主要用于提高训练精度 （解决欠拟合，也可以说降低偏差）</li>
</ol>]]></content><author><name>Ranok</name></author><category term="机器学习" /><category term="期末考试" /><category term="python" /><summary type="html"><![CDATA[今天的人工智能主要依赖的不再是符号知识表示和程序推理机制，现代 AI 而是建立在新的基础上，即机器学习。无论是传统的基于数学的机器学习模型或决策树，还是深度学习的神经网络架构，当今人工智能领域的大多数 AI 应用程序都是基于机器学习技术。]]></summary></entry><entry><title type="html">机器学习三大基础库</title><link href="http://localhost:4000/machine" rel="alternate" type="text/html" title="机器学习三大基础库" /><published>2022-12-06T00:00:00+08:00</published><updated>2022-12-06T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-machine</id><content type="html" xml:base="http://localhost:4000/machine"><![CDATA[<p>机器学习是研究怎样使用计算机模拟或实现人类学习活动的科学，是人工智能中最具智能特征，最前沿的研究领域之一。自20世纪80年代以来，机器学习作为实现人工智能的途径，在人工智能界引起了广泛的兴趣，特别是近十几年来，机器学习领域的研究工作发展很快，它已成为人工智能的重要课题之一。机器学习不仅在基于知识的系统中得到应用，而且在自然语言理解、非单调推理、机器视觉、模式识别等许多领域也得到了广泛应用。一个系统是否具有学习能力已成为是否具有“智能”的一个标志。</p>

<hr />

<h2 id="前言">前言</h2>

<p>本次博客主要内容为以下三个python库</p>
<ul>
  <li>numpy</li>
  <li>pandas</li>
  <li>matplotlib</li>
</ul>

<p>前两个库<code class="language-plaintext highlighter-rouge">numpy</code>、<code class="language-plaintext highlighter-rouge">pandas</code>主要作用是对于数据存储与数据处理，并且广泛适用于很多机器学习的模型。而<code class="language-plaintext highlighter-rouge">matplotlib</code>是作图的好帮手，主要用户机器模型数据的可视化。</p>

<h2 id="numpy机器学习前缀知识">numpy（机器学习前缀知识）</h2>
<h4 id="属性">属性</h4>
<ol>
  <li>数组的维数：对象名.ndim</li>
  <li>数组的每个维度的数量：对象名.shape返回一个元组，元组中的数字表示该维度的长度。</li>
  <li>元素总个数：对象名.size</li>
  <li>成员的数据类型：对象名.dtype</li>
  <li>矩阵的转置：对象名.T</li>
  <li>对象名.flat 表示返回一个可以遍历所有元素的迭代器</li>
  <li>numpy.nan 表示无穷</li>
  <li>xxx</li>
</ol>

<h4 id="功能型小函数">功能型小函数</h4>

<ol>
  <li>numpy.sum 求和</li>
  <li>numpy.min 求最小值</li>
  <li>numpy.max 求最大值</li>
  <li>numpy.average 求平均值</li>
  <li>numpy.median 求中位数</li>
  <li>numpy.cumsum 返回前缀和向量</li>
  <li>numpy.diff 返回一个差分数组（少一位）</li>
  <li>numpy.argmin 求最小值的索引（从0开始计算）</li>
  <li>numpy.argmax 求最大值的索引（从0开始计算）</li>
  <li>numpy.nonzero返回n个向量，表示非元素所在位置的索引。</li>
  <li>numpy.sort 返回对数组排序的结果，如果是多维则只会对一维排序（每一行）。</li>
  <li>numpy.transpose 返回矩阵转置的结果</li>
  <li>对象名.flatten() 返回该对象的一维展开（即变成一个行向量）</li>
  <li>对象名.copy() 返回该对象的值拷贝（直接使用“=”是引用拷贝）注意不同于列表使用对象名[:]不能实现值拷贝，必须使用copy函数</li>
  <li>numpy.random.randn 按正太分布的概率产生随机数数组</li>
  <li>numpy.all(逻辑表达式) 逻辑表达式后半段 通过用这种方式将矩阵中所有数据参与计算返回一个bool判断矩阵中是不是所有元素都满足这个式子。</li>
  <li>numpy.any(数组对象)逻辑表达式后半段 通过用这种方式将矩阵中所有数据参与计算返回一个bool判断矩阵中是否存在某个元素满足这个式子。</li>
</ol>

<h4 id="示例以numpysum为例">示例（以numpy.sum为例）</h4>
<p>函数的默认计算区域是所有元素，当想要指定维度使用时需要使用axis来指定，axis从<br />
0开始计数。特别的对于一个矩阵来说，axis=0表示对每一列求和，axis=1表示对每一行求和。</p>
<h5 id="代码示例">代码示例：</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>
<h5 id="程序运行截图">程序运行截图：</h5>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]]</span><span class="w">
</span><span class="mi">6</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">5</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h4 id="矩阵索引">矩阵索引</h4>
<p>以二维数组（矩阵）为例</p>

<h5 id="访问单元素的方法">访问单元素的方法</h5>
<p><code class="language-plaintext highlighter-rouge">a[i][j]</code>，或 <code class="language-plaintext highlighter-rouge">a[i,j]</code></p>

<h5 id="访问多元素的方法">访问多元素的方法</h5>
<p>访问第<code class="language-plaintext highlighter-rouge">i+1</code>行的所有元素<br />
<code class="language-plaintext highlighter-rouge">a[i,:]</code><br />
访问第<code class="language-plaintext highlighter-rouge">j+1</code>列的所有元素<br />
<code class="language-plaintext highlighter-rouge">a[:,j]</code></p>

<h4 id="矩阵初始化-array">矩阵初始化 array</h4>
<p>函数签名：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span><span class="p">(</span><span class="n">p_object</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>
<p>上面的构造器接受以下参数：</p>
<ol>
  <li>object 任何暴露数组接口方法的对象都会返回一个数组或任何（嵌套）序列。</li>
  <li>dtype 数组的所需数据类型，可选。</li>
  <li>copy 可选，默认为true，对象是否被复制。</li>
  <li>order C（按行）、F（按列）或A（任意，默认）。</li>
  <li>subok 默认情况下，返回的数组被强制为基类数组。 如果为true，则返回子类。</li>
  <li>ndmin 指定返回数组的最小维数。</li>
</ol>

<p>示例：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]].</span><span class="n">numpy</span><span class="p">.</span><span class="n">int64</span><span class="p">)</span>
</code></pre></div></div>
<h4 id="滤波器clip">滤波器clip</h4>

<h5 id="函数签名">函数签名：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">clip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a_min</span><span class="p">,</span> <span class="n">a_max</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>
<p>将数组中小于a_min的值取a_min，将数组中大于a_max的值取a_max<br />
代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：
<code class="language-plaintext highlighter-rouge">[5 5 5 5 5 5 6 7 8 9 9 9]</code></p>

<h4 id="创建一个全1数组ones">创建一个全1数组ones</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ones</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="s">'C'</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">like</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</code></pre></div></div>
<p>示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">noes</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># 创建一个2叶3行4列的全1矩阵
</span></code></pre></div></div>

<h4 id="创建一个全0数组zeros">创建一个全0数组zeros</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">zeros</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="s">'C'</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>

<p>示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># 创建一个2叶3行4列的全0矩阵。
</span></code></pre></div></div>

<h4 id="创建有序数组arange">创建有序数组arange</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">arange</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>
<h5 id="示例1创建一个09的行向量">示例1（创建一个0~9的行向量）：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：<code class="language-plaintext highlighter-rouge">[0 1 2 3 4 5 6 7 8 9]</code></p>

<h5 id="示例2创建一个59的行向量">示例2（创建一个5~9的行向量）：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arenge</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：<code class="language-plaintext highlighter-rouge">[5 6 7 8 9]</code></p>

<h5 id="示例3创建一个以3为步长110的行向量">示例3（创建一个以3为步长1~10的行向量）</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：<code class="language-plaintext highlighter-rouge">[ 1  4  7  10]</code></p>

<h5 id="示例4创建一个09的2行5列的矩阵">示例4（创建一个0~9的2行5列的矩阵）</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span> <span class="c1"># 规模必须与元素个数相匹配
</span></code></pre></div></div>
<p>程序输出：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">5</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<h4 id="创建一个均匀划分的线段-linspace">创建一个均匀划分的线段 linspace</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">linspace</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">num</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">retstep</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</code></pre></div></div>
<p>作用：以start为开始以stop结束以num为划分次数创建一个行向量。</p>

<h5 id="示例1一般示例">示例1（一般示例）：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="err">，</span><span class="mi">10</span><span class="err">，</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：
<code class="language-plaintext highlighter-rouge">[ 0. 10.]</code></p>

<h5 id="示例2重组元素为一个25的矩阵">示例2（重组元素为一个2*5的矩阵）</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="w"> </span><span class="mi">0</span><span class="err">.</span><span class="w">          </span><span class="mf">1.11111111</span><span class="w">  </span><span class="mf">2.22222222</span><span class="w">  </span><span class="mf">3.33333333</span><span class="w">  </span><span class="mf">4.44444444</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="w"> </span><span class="mf">5.55555556</span><span class="w">  </span><span class="mf">6.66666667</span><span class="w">  </span><span class="mf">7.77777778</span><span class="w">  </span><span class="mf">8.88888889</span><span class="w"> </span><span class="mi">10</span><span class="err">.</span><span class="w">        </span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<h4 id="numpy的运算">numpy的运算</h4>
<h5 id="矩阵加减法">矩阵加减法：</h5>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="mi">27</span><span class="w"> </span><span class="mi">36</span><span class="p">]</span><span class="w">
</span><span class="p">[</span><span class="mi">11</span><span class="w"> </span><span class="mi">22</span><span class="w"> </span><span class="mi">33</span><span class="w"> </span><span class="mi">44</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h5 id="矩阵点乘">矩阵点乘：</h5>
<h6 id="代码示例1矩阵点乘">代码示例1（矩阵点乘）：</h6>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：<code class="language-plaintext highlighter-rouge">[ 10  40  90 160]</code></p>

<h6 id="代码示例2矩阵乘数字">代码示例2（矩阵乘数字）：</h6>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：<code class="language-plaintext highlighter-rouge">[ 50 100 150 200]</code></p>

<h5 id="矩阵乘法">矩阵乘法：</h5>
<h6 id="示例1使用npdot函数实现矩阵乘法">示例1（使用np.dot函数实现矩阵乘法）</h6>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="n">c_dot</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
<span class="n">d_dot</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c_dot</span><span class="p">,</span><span class="n">d_dot</span><span class="p">,</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">14</span><span class="p">]]</span><span class="w">
</span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">6</span><span class="p">]</span><span class="w"> 
 </span><span class="p">[</span><span class="mi">3</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>
<h6 id="示例二使用符号实现矩阵乘法">示例二（使用@符号实现矩阵乘法）：</h6>

<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">@</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="o">@</span><span class="n">a</span><span class="p">,</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">14</span><span class="p">]]</span><span class="w">
</span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">6</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">3</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>
<h5 id="数组的逻辑判断">数组的逻辑判断：</h5>

<p>数组可以直接进行逻辑判断，其返回值为与元素组同规模的bool型结果数组。
可以使用对象[逻辑表达式] 来过滤符合条件的项，返回一个行向量。</p>

<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">s</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="bp">True</span>  <span class="bp">True</span>  <span class="bp">True</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span><span class="p">]</span>
<span class="p">[</span><span class="mf">0.50784044</span> <span class="mf">0.51138057</span> <span class="mf">0.75612031</span> <span class="mf">0.61457462</span> <span class="mf">0.9712732</span>  <span class="mf">0.79497591</span><span class="p">]</span>
</code></pre></div></div>
<h5 id="矩阵元素的函数运算">矩阵元素的函数运算：</h5>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="mf">0.</span>          <span class="mf">0.84147098</span>  <span class="mf">0.90929743</span>  <span class="mf">0.14112001</span> <span class="o">-</span><span class="mf">0.7568025</span>  <span class="o">-</span><span class="mf">0.95892427</span>
 <span class="o">-</span><span class="mf">0.2794155</span>   <span class="mf">0.6569866</span>   <span class="mf">0.98935825</span>  <span class="mf">0.41211849</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="创建一个元素值在01之间的随机矩阵">创建一个元素值在0~1之间的随机矩阵</h5>
<h6 id="示例创建一个元素值在01之间的2行4列的随机矩阵">示例（创建一个元素值在0~1之间的2行4列的随机矩阵）：</h6>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mf">0.24853676</span><span class="w"> </span><span class="mf">0.47803948</span><span class="w"> </span><span class="mf">0.04436044</span><span class="w"> </span><span class="mf">0.92552742</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mf">0.61756337</span><span class="w"> </span><span class="mf">0.31913713</span><span class="w"> </span><span class="mf">0.83677922</span><span class="w"> </span><span class="mf">0.51923448</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<h4 id="合并数组">合并数组</h4>
<h5 id="上下合并函数签名">上下合并函数签名：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">vstack</span><span class="p">(</span><span class="n">tup</span><span class="p">):</span>
</code></pre></div></div>
<h5 id="左右合并函数签名">左右合并函数签名：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hstack</span><span class="p">(</span><span class="n">tup</span><span class="p">):</span>
</code></pre></div></div>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)))</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">4</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">8</span><span class="p">]]</span><span class="w">
</span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">8</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>
<h4 id="数组分割-split-or-array_split">数组分割 split or array_split</h4>
<h5 id="等量数组分割-split">等量数组分割 split</h5>

<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">indices_or_sections</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</code></pre></div></div>
<p>注意：axis表示对照切割的维度，例如对于矩阵而言axis=0表示横向切割，axis=1表示纵向切割，切割必须是对等切割否则报错。<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"纵向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"横向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/1.png" alt="1.png" />
    </div>
    
</div>

<h5 id="不等量数组分割-array_split">不等量数组分割 array_split</h5>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">array_split</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">indices_or_sections</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</code></pre></div></div>
<p>注意：这里与函数split最大的区别就是可以实现不等分的分法。前面等分，后面几项少分。<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"纵向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"横向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/2.png" alt="2.png" />
    </div>
    
</div>

<h2 id="pandas机器学习前缀知识">pandas（机器学习前缀知识）</h2>
<h4 id="属性-1">属性</h4>
<ol>
  <li>dtypes 获取所有列的数据格式</li>
  <li>columns 获取所有列名</li>
  <li>values 去除行名和列名，返回所有的内容，返回对象是numpy.ndarry。</li>
  <li>T 获得矩阵的转置（列名和行名也会一起转）。
    <h5 id="功能型小函数-1">功能型小函数</h5>
  </li>
  <li>fillna(x) 将序列中出现的nan转变为x</li>
  <li>isnull返回一个bool矩阵当原矩阵中该数值为nan时为true，非nan数据时为false。可以与numpy.any，numpy.all配套使用。</li>
  <li>读取csv文件pd.read_csv(文件名)</li>
</ol>

<h4 id="初始化矩阵">初始化矩阵</h4>
<h5 id="创建矩阵-series">创建矩阵 Series</h5>
<p>创建方式类似于numpy<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/3.png" alt="3.png" />
    </div>
    
</div>

<p>定义有名称的数据 DataFrame<br />
说明：<br />
index表示行标题，columns表示列标题，默认名称为从0开始的有序数列<br />
注意：每一行对应的数据数量要保持一致。<br /></p>
<h5 id="示例1使用序列创建">示例1（使用序列创建）</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">mport</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">s</span> <span class="o">=</span> 
<span class="n">d</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'x'</span><span class="p">,</span><span class="s">'y'</span><span class="p">,</span><span class="s">'x'</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图:</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/4.png" alt="4.png" />
    </div>
    
</div>

<h5 id="示例2使用字典创建">示例2（使用字典创建）</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.2</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/5.png" alt="5.png" />
    </div>
    
</div>

<h4 id="数组访问">数组访问</h4>
<h5 id="loc-名称表示法">loc （名称）表示法</h5>
<p>说明：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">loc</span><span class="p">[</span> <span class="p">[</span><span class="nx">行名序列</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="nx">列名序列</span><span class="p">]</span> <span class="p">]</span><span class="nx">直接访问</span>
<span class="nx">loc</span><span class="p">[</span> <span class="nx">行名序列i</span><span class="err">：</span><span class="nx">行名序列j</span><span class="err">，</span><span class="nx">列名序列i</span><span class="err">：</span><span class="nx">列名序列j</span> <span class="p">]</span><span class="nx">切片访问</span><span class="err">（</span><span class="nx">切片是闭区间</span><span class="err">）</span>
</code></pre></div></div>
<p>两者可以混合使用。</p>

<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单个数据访问'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"20221002"</span><span class="p">,</span><span class="s">'a'</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行单列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'20221002'</span><span class="p">,</span><span class="s">'20221001'</span><span class="p">],</span><span class="s">'b'</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'20221002'</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'20221002'</span><span class="p">,</span><span class="s">'20221001'</span><span class="p">],[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行多列切片访问'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'20221001'</span><span class="p">:</span><span class="s">'20221002'</span><span class="p">,[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/6.png" alt="6.png" />
    </div>
    
</div>

<h5 id="iloc下标表示法">iloc（下标）表示法</h5>
<p>说明：<br />
使用方式等同于loc但是序列名变成了索引号（从0开始计数）（不同于loc的是使用切片表示法时是左开右闭区间）<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单个数据访问'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行单列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/7.png" alt="7.png" />
    </div>
    
</div>

<h5 id="访问一列">访问一列</h5>
<p>访问方式：<br /></p>

<p>对象名[列名]（适用于所有情况的访问方式）<br />
对象名.列名（这种访问方式仅适用于标题为字符串型的情况）</p>

<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="s">'a'</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/8.png" alt="8.png" />
    </div>
    
</div>

<h5 id="访问一行数据-loc">访问一行数据 loc</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"20221002"</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/9.png" alt="9.png" />
    </div>
    
</div>

<h5 id="访问多行数据">访问多行数据</h5>

<p>多行数据直接访问语法：<br />
<code class="language-plaintext highlighter-rouge">对象名[start:end]</code> 这里的start、end既可以是数字用于表示序列的索引，当行名不是整数型时也可以直接使用行名（行名可以是字符串）</p>

<h4 id="数组修改">数组修改</h4>
<p>说明：<br />
与赋值相似，对已存在的数值进行修改就是修改，对不存在的数据就是添加可以通过修改不存在的行列使得数据的行列增加（未知数据用NAN代替）<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"修改数值"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"增加行"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'new_index'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"增加列"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="s">"new_columns"</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"同时增加行和列"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="s">'f'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/10.png" alt="10.png" />
    </div>
    
</div>

<h4 id="删除行列-dropna">删除行列 dropna</h4>
<p>说明：</p>

<p><code class="language-plaintext highlighter-rouge">axis = 0</code> 时表示删除行，1表示删除列</p>

<p><code class="language-plaintext highlighter-rouge">how</code>参数有两个值：</p>

<ul>
  <li>“any”：如果存在任何NAN值，则删除该行或列。</li>
  <li>“all”：如果所有值都为NAN值，则删除该行或列。</li>
</ul>

<p>注意：<code class="language-plaintext highlighter-rouge">dropna</code> 只是返回修改后的结果不会改变原本的值
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"axis == 0 时表示删除行，1表示删除列"</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'all'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'all'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'any'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/11.png" alt="11.png" />
    </div>
    
</div>

<h4 id="读写excle文件-read_excle-or-to_excle">读写excle文件 read_excle or .to_excle</h4>
<p>注意：<br /></p>

<p><code class="language-plaintext highlighter-rouge">read_excle</code> 得到的是一个<code class="language-plaintext highlighter-rouge">pandas</code>对象，之前数据访问修改删除等操作依然成立。
<code class="language-plaintext highlighter-rouge">to_excle</code>创建时会添加一列行名，可以使用<code class="language-plaintext highlighter-rouge">index=False</code> 去除行名的添加。</p>
<h4 id="脚本编程">脚本编程</h4>
<h5 id="逻辑表达式筛选">逻辑表达式筛选：</h5>

<p>使用对象名[逻辑表达式]方式筛选。
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'第0列数据大于0的数据有：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/12.png" alt="12.png" />
    </div>
    
</div>

<h4 id="数据分析-describe">数据分析 describe</h4>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mf">6.2</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">describe</span><span class="p">(),</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/13.png" alt="13.png" />
    </div>
    
</div>

<h4 id="排序-sort_index--sort_values">排序 sort_index &amp; sort_values</h4>
<h5 id="sort_index-对行列名排序">sort_index 对行列名排序</h5>
<p>说明：<br />
<code class="language-plaintext highlighter-rouge">axis = 0</code>表示对行名进行排序，1表示对列名进行排序。<br />
排序默认升序排序，当ascending = True 表示倒序排序<br />
函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sort_index</span><span class="p">(</span>
    <span class="bp">self</span><span class="p">,</span>
    <span class="n">axis</span><span class="p">:</span> <span class="n">Axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">level</span><span class="p">:</span> <span class="n">Level</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">ascending</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="nb">int</span> <span class="o">|</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">bool</span> <span class="o">|</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">inplace</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"quicksort"</span><span class="p">,</span>
    <span class="n">na_position</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"last"</span><span class="p">,</span>
    <span class="n">sort_remaining</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">ignore_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">key</span><span class="p">:</span> <span class="n">IndexKeyFunc</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">):</span>
</code></pre></div></div>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mf">6.2</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span> <span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/14.png" alt="14.png" />
    </div>
    
</div>

<h5 id="sort_values对数据列排序">sort_values对数据列排序</h5>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sort_values</span><span class="p">(</span>  <span class="c1"># type: ignore[override]
</span>    <span class="bp">self</span><span class="p">,</span>
    <span class="n">by</span><span class="p">,</span>
    <span class="n">axis</span><span class="p">:</span> <span class="n">Axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">inplace</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"quicksort"</span><span class="p">,</span>
    <span class="n">na_position</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"last"</span><span class="p">,</span>
    <span class="n">ignore_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">key</span><span class="p">:</span> <span class="n">ValueKeyFunc</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">):</span>
</code></pre></div></div>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mf">6.2</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/15.png" alt="15.png" />
    </div>
    
</div>

<h4 id="合并数组-merge">合并数组 merge</h4>
<p>说明：<br />
<code class="language-plaintext highlighter-rouge">how</code> 有4个取值：inner（默认）、outer、left、right 分别表示内连接、外连接、左外连接、右外连接。
<code class="language-plaintext highlighter-rouge">on</code> 表示连接是使用的列（类似于外键）
<code class="language-plaintext highlighter-rouge">indictor == True</code>时，在结果列中增加一列以显示每一个数据连接的方式默认为False，可以给indictor赋予字符串，以表示新列的名称
<code class="language-plaintext highlighter-rouge">left_	index &amp; right_index</code>同时为True时可以按行名合并，默认都为False，两者必须同为True才能生效。
<code class="language-plaintext highlighter-rouge">suffixex</code>当给其一个包含两个字符串的元组时，合并时若出现同名字段，则会加上这两个字符串后缀。
函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span>
    <span class="n">left</span><span class="p">:</span> <span class="n">DataFrame</span> <span class="o">|</span> <span class="n">Series</span><span class="p">,</span>
    <span class="n">right</span><span class="p">:</span> <span class="n">DataFrame</span> <span class="o">|</span> <span class="n">Series</span><span class="p">,</span>
    <span class="n">how</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"inner"</span><span class="p">,</span>
    <span class="n">on</span><span class="p">:</span> <span class="n">IndexLabel</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">left_on</span><span class="p">:</span> <span class="n">IndexLabel</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">right_on</span><span class="p">:</span> <span class="n">IndexLabel</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">left_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">right_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">sort</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">suffixes</span><span class="p">:</span> <span class="n">Suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_x"</span><span class="p">,</span> <span class="s">"_y"</span><span class="p">),</span>
    <span class="n">copy</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">indicator</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">validate</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DataFrame</span><span class="p">:</span>
</code></pre></div></div>

<h5 id="案例演示">案例演示</h5>
<h6 id="示例1依照指定列进行合并">示例1（依照指定列进行合并）：</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">,</span> <span class="s">'k3'</span><span class="p">],</span>
    <span class="s">'A'</span><span class="p">:</span> <span class="p">[</span><span class="s">'A0'</span><span class="p">,</span> <span class="s">'A1'</span><span class="p">,</span> <span class="s">'A2'</span><span class="p">,</span> <span class="s">'A3'</span><span class="p">],</span>
    <span class="s">'B'</span><span class="p">:</span> <span class="p">[</span><span class="s">'B0'</span><span class="p">,</span> <span class="s">'B1'</span><span class="p">,</span> <span class="s">'B2'</span><span class="p">,</span> <span class="s">'B3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key'</span><span class="p">:[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">,</span> <span class="s">'k3'</span><span class="p">],</span>
    <span class="s">'C'</span><span class="p">:[</span><span class="s">'C0'</span><span class="p">,</span><span class="s">'C1'</span><span class="p">,</span><span class="s">'C2'</span><span class="p">,</span><span class="s">'C2'</span><span class="p">],</span>
    <span class="s">'D'</span><span class="p">:[</span><span class="s">'D0'</span><span class="p">,</span><span class="s">'D1'</span><span class="p">,</span><span class="s">'D2'</span><span class="p">,</span><span class="s">'D3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="s">'key'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/16.png" alt="16.png" />
    </div>
    
</div>

<h6 id="示例2依照多列进行合并">示例2依照多列进行合并</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key1'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">],</span>
    <span class="s">'key2'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">],</span>
    <span class="s">'A'</span><span class="p">:</span> <span class="p">[</span><span class="s">'A0'</span><span class="p">,</span> <span class="s">'A1'</span><span class="p">,</span> <span class="s">'A2'</span><span class="p">,</span> <span class="s">'A3'</span><span class="p">],</span>
    <span class="s">'B'</span><span class="p">:</span> <span class="p">[</span><span class="s">'B0'</span><span class="p">,</span> <span class="s">'B1'</span><span class="p">,</span> <span class="s">'B2'</span><span class="p">,</span> <span class="s">'B3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key1'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">],</span>
    <span class="s">'key2'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">],</span>
    <span class="s">'C'</span><span class="p">:</span> <span class="p">[</span><span class="s">'C0'</span><span class="p">,</span> <span class="s">'C1'</span><span class="p">,</span> <span class="s">'C2'</span><span class="p">,</span> <span class="s">'C2'</span><span class="p">],</span>
    <span class="s">'D'</span><span class="p">:</span> <span class="p">[</span><span class="s">'D0'</span><span class="p">,</span> <span class="s">'D1'</span><span class="p">,</span> <span class="s">'D2'</span><span class="p">,</span> <span class="s">'D3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
<span class="c1"># how = ['left','right','inner','outer']
</span><span class="k">print</span><span class="p">(</span><span class="s">'内连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'inner'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'全外连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'左外连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'右外连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'right'</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/17.png" alt="17.png" />
    </div>
    
</div>

<h6 id="示例3显示每一列的合并方式">示例3（显示每一列的合并方式）</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col1'</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="s">'col_left'</span><span class="p">:[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]})</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col1'</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span><span class="s">'col_right'</span><span class="p">:[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">]})</span>
<span class="k">print</span><span class="p">(</span><span class="n">df1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df2</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="s">'col1'</span><span class="p">,</span><span class="n">indicator</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/18.png" alt="18.png" />
    </div>
    
</div>

<h6 id="示例4依照行名进行合并">示例4（依照行名进行合并）</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">left</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'A'</span><span class="p">:[</span><span class="s">'A0'</span><span class="p">,</span><span class="s">'A1'</span><span class="p">,</span><span class="s">'A2'</span><span class="p">],</span>
    <span class="s">'B'</span><span class="p">:[</span><span class="s">'B0'</span><span class="p">,</span><span class="s">'B1'</span><span class="p">,</span><span class="s">'B2'</span><span class="p">]},</span>
    <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'K0'</span><span class="p">,</span><span class="s">'K1'</span><span class="p">,</span><span class="s">'K2'</span><span class="p">])</span>
<span class="n">right</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'C'</span><span class="p">:[</span><span class="s">'C0'</span><span class="p">,</span><span class="s">'C2'</span><span class="p">,</span><span class="s">'C3'</span><span class="p">],</span>
    <span class="s">'D'</span><span class="p">:[</span><span class="s">'D0'</span><span class="p">,</span><span class="s">'D2'</span><span class="p">,</span><span class="s">'D3'</span><span class="p">]},</span>
    <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'K0'</span><span class="p">,</span><span class="s">'K2'</span><span class="p">,</span><span class="s">'K3'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">left_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/19.png" alt="19.png" />
    </div>
    
</div>

<h6 id="示例5同名字段加后缀">示例5（同名字段加后缀）</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">boys</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'k'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">],</span> <span class="s">'age'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]})</span>
<span class="n">girls</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'k'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'K1'</span><span class="p">,</span> <span class="s">'K2'</span><span class="p">],</span> <span class="s">'age'</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]})</span>
<span class="k">print</span><span class="p">(</span><span class="n">boys</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">girls</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">boys</span><span class="p">,</span><span class="n">girls</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="s">'k'</span><span class="p">,</span><span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="s">'_boy'</span><span class="p">,</span><span class="s">'_girl'</span><span class="p">),</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/20.png" alt="20.png" />
    </div>
    
</div>

<h4 id="合并数组-concat">合并数组 concat</h4>
<p>说明：<br />
<code class="language-plaintext highlighter-rouge">axis == 0</code>(默认) 表示竖向的合并，1表示横向合并<br />
<code class="language-plaintext highlighter-rouge">ignore == True</code>表示纵向合并时忽略原行序列从新有序定义行标号，默认False<br />
<code class="language-plaintext highlighter-rouge">join</code> 表示纵向连接方式默认为<code class="language-plaintext highlighter-rouge">outer</code>外连接（默认），还可以选择 <code class="language-plaintext highlighter-rouge">inner</code> 内连接<br />
注意：当竖向合并时，列名不一致（不包括次序不一致）将产生新列（全外连接）</p>

<h5 id="示例1">示例1</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">0</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df3</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">,</span><span class="n">df3</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/21.png" alt="21.png" />
    </div>
    
</div>

<h5 id="示例2纵向连接两种连接的比较">示例2（纵向连接，两种连接的比较）</h5>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">,</span><span class="s">'e'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">join</span><span class="o">=</span><span class="s">'outer'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">join</span><span class="o">=</span><span class="s">'inner'</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/22.png" alt="22.png" />
    </div>
    
</div>

<h5 id="示例三横向连接的4种方式比较">示例三（横向连接的4种方式比较）</h5>
<p>注意：
代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">,</span><span class="s">'e'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"全外连接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"左外链接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df1</span><span class="p">.</span><span class="n">index</span><span class="p">)],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"右外连接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df2</span><span class="p">,</span><span class="n">df1</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df2</span><span class="p">.</span><span class="n">index</span><span class="p">)],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"内连接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df2</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df1</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df2</span><span class="p">.</span><span class="n">index</span><span class="p">).</span><span class="n">index</span><span class="p">)],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/23.png" alt="23.png" />
    </div>
    
</div>

<h4 id="数据筛选query">数据筛选query</h4>
<p><code class="language-plaintext highlighter-rouge">DataFrame.query(expr, inplace=False, **kwargs)</code>，用于通过boolean表达式来查询dataframe中的列。
主要参数为expr，它是字符串表达式，有如下说明：</p>

<p>可以引用变量，方法是在变量前添加一个@字符，例如@a + b。<br />
可以在反引号内将包含空格或运算符的列名引用起来。 这样，您还可以转义以数字开头或Python关键字的名称。 基本上是无效的Python标识符。</p>

<h2 id="matplotlib图像绘制">matplotlib（图像绘制）</h2>

<h4 id="函数应用">函数应用</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">scalex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">scaley</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>

<ul>
  <li>x: 横坐标，可选的， 默认为 range(len(y))</li>
  <li>y: 纵坐标，即数据项，可以是一维或多维的列表或数组</li>
  <li>markersize: 标记大小</li>
  <li>color: 线条颜色</li>
  <li>marker: 数据标记的形状，默认是没有标记</li>
  <li>linestyle: 线条样式，默认为实线
代码演示：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="c1"># 以下两种写法等价，
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'dashed'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="c1"># plt.flot(x, y, 'go--'，linewidth=2, markersize=12)
# 可以在一个画布上绘制多张图片，
</span><span class="n">y1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'red'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'solid'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/24.png" alt="24.png" />
    </div>
    
</div>

<h4 id="重要示例">重要示例</h4>

<h5 id="示例1创建4个折线图">示例1（创建4个折线图）</h5>
<p>说明：使用plot实现，其中show函数主要实现图像的展示工作。<br />
代码演示：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">index</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span><span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s">"ABCD"</span><span class="p">))</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">cumsum</span><span class="p">()</span>    <span class="c1"># 累加
</span><span class="n">data</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/25.png" alt="25.png" />
    </div>
    
</div>

<h5 id="示例二创建2个散点图">示例二（创建2个散点图）</h5>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">index</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span><span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s">"ABCD"</span><span class="p">))</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">cumsum</span><span class="p">()</span>    <span class="c1"># 累加
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'A'</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">'B'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'DarkBlue'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">"Class 1"</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'A'</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">'C'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'DarkGreen'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">"Class 2"</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/26.png" alt="26.png" />
    </div>
    
</div>

<h4 id="日常问题">日常问题</h4>
<h5 id="图形中文乱码">图形中文乱码</h5>

<p>解决方法：更改字体防止图形乱码</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">pl</span>
<span class="n">pl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s">'font.sans-serif'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'SimHei'</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name>Ranok</name></author><category term="机器学习" /><category term="python" /><category term="numpy" /><category term="pandas" /><category term="matplotlib" /><summary type="html"><![CDATA[机器学习是研究怎样使用计算机模拟或实现人类学习活动的科学，是人工智能中最具智能特征，最前沿的研究领域之一。自20世纪80年代以来，机器学习作为实现人工智能的途径，在人工智能界引起了广泛的兴趣，特别是近十几年来，机器学习领域的研究工作发展很快，它已成为人工智能的重要课题之一。机器学习不仅在基于知识的系统中得到应用，而且在自然语言理解、非单调推理、机器视觉、模式识别等许多领域也得到了广泛应用。一个系统是否具有学习能力已成为是否具有“智能”的一个标志。]]></summary></entry><entry><title type="html">python 多线程与多进程</title><link href="http://localhost:4000/process" rel="alternate" type="text/html" title="python 多线程与多进程" /><published>2022-12-05T00:00:00+08:00</published><updated>2022-12-05T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-pythonProcessThreading</id><content type="html" xml:base="http://localhost:4000/process"><![CDATA[<p>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。线程是进程中的一部分，也是进程的的实际运作单位，它也是操作系统中的最小运算调度单位。</p>

<hr />
<h2 id="前言">前言</h2>
<p>多线程与多进程还是比较实用的。本博客以应用为目的展示两个基础的类。</p>

<h2 id="多进程-process">多进程 Process</h2>

<p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。<br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
</code></pre></div></div>
<h4 id="参数介绍">参数介绍</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Process</span><span class="p">(</span><span class="n">group</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(),</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{})</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">group</code>——参数未使用，值始终为<code class="language-plaintext highlighter-rouge">None</code></li>
  <li><code class="language-plaintext highlighter-rouge">target</code>——表示调用对象，即子进程要执行的任务</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>——表示调用对象的位置参数元组，args=(1,2,’egon’,)</li>
  <li><code class="language-plaintext highlighter-rouge">kwargs</code>——表示调用对象的字典，kwargs={‘name’:’egon’,’age’:18}</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>——为子进程的名称</li>
</ol>

<h4 id="方法介绍">方法介绍</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">obj.start()</code>：启动进程，并调用该子进程中的obj.run()</li>
  <li><code class="language-plaintext highlighter-rouge">obj.run()</code>：进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法</li>
  <li><code class="language-plaintext highlighter-rouge">obj.terminate()</code>：强制终止进程obj，不会进行任何清理操作，如果obj创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果obj还保存了一个锁那么也将不会被释放，进而导致死锁</li>
  <li><code class="language-plaintext highlighter-rouge">obj.is_alive()</code>：如果obj仍然运行，返回<code class="language-plaintext highlighter-rouge">True</code></li>
  <li><code class="language-plaintext highlighter-rouge">obj.join([timeout])</code>：主线程等待obj终止（强调：是主线程处于等的状态，而obj是处于运行的状态）。<code class="language-plaintext highlighter-rouge">timeout</code>是可选的超时时间，需要强调的是，obj.join只能join住start开启的进程，而不能join住run开启的进程</li>
</ol>

<h4 id="属性介绍">属性介绍</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">obj.daemon</code>：默认值为False，如果设为True，代表obj为后台运行的守护进程，当obj的父进程终止时，obj也随之终止，并且设定为True后，obj不能创建自己的新进程，必须在</li>
  <li><code class="language-plaintext highlighter-rouge">obj.start()</code>：之前设置</li>
  <li><code class="language-plaintext highlighter-rouge">obj.name</code>：进程的名称</li>
  <li><code class="language-plaintext highlighter-rouge">obj.pid</code>：进程的<code class="language-plaintext highlighter-rouge">pid</code></li>
  <li><code class="language-plaintext highlighter-rouge">obj.exitcode</code>：进程在运行时为<code class="language-plaintext highlighter-rouge">None</code>、如果为–N，表示被信号N结束(了解即可)</li>
  <li><code class="language-plaintext highlighter-rouge">obj.authkey</code>：进程的身份验证键,默认是由<code class="language-plaintext highlighter-rouge">os.urandom()</code>随机生成的32字符的字符串。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）</li>
</ol>

<h4 id="使用案例">使用案例</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
    <span class="c1"># 返回父子进程的pid
</span>    <span class="k">print</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getpid</span><span class="p">(),</span> <span class="n">os</span><span class="p">.</span><span class="n">getppid</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'I am parent process'</span><span class="p">)</span>
    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,))</span>
        <span class="n">jobs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>
<h4 id="方法介绍-1">方法介绍</h4>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/process/threading.png" alt="threading.png" />
    </div>
    
</div>

<h4 id="使用样例">使用样例</h4>
<h5 id="利用函数使用多线程">利用函数使用多线程</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">def</span> <span class="nf">work</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">a</span>
    <span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="err">，</span><span class="n">end</span><span class="o">=</span><span class="err">’’</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">childs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">childs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">work</span><span class="p">))</span>
        <span class="n">childs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>

<p>程序运行结果：<br />
<code class="language-plaintext highlighter-rouge">1 2 3 4 5</code><br />
如果创建的不是线程而是进程则资源不会共享，运行结果会是：<br />
<code class="language-plaintext highlighter-rouge">1 1 1 1 1</code></p>

<h5 id="利用类重写thrrad方法实现多线程">利用类重写Thrrad方法实现多线程</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">childs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">class</span> <span class="nc">MyThread</span><span class="p">(</span><span class="n">Thread</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">num</span>

        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="s">'线程正在工作'</span><span class="p">)</span>
            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">childs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyThread</span><span class="p">())</span>
    <span class="n">childs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>
<p>运行结果之一：<br />
1 线程正在工作<br />
2 线程正在工作<br />
3 线程正在工作<br />
132 线程正在工作 线程正在工作 <br />
线程正在工作<br />
<br />
13 线程正在工作<br />
2 线程正在工作<br />
 线程正在工作<br /></p>

<p>可以看到输出<strong>十分的杂乱</strong>，说明确实是多线程输出。</p>]]></content><author><name>Ranok</name></author><category term="python" /><category term="多线程" /><category term="多进程" /><summary type="html"><![CDATA[进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。线程是进程中的一部分，也是进程的的实际运作单位，它也是操作系统中的最小运算调度单位。]]></summary></entry></feed>