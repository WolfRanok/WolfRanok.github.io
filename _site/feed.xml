<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-21T13:18:07+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ranok</title><subtitle>Wolf Biting Pencil</subtitle><entry><title type="html">计组期末复习</title><link href="http://localhost:4000/computer" rel="alternate" type="text/html" title="计组期末复习" /><published>2022-12-18T00:00:00+08:00</published><updated>2022-12-18T00:00:00+08:00</updated><id>http://localhost:4000/shaoxing-computer</id><content type="html" xml:base="http://localhost:4000/computer"><![CDATA[<p>计算机组成原理重点讲授计算机系统的硬件组成，及其主要功能子系统的基本原理和逻辑设计；主要内容包括计算机系统概述，数据的表示、运算与校验，CPU子系统，存储子系统，总线与I/O子系统，I/O设备及接口等。</p>

<hr />

<h2 id="前言">前言</h2>
<p>本博客针对《计算机组成原理》课程进行期末复习，其中复习形式以<strong>对真题的解答</strong>为主要方式。本门课程偏硬件，对于软件专业的可能需要花费更多的时间来攻克本门课程。希望你顺利通过本门考试。</p>

<hr />

<h2 id="考题分析">考题分析</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">题型</th>
      <th style="text-align: center">单项分数</th>
      <th style="text-align: center">题量</th>
      <th style="text-align: center">总分</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">选择</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">20</td>
    </tr>
    <tr>
      <td style="text-align: center">判断</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">10</td>
    </tr>
    <tr>
      <td style="text-align: center">简答</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">20</td>
    </tr>
    <tr>
      <td style="text-align: center">计算</td>
      <td style="text-align: center">10</td>
      <td style="text-align: center">3</td>
      <td style="text-align: center">30</td>
    </tr>
    <tr>
      <td style="text-align: center">综合</td>
      <td style="text-align: center">15</td>
      <td style="text-align: center">2</td>
      <td style="text-align: center">30</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="选择题">选择题</h2>

<h4 id="1-两个数9f5-h和513-h相加得-c-">1. 两个数\(9F5 H\)和\(513 H\)相加，得( C ).</h4>

<blockquote>
  <p>后缀<code class="language-plaintext highlighter-rouge">H</code>表示16进制，其表示方式\(9F5 H\)等价于\((9F5)_{16}\)</p>
</blockquote>

<p>  A: BDBH<br />
  B: CD8H<br />
  C: F08H<br />
  D: CC8H</p>

<h4 id="2--d-表示法主要用于表示浮点数中的阶码">2. ( D )表示法主要用于表示浮点数中的阶码。</h4>

<p>  A: 原码<br />
  B: 补码<br />
  C: 反码<br />
  D: 移码<br /></p>

<h4 id="3-存储字长是-c-">3. 存储字长是( C )</h4>
<blockquote>
  <p>存储字长是位数，大小才是个数</p>
</blockquote>

<p>  A: 存储单元的个数<br />
  B: 机器指令的位数<br />
  C: 存放在一个存储单元之后的二进制代码位数<br />
  D: 机器字长<br /></p>

<h4 id="4-若x补--110001100则x原-b-">4. 若[x]补 = 1.10001100，则[x]原=( B )。</h4>
<blockquote>
  <p>这里的第一位表示符号位不是小数点<br />
原码 = 补码按位取反后 + 1</p>
</blockquote>

<p>  A: 1.0010101<br />
  B: 1.01110100<br />
  C: 0.0010110<br />
  D: 0.1101010<br /></p>

<h4 id="5-若cpu的地址线为a0a15某芯片存储单元有8k则加在该存储器芯片上的地址线为-c-">5. 若CPU的地址线为A0~A15，某芯片存储单元有8K，则加在该存储器芯片上的地址线为( C )。</h4>
<blockquote>
  <p>1k 表示 \(2^{10}\) 所以可以推算出 8k 表示 \(2^{13}\) 所以总线占据13位</p>
</blockquote>

<p>  A: A0~A10<br />
  B: A0~A11<br />
  C: A0~A12<br />
  D: A0~A13<br /></p>

<h4 id="6-冯诺依曼机工作方式的基本特点是-b-">6. 冯.诺依曼机工作方式的基本特点是( B )。</h4>

<p>  A: 多指令流单数据流<br />
  B: 按地址访问并顺序执行指令<br />
  C: 堆栈操作<br />
  D: 存储器按内容选择地址<br /></p>

<h4 id="7-某一ram-芯片其容为10248位其数据线和地延线分别为-c-">7. 某一RAM 芯片，其容为1024*8位，其数据线和地延线分别为( C )。</h4>
<blockquote>
  <p>1024 表示地址线 \(2^{10}\) 共10位，数据线为8位</p>
</blockquote>

<p>  A: 3、10<br />
  B: 10、3<br />
  C: 8、10<br />
  D: 10、8<br /></p>

<h4 id="8-cache的地址映射中若主存中的任意一块均可映射到cache内的任意一块的位置上称-b-">8. Cache的地址映射中，若主存中的任意一块均可映射到Cache内的任意一块的位置上，称( B )。</h4>
<blockquote>
  <p>直接映射表示：取模映射，每一个块只能映射到模数固定的位置上。<br />
全相联映射：如题意。<br />
组相联映射：组间直接映射，组内全映射<br /></p>
</blockquote>

<p>  A: 直接映射<br />
  B: 全相联映射<br />
  C: 组相联映射<br />
  D: 以上全是<br /></p>

<h4 id="9-某机字长8位来用补码形式则机疑数能表示的范国是-c-">9. 某机字长8位，来用补码形式，则机疑数能表示的范国是( C )。</h4>
<blockquote>
  <p>左闭右开</p>
</blockquote>

<p>  A: -127~+127<br />
  B: -128~+128<br />
  C: -128~+127<br />
  D: -127~+128<br /></p>

<h4 id="10-计算机操作的最小单位时间是-a-">10. 计算机操作的最小单位时间是( A )。</h4>

<p>  A: 时钟周期<br />
  B: 机器周期<br />
  C: CPU周期<br />
  D: 指令周期<br /></p>

<hr />

<h2 id="判断题">判断题</h2>

<h4 id="11超前进位不要考虑前一位来的进位">11．超前进位不要考虑前一位来的进位。（✔）</h4>
<h4 id="12-在补码的加减法中用两位符号位判断溢出两位符号位组合为10时表示结果正溢">12. 在补码的加减法中，用两位符号位判断溢出,两位符号位组合为10时，表示结果正溢。（✖）</h4>
<blockquote>
  <p>00	结果为正，无溢出 <br />
01	正溢，（大于机器所能表示的最大正数）<br />
10	负溢，（小于机器所能表示的最小负数）<br />
11	结果为负，无溢出<br /></p>
</blockquote>

<h4 id="13-nand闪存更适用作为u盘-">13. NAND闪存更适用作为U盘。 （✔）</h4>
<h4 id="14-在程序的执行过程中cache与主存的地址映射是由操作系统来管理的-">14. 在程序的执行过程中，Cache与主存的地址映射是由操作系统来管理的。 (✖)</h4>
<blockquote>
  <p>此处应该把<code class="language-plaintext highlighter-rouge">操作系统</code>换成<code class="language-plaintext highlighter-rouge">硬件</code></p>
</blockquote>

<h4 id="15存取时间比存取周期花费的时间要长一些-">15．存取时间比存取周期花费的时间要长一些。 (✖)</h4>
<blockquote>
  <p>存取周期包括了存储时间，所以存储周期时间要更长</p>
</blockquote>

<h4 id="16-浮点数的正负由阶码的正负符号决定-">16. 浮点数的正负由阶码的正负符号决定。 (✖)</h4>
<blockquote>
  <p>正负由符号位决定</p>
</blockquote>

<h4 id="17-nor闪存更适用作为程序存储器-">17. NOR闪存更适用作为程序存储器。 (✖)</h4>

<h4 id="18-e2prom-是带电可擦可编程的只读存储-">18. \(E^2PROM\) 是带电可擦可编程的只读存储。 (✔)</h4>
<h4 id="19硬件实现的功能一般比款件实现具有更尚的执行速度-">19．硬件实现的功能一般比款件实现具有更尚的执行速度。 (✔)</h4>
<h4 id="20-动态存储dram的刷新是以列为单位的-">20. 动态存储DRAM的刷新是以列为单位的。 (✖)</h4>
<blockquote>
  <p>应该以<strong>行</strong>为单位</p>
</blockquote>

<hr />

<h2 id="简答题">简答题</h2>
<h4 id="21-任意写出五种指令寻址方式">21. 任意写出五种指令寻址方式。</h4>

<p>  1. 隐含寻址
  2. 立即寻址
  3. 直接寻址
  4. 间接寻址
  5. 寄存器寻址
  6. 寄存器间接寻址
  7. 偏移寻址
  8. 堆栈寻址</p>

<h4 id="22写出-nor和nand型flash闪存各自的优缺点">22．写出 NOR和NAND型Flash闪存各自的优缺点</h4>
<p>  NOR可靠性高，适用于擦除次数和编程操作较少，而直接执行代码的场合。
  NAND存储速度快，闪存有10倍于NOR闪存的可擦除次数，适用于大容量存储设备。</p>

<hr />

<h2 id="计算题">计算题</h2>
<h3 id="23-二进制计算">23. 二进制计算</h3>
<blockquote>
  <p>指数 = 阶码 - 127</p>

  <p>IEEE754标准: 1位符号位 + 8位阶码 + 23位尾数</p>
</blockquote>

<h4 id="1设浮点数的阶码和尾数部分均用二进制补码表示按照浮点数的运算规则计算xyx2-1010101100y2-100-0101000">(1)设浮点数的阶码和尾数部分均用二进制补码表示，按照浮点数的运算规则计算X+Y:<br />\(X=2^{-101}*0.101100，Y=2^{-100}*(-0.101000)\)</h4>

<p>  [x]浮=1011;0.101100，[y]浮=1100;1.011000</p>

<p>  对阶:小阶向大阶看齐。</p>

<p>  △E=EA-EB=-1</p>

<p>  [x]浮’=1100;0.010110</p>

<p>  尾数相加：00.010110+11.011000=11.101110</p>

<p>  需左规一次</p>

<p>  [x+y]浮=1011；1.011100</p>

<p>  X+Y=2-101*（-0.100100）</p>

<h4 id="2将十进制数10375表示成单精度的ieee754标准规定的32位短浮点数结呆以十六进制形式给出">（2）将十进制数10.375表示成单精度的IEEE754标准规定的32位短浮点数（结呆以十六进制形式给出)。</h4>

<p>将整数部分和小数部分整理成二进制可以得到：</p>

<p>  \(10.375=(1010.011)_2\)</p>

<p>移动小数点，使其位于第一二位之间：</p>

<p>  \(1010.011=1.010011 X 2^3\)</p>

<p>可以得到：</p>

<p>  \(S=0 E=3+127=130 M=010011\)</p>

<p>所以有二进制的IEEE754标准表达式：</p>

<p>  \(01000001 00100110 00000000 00000000\)</p>

<p>最终得到16进制的IEEE754标准表达式：</p>

<p>  \((41260000)_{16}\)</p>

<h3 id="24设主存容量为256k字cache容量为2k字块长为256字存储器按字寻址">24．设主存容量为256K字，Cache容量为2K字，块长为256字，存储器按字寻址。</h3>
<blockquote>
  <p>块数 = 容量 / 块长</p>

  <p>直接映射标志位 = s - r<br />
全相联映射标志位 = s<br />
w = log(块大小)，r = log(Cache行数)，s = log(主存块数) - w</p>
</blockquote>

<h4 id="1在直接映射方式下设计主存地址格式并求标志位的位数">1)在直接映射方式下,设计主存地址格式并求标志位的位数;</h4>

<p>  \(块大小 = 256 = 2^8 = 2^w 字节\)<br />
  \(所以w=8位\)</p>

<p>  \(主存寻址单元数 = 256K = 2^{18} = 2^{s+w}\)<br />
  \(所以s = 18-8 = 10 位\)</p>

<p>  \(Cache的行大小=2K/256=2^2=2^r\)<br />
  \(所以r=2 位，标记位位数=s-r=10-2=8位\)</p>

<p>综上所述：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">标记s-r</th>
      <th style="text-align: center">行r</th>
      <th style="text-align: center">字地址w</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">8位</td>
      <td style="text-align: center">2位</td>
      <td style="text-align: center">8位</td>
    </tr>
  </tbody>
</table>

<p>标记位的位数是<strong>8</strong>位</p>

<h4 id="2在全相联映射方式下设计主存地址格式并求标志位的位数">2)在全相联映射方式下，设计主存地址格式并求标志位的位数。</h4>
<p>  \(块大小 = 256 = 2^8 = 2^w 字节\)<br />
  \(所以w=8位\)</p>

<p>  \(主存寻址单元数 = 256K = 2^{18} = 2^{s+w}\)<br />
  \(所以s = 18-8 = 10 位\)</p>

<p>综上所述</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">标记s</th>
      <th style="text-align: center">字地址w</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">10位</td>
      <td style="text-align: center">8位</td>
    </tr>
  </tbody>
</table>

<p>标记位的位数是<strong>10</strong>位</p>

<hr />

<h2 id="综合题">综合题</h2>

<h3 id="25用8k2位的sram芯片组成32k8位的存储器试问">25．用8K*2位的SRAM芯片组成32K*8位的存储器。试问:</h3>

<h4 id="1地址寄存器多少位5分">1)地址寄存器多少位?(5分)</h4>

<p>  字大小 = 32K = 2^15<br />
  所以需要15位</p>

<h4 id="2共需要多少片sram5分">2)共需要多少片SRAM?(5分)</h4>

<p>由题意可得
  新组成的存储器，需要4倍的字扩容、4倍的位扩容才能得到<br />
  所以：需要\(4*4 = 16\)片</p>

<h4 id="3画出此存储器的组成简要框图5分">3)画出此存储器的组成简要框图。(5分)</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/computer/1.jpg" alt="1.jpg" />
    </div>
    
</div>

<h3 id="26-作图微指令与微操作">26. 作图（微指令与微操作）</h3>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/computer/3.jpg" alt="3.jpg" />
    </div>
    
</div>

<h4 id="参见图1的数据通路画出取数指令ldar3ro的指令周期流程图其含义是将r3为地址数存单元的内容取至寄存器ro中画出方框图并标出各微操作信号序列">参见图1的数据通路,画出取数指令“LDA(R3),RO的指令周期流程图,其含义是将(R3)为地址数存单元的内容取至寄存器RO中，画出方框图并标出各微操作信号序列。</h4>
<blockquote>
  <p>输入可以不用画</p>

  <p>在下图中，包括菱形在内的上面部分是<strong>取指</strong>，不包括菱形的下部分是<strong>执行</strong></p>
</blockquote>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/computer/2.bmp" alt="2.bmp" />
    </div>
    
</div>]]></content><author><name>Ranok</name></author><category term="计算机组成原理" /><category term="期末考试" /><summary type="html"><![CDATA[计算机组成原理重点讲授计算机系统的硬件组成，及其主要功能子系统的基本原理和逻辑设计；主要内容包括计算机系统概述，数据的表示、运算与校验，CPU子系统，存储子系统，总线与I/O子系统，I/O设备及接口等。]]></summary></entry><entry><title type="html">马原期末复习</title><link href="http://localhost:4000/marxism" rel="alternate" type="text/html" title="马原期末复习" /><published>2022-12-17T00:00:00+08:00</published><updated>2022-12-17T00:00:00+08:00</updated><id>http://localhost:4000/shaoxing-marxism</id><content type="html" xml:base="http://localhost:4000/marxism"><![CDATA[<p>马克思主义基本原理是指马克思主义政治经济学、辩证唯物主义和历史唯物主义以及科学社会主义。它是马克思主义科学体系的基本理论、基本范畴，是其立场、观点和方法的理论表达。</p>

<hr />

<h2 id="前言">前言</h2>
<p>本篇博客为对马原课程的期末复习整理，主要是针对68个知识点来整理的，内容较多。祝愿你可以在考试中拿下一个好成绩！</p>

<hr />

<h2 id="考试题型">考试题型</h2>

<table>
  <thead>
    <tr>
      <th>题型</th>
      <th>题量</th>
      <th>分值（题/分）</th>
      <th>总分</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>单选</td>
      <td>20</td>
      <td>1</td>
      <td>20</td>
    </tr>
    <tr>
      <td>多选</td>
      <td>10</td>
      <td>2</td>
      <td>20</td>
    </tr>
    <tr>
      <td>简答</td>
      <td>2</td>
      <td>5</td>
      <td>10</td>
    </tr>
    <tr>
      <td>论述</td>
      <td>2</td>
      <td>10</td>
      <td>20</td>
    </tr>
    <tr>
      <td>分析</td>
      <td>2</td>
      <td>15</td>
      <td>30</td>
    </tr>
    <tr>
      <td>合计</td>
      <td>36</td>
      <td> </td>
      <td>100</td>
    </tr>
  </tbody>
</table>

<hr />
<h2 id="考题分析">考题分析</h2>

<hr />

<h3 id="导论">导论</h3>
<h4 id="1马克思主义的三个基本组成部分及其理论来源p2p5">1.马克思主义的三个基本组成部分及其理论来源（P2、P5）</h4>
<p>  三个基本组成部分：马克思主义哲学、马克思主义政治经济学和科学社会主义。<br />
  理论来源：德国古典哲学、英国古典政治经济学、英法两国的空想社会主义。</p>

<h4 id="2马克思主义产生的社会根源阶级基础和思想渊源p4-5待确定">2.马克思主义产生的社会根源、阶级基础和思想渊源（P4-5）（待确定）</h4>
<p>  社会根源：资本主义生产方式的发展。<br />
  阶级基础：无产阶级斗争对科学理论的需求。 <br />
  思想渊源：19世纪西欧三大先进思潮。细胞学说，能量守恒与转化定律，生物进化论，为马克思主义的产生提供了<strong>自然科学前提</strong>。</p>

<h4 id="3马克思主义公开问世的标志p6">3.马克思主义公开问世的标志（P6）</h4>
<p>  《共产党宣言》的发表。</p>

<h4 id="4反杜林论p7">4.《反杜林论》（P7）</h4>
<p>  恩格斯写出了《反杜林论》。全面阐述了马克思主义理论体系。</p>

<h4 id="5马克思主义的鲜明特征p10-11">5.马克思主义的鲜明特征（P10-11）</h4>
<p>  科学性，人民性，实践性，发展性。</p>

<h4 id="6马克思主义的当代价值p12-15多选">6.马克思主义的当代价值（P12-15）（多选）</h4>
<p>  观察当代世界变化的认识工具<br />
  指引当代中国发展的行动指南<br />
  引领人类社会进步的科学真理。</p>

<h4 id="7自觉学习和运用马克思主义p17-18">7.自觉学习和运用马克思主义（P17-18）</h4>
<p>  努力学习和掌握马克思主义的基本立场观点方法。<br />
  努力学习和掌握马克思主义中国化的理论成果。<br />
  坚持理论联系实际的马克思主义学风。<br />
  自觉将马克思主义内化于心外化于行。</p>

<hr />

<h3 id="第一章">第一章</h3>
<h4 id="8哲学的基本问题p21">8.哲学的基本问题（P21）</h4>
<p>  哲学基本问题主要包括两方面内容：<br />
  一是存在和思维物质和意识谁为本源的问题，何为第一性的问题，对这问题的不同回答形成了<strong>唯物主义和唯心主义两种根本对立的哲学派别</strong>。<br />
  二是存在和思维物质和意识是否具有同一性的问题，即思维能否正确的反应存在，人能否认识或彻底认识世界的问题，对这一问题的不同回答产生了可知论和不可知论的理论分野。</p>

<h4 id="9意识的本质p26">9.意识的本质（P26）</h4>
<p>  意识是人脑这样一种特殊物质的机能和属性，是客观世界的主观映象。</p>

<h4 id="10主观能动和客观规律性的辩证统一p27">10.主观能动和客观规律性的辩证统一（P27）</h4>
<p>  一方面尊重客观规律是正确发挥主观能动性的前提。<br />
  另一方面只有充分发挥主观能动性，才能正确认识和利用客观规律。</p>

<h4 id="11联系的含义及特点p32">11.联系的含义及特点（P32）</h4>
<p>  联系是指事物内部各要素之间和事物之间互相影响，互相制约，互相作用的关系。<br />
  联系具有客观性，普遍性、多样性、条件性。</p>

<h4 id="12发展的实质p33">12.发展的实质（P33）</h4>
<p>  新事物的产生和旧事物的灭亡。</p>

<h4 id="13矛盾的同一性和斗争性原理及其方法论要求p35-36">13.矛盾的同一性和斗争性原理及其方法论要求（P35-36）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  矛盾的同一性是指矛盾着的对立面，互相依存，互相贯通的性质和趋势，有两个方面的含义，一是矛盾着的对立面，相互依存互为存在的前提并共处于一个统一个体中。<br />
  二是矛盾着的对立面，互相贯通，在一定条件下可以互相转化。矛盾的斗争性是矛盾着的，对立面互相排斥，互相分离的性质和趋势。</p>

<p>方法论要求：<br />
  矛盾同一性和斗争性的辩证关系原理要求，我们在观察和处理问题时，必须善于把两者结合起来，在斗争性中把握同一性，在同一性中把握斗争性，既要看到矛盾双方的对立，又要看到矛盾双方的统一。</p>

<h4 id="14矛盾的普遍性和特殊性的辩证关系原理及其方法论要求p37">14.矛盾的普遍性和特殊性的辩证关系原理及其方法论要求（P37）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  矛盾的同一性是指矛盾着的对立面，互相依存，互相贯通的性质和趋势，有两个方面的含义。 <br />
  一是矛盾着的对立面，相互依存互为存在的前提并共处于一个统一个体中。<br />
  二是矛盾着的对立面，互相贯通，在一定条件下可以互相转化，矛盾的斗争性是矛盾着的，对立面互相排斥，互相分离的性质和趋势。</p>

<p>方法论要求：<br />
  矛盾同一性和斗争性的辩证关系原理要求，我们在观察和处理问题时，必须善于把两者结合起来，在斗争性中把握同一性，在同一性中把握斗争性，既要看到矛盾双方的对立，又要看到矛盾双方的统一。</p>

<h4 id="15量变质变规律及其方法论要求p38">15.量变质变规律及其方法论要求（P38）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  第一量变是质变的必要准备；<br />
  第二质变是量变的必然结果；<br />
  第三量变和质变是相互渗透的；</p>

<p>方法论要求：<br />
  一方面当事物的发展处在量变阶段时，要踏踏实实做好日常工作，为未来重大改变做准备。<br />
  另一方面当质变来临的时候要果断的不失时机的抓住机遇，促成质变，使工作迈上新台阶。</p>

<h4 id="16辩证的否定观及其方法论要求p39">16.辩证的否定观及其方法论要求（P39）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>方法论原理：<br />
  第一否定是事物自我否定；<br />
  第二否定是事物发展的环节；<br />
  第三否定是新旧事物联系的环节；<br />
  第四辩证否定的实质是扬弃。</p>

<p>方法论要求：<br />
  按照否定之父定规律办事，就要求我们树立辩证的否定观，反对形而上学的肯定一切或否定一切，要对事物采取科学分析的态度，使实践活动符合事物自我否定的辩证本性，同时又要求我们正确看待事物发展的过程，既要看到道路的曲折，又要看到前途的光明。</p>

<h4 id="17原因与结果p41">17.原因与结果（P41）</h4>
<p>  原因与结果是揭示事物引起和被引起关系的一对范畴，在事物的普遍联系中，引起某种现象的现象就是原因，被某种现象所引起的现象就是结果。</p>

<h4 id="18辩证思维能力p50">18.辩证思维能力（P50）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  提高辩证思维能力，要求我们客观地而不是主观地联系地，而不是孤立地发展地，而不是静止的全面地而不是片面地系统地而不是零散地观察事物，把握事物的本质和发展规律，找到解决问题的方法和途径。<br />
  以问题为向导，善于正确分析矛盾，在对立中把握统一在统一中把握对立，克服极端化，片面化，善于运用辩证思维谋划事业发展。</p>

<hr />

<h3 id="第二章">第二章</h3>
<h4 id="19实践的基本特征p62-63">19.实践的基本特征（P62-63）</h4>
<p>  实践具有客观实在性、自觉能动性、社会历史性。</p>

<h4 id="20实践对认识的决定作用p67-68">20.实践对认识的决定作用（P67-68）</h4>
<blockquote>
  <p>本知识点考查论述题</p>
</blockquote>

<p>实践是认识的来源；
  实践是认识发展的动力；<br />
  实践是认识的目的；<br />
  实践是检验认识真理的唯一标准。</p>

<h4 id="21两条根本对立的认识路线p69">21.两条根本对立的认识路线（P69）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  在认识的本质问题上，存在着两条根本对立的认识路线：<br />
  一条是坚持从物到感觉和思想的唯物主义认识路线。<br />
  另一条是坚持从思想和感觉到物的唯心主义认识路线。</p>

<h4 id="22认识的本质p71">22.认识的本质（P71）</h4>
<p>  在认识的本质问题上，存在着两条根本对立的认识路线：<br />
  一条是坚持从物到感觉和思想的唯物主义认识路线；<br />
  另一条是坚持从思想和感觉到物的唯心主义认识路线。</p>

<h4 id="23感性认识和理性认识的辩证统一关系p74">23.感性认识和理性认识的辩证统一关系（P74）</h4>
<blockquote>
  <p>本知识点考查论述题</p>
</blockquote>

<p>  第一理性认识依赖于感性认识；<br />
  第二感性认识有待于发展和深化为理性认识；<br />
  第三感性认识和理性认识相互渗透相互包含<br /></p>

<h4 id="24实践与认识的辩证运动规律p77">24.实践与认识的辩证运动规律（P77）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  实践与认识的辩证运动是由一个感性认识到理性认识，又有理性认识，到实践的飞跃是实践认识再实践，再认识循环往复以至无穷的辩证发展过程。</p>

<h4 id="25真理的一元性p81">25.真理的一元性（P81）</h4>
<p>  真理的一元性是指在同一条件下，对于特定的认识客体的真理性认识<strong>只有一个</strong>，而不可能有多个</p>

<h4 id="26真理的绝对性和相对性的含义p81-82">26.真理的绝对性和相对性的含义（P81-82）</h4>
<p>  真理的绝对性真理的绝对性是指真理主客观统一的确定性和发展的无限性；<br />
  真理的相对性真理的相对性是指人们在一定条件下对客观事物及其本质和发展规律的正确认识总是有限度的，不完善的；</p>

<h4 id="27真理与谬误的辩证关系p85">27.真理与谬误的辩证关系（P85）</h4>
<blockquote>
  <p>本知识点考查简答题</p>
</blockquote>

<p>  第一，真理与谬误相互对立；<br />
  第二，真理与谬误的对立又是相对的，它们在一定条件下能够相互转化。</p>

<h4 id="28实践是检验真理的唯一标准p87">28.实践是检验真理的唯一标准（P87）</h4>
<p>  实践之所以能够作为检验真理的唯一标准，是由<strong>真理的本性和实践的特点</strong>决定的。</p>

<h4 id="29价值的基本特性p91-92">29.价值的基本特性（P91-92）</h4>
<p>  第一，价值的主体性，价值的主体性是指价值直接与主体相联系，始终以主体为中心；<br />
  第二，价值的客观性，价值的客观性是指在一定条件下客体对于主体的意义不依赖于主体的主观意识而存在；<br />
  第三，价值的多维性，价值的多维性是指每个主体的价值，关系具有多样性，同一客体相对于主体的不同需要与会产生不同的价值；<br />
  第四价值的社会历史性，主体和客体的不断变化决定了价值的社会历史性</p>

<h4 id="30价值评价的特点p92-94">30.价值评价的特点（P92-94）</h4>
<blockquote>
  <p>本知识点考查简答题</p>
</blockquote>

<p>  第一，评价与主客体的价值关系为认识对象；<br />
  第二，评价结果与评价主体直接相关；<br />
  第三，评价结果的正确与否依赖于客体状态和主体需要的认识；<br />
  第四，价值评价有科学与非科学之别。</p>

<h4 id="31真理与价值在实践中的辩证统一p95-96">31.真理与价值在实践中的辩证统一（P95-96）</h4>
<p>  人们的实践活动总是受着真理尺度和价值尺度的制约。<br />
  任何实践活动都是在这两种尺度共同制约下进行的，任何成功的实践都是真理尺度和价值尺度的统一，是合规律性和合目的性的统一。<br />
  一方面价值尺度必须以真理为前提。<br />
  另一方面人类自身需要的内在尺度推动着人们不断发现新的真理。</p>

<h4 id="32理论创新和实践创新的良性互动p106-107">32.理论创新和实践创新的良性互动（P106-107）</h4>
<p>  实践创新为理论创新提供不竭的动力源泉；<br />
  理论创新为实践创新提供科学的行动指南；<br />
  努力实现理论创新与实践创新的良性互动。</p>

<hr />

<h3 id="第三章">第三章</h3>
<h4 id="33自然地理环境在人类社会生存和发展中的重要作用p112">33.自然地理环境在人类社会生存和发展中的重要作用（P112）</h4>
<p>  自然地理环境是指人类社会所处的地理位置相联系的自然条件的总和，是人类社会生存和发展永恒的必要的条件，是人们生活和生产的自然基础。</p>

<h4 id="34物质生产方式p113">34.物质生产方式（P113）</h4>
<p>  物质的生产方式是社会存在和发展的基础及决定力量。</p>

<h4 id="35社会存在和社会意识的辩证关系p116">35.社会存在和社会意识的辩证关系（P116）</h4>
<blockquote>
  <p>本知识点考查简答题（有待补充）</p>
</blockquote>

<p>  社会存在决定社会意识，社会意识是社会存在的反映，并反作用于社会存在。</p>

<h4 id="36社会意识对社会存在具有能动的反作用p117">36.社会意识对社会存在具有能动的反作用（P117）</h4>
<p>  社会意识对社会存在具有能动的反作用，这是社会意识相对独立性的突出表现。</p>

<h4 id="37生产力p121">37.生产力（P121）</h4>
<p>  <strong>劳动者</strong>是生产力中最活跃的因素</p>

<h4 id="38经济基础与上层建筑的辩证关系p127">38.经济基础与上层建筑的辩证关系（P127）</h4>
<p>  经济基础与上层建筑是辩证统一的，经济基础决定上层建筑，上层建筑反作用于经济基础，二者相互影响相互作用。</p>

<h4 id="39社会形态更替的一般规律及特殊形式p133-136">39.社会形态更替的一般规律及特殊形式（P133-136）</h4>
<p>  社会形态的内涵；<br />
  社会形态更替的统一性和多样性<br />
  社会形态更替的必然性与人们的历史选择性；<br />
  社会形态更替的前进性和曲折性。</p>

<h4 id="40社会革命在社会发展中的重要作用p148">40.社会革命在社会发展中的重要作用（P148）</h4>
<p>  革命对社会发展起巨大作用，“革命是历史的火车头”，是社会进步和政治进步的强大推动力。社会革命是实现社会形态根体的重要手段和决定性环节。</p>

<h4 id="41改革在社会历史发展中的重要作用p149">41.改革在社会历史发展中的重要作用（P149）</h4>
<p>  在一定社会形态总的量变过程中，当社会基本矛盾发展到一定程度带有尚未激化到引起社会革命的程度时，就需要依靠改革的途径或手段来改变与生产力不相适应的生产关系和与经济基础不相适应的上层建筑。</p>

<h4 id="42科学技术在社会发展中的作用p151-153">42.科学技术在社会发展中的作用（P151-153）</h4>
<blockquote>
  <p>本知识点考查大题目</p>
</blockquote>

<p>  每一次科技革命都不同程度的引起了生产方式，生活方式和思维方式深刻变化和社会的巨大进步。</p>

<p>  首先生产方式产生了深刻的影响。<br />
  其次对生活方式产生了巨大影响。<br />
  最后促进了思维方式的变革。</p>

<h4 id="43两种历史观在历史创造者问题上的对立p153">43.两种历史观在历史创造者问题上的对立（P153）</h4>
<p>  唯物史观与唯心史观的对立，在历史创造者问题上表现为<strong>群众史观</strong>与<strong>英雄史观</strong>的对立。</p>

<h4 id="44人民群众在创造历史过程中的决定作用p157">44.人民群众在创造历史过程中的决定作用（P157）</h4>
<p>  人民群众是社会物质财富的创造者，人民群众是社会精神财富的创造者，人民群众是社会改革的决定力量。</p>

<h4 id="45群众路线p159">45.群众路线（P159）</h4>
<p>  一切为了群众，一切依靠群众，从群众中来到群众中去。</p>

<hr />

<h3 id="第四章">第四章</h3>
<h4 id="46商品及其二因素p169-170">46.商品及其二因素（P169-170）</h4>
<p>  商品是用来交换能满足人的某种需要的劳动产品，具有使用价值和价值两因素或两种属性。<br />
价值是商品所持有的社会属性。</p>

<h4 id="47商品价值量的决定p171">47.商品价值量的决定（P171）</h4>
<p>  决定商品价值量的不是生产商品的个别劳动时间，而是<strong>社会必要劳动时间</strong>。</p>

<h4 id="48价值规律的表现形式p174">48.价值规律的表现形式（P174）</h4>
<p>  商品经济中价值规律的表现形式是商品的价格围绕商品的价值自发的波动。</p>

<h4 id="49资本原始积累的两个途径p186">49.资本原始积累的两个途径（P186）</h4>
<p>  一是用暴力手段剥夺农民的土地，二是用暴力手段掠夺货币财富。</p>

<h4 id="50资本主义生产过程的两重性p192">50.资本主义生产过程的两重性（P192）</h4>
<p>  资本主义生产过程具有二重性：<br />
  一方面生产物质资料的劳动过程；<br />
  另一方面是生产剩余价值的过程及价值增值过程。</p>

<h4 id="51剩余价值的含义p193">51.剩余价值的含义（P193）</h4>
<p>  剩余价值是雇佣工人所创造的，并被资本家无偿占有的，超过劳动力价值的那部分价值，他是雇佣工人劳动价值的凝结。</p>

<h4 id="52资本主义的基本矛盾p206">52.资本主义的基本矛盾（P206）</h4>
<p>  生产社会化和生产资料资本主义私人占有之间的矛盾，是资本主义的基本矛盾。</p>

<hr />

<h3 id="第五章">第五章</h3>
<h4 id="53资本主义发展的客观规律p220">53.资本主义发展的客观规律（P220）</h4>
<p>  自由竞争引起生产集中和资本集中生产集中和资本集中发展到一定阶段必然引起垄断，这是资本主义发展的客观规律。</p>

<h4 id="54金融寡头对国家机器的控制p223">54.金融寡头对国家机器的控制（P223）</h4>
<p>  金融寡头对国家机器的控制主要是通过<strong>同政府的“个人联合”</strong>来实现的。</p>

<h4 id="55垄断价格p224">55.垄断价格（P224）</h4>
<p>  垄断价格，包括<strong>垄断高价</strong>和<strong>垄断低价</strong>两种形式。</p>

<h4 id="56国家垄断资本主义的含义p225">56.国家垄断资本主义的含义（P225）</h4>
<p>  国家垄断资本主义是国家政权和私人垄断资本联合在一起的垄断资本主义。</p>

<h4 id="57金融垄断资本得以形成和壮大的重要制度条件p229">57.金融垄断资本得以形成和壮大的重要制度条件（P229）</h4>
<p>  <strong>金融自由化</strong>与<strong>金融创新</strong>是金融垄断资本得以形成和壮大的重要制度条件。</p>

<h4 id="58经济全球化的表现p235">58.经济全球化的表现（P235）</h4>
<p>  生产全球化，贸易全球化，金融全球化。</p>

<h4 id="59第二次世界大战后居主导地位的资本所有制形式p240">59.第二次世界大战后，居主导地位的资本所有制形式（P240）</h4>
<p>  法人资本所有制崛起并成为居主导地位的资本所有制形式。</p>

<h4 id="60第二次世界大战后资本主义发生变化的根本推动力量p244">60.第二次世界大战后资本主义发生变化的根本推动力量（P244）</h4>
<p>  <strong>科学技术革命</strong>和<strong>生产力的发展</strong>，是资本主义发生变化的根本推动力量</p>

<hr />

<h3 id="第六章">第六章</h3>
<h4 id="61空想社会主义发展到高级阶段的三个代表人物p259">61.空想社会主义发展到高级阶段的三个代表人物（P259）</h4>
<p>  法国的圣西门、傅立叶和英国的欧文。</p>

<h4 id="62社会主义从理想到现实的伟大飞跃p265">62.社会主义从理想到现实的伟大飞跃（P265）</h4>
<p>  十月革命实现了社会主义从理想到现实的伟大飞跃。</p>

<h4 id="63无产阶级是最先进最革命的阶级p274">63.无产阶级是最先进最革命的阶级（P274）</h4>
<p>  无产阶级是最先进最革命的阶级，肩负着推翻资本主义旧世界、建立社会主义和共产主义新世界的历史使命。</p>

<h4 id="64探索适合本国国情的发展道路p290-291">64.探索适合本国国情的发展道路（P290-291）</h4>
<p>  第一，探索社会主义发展道路，必须坚持对待马克思主义的科学态度。<br />
  第二，探索社会主义发展道路，必须坚持从当时当地的社会历史条件出发，坚持“走自己的路”。<br />
  第三，探索社会主义发展道路，必须充分吸收人类的一切文明成果。<br />
  发展社会主义不能照搬苏联社会主义的模式，照搬别国模式，从来不能成功，这是一个被历史反复证明了的颠扑不破的真理。</p>

<hr />

<h3 id="第七章">第七章</h3>
<h4 id="65预见未来社会的方法论原则p300-303多选">65.预见未来社会的方法论原则（P300-303）（多选）</h4>
<p>  在揭示人类社会发展一般规律的基础上指明社会发展的方向。<br />
  在剖析资本主义旧世界的过程中阐发未来新世界的特点。<br />
  在社会主义社会发展中不断深化对未来共产主义社会的认识。<br />
  立足于揭示未来社会的一般规律，而不对各种细节做具体描绘。</p>

<h4 id="66共产主义社会个人消费品的分配方式p306">66.共产主义社会个人消费品的分配方式（P306）</h4>
<p>  在共产主义社会，个人消费品的分配方式是“<strong>各尽所能，按需分配</strong>”。</p>

<h4 id="67马克思主义追求的根本价值目标p309">67.马克思主义追求的根本价值目标（P309）</h4>
<p>  <strong>实现人的自由而全面的发展</strong>是马克思主义追求的根本，价值目标也是共产主义社会的根本特征。</p>

<h4 id="68实现共产主义是历史发展的必然p312-313">68.实现共产主义是历史发展的必然（P312-313）</h4>
<p>  共产主义理想作为一种社会理想，是对人类社会发展规律认识的基础上，设想的社会目标。<br />
  遗产主义理想是一定会实现的，是以前的社会发展规律以及资本主义社会的基本矛盾发展为依据的。<br />
  社会主义运动的实践，特别是社会主义国家的兴起和不断发展已经并正在用事实证明共产主义理想实现的必然性。</p>]]></content><author><name>Ranok</name></author><category term="马克思主义基本原理" /><category term="期末考试" /><summary type="html"><![CDATA[马克思主义基本原理是指马克思主义政治经济学、辩证唯物主义和历史唯物主义以及科学社会主义。它是马克思主义科学体系的基本理论、基本范畴，是其立场、观点和方法的理论表达。]]></summary></entry><entry><title type="html">机器学习期末考试</title><link href="http://localhost:4000/machinelearning" rel="alternate" type="text/html" title="机器学习期末考试" /><published>2022-12-09T00:00:00+08:00</published><updated>2022-12-09T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-machineLearning</id><content type="html" xml:base="http://localhost:4000/machinelearning"><![CDATA[<p>今天的人工智能主要依赖的不再是符号知识表示和程序推理机制，现代 AI 而是建立在新的基础上，即机器学习。无论是传统的基于数学的机器学习模型或决策树，还是深度学习的神经网络架构，当今人工智能领域的大多数 AI 应用程序都是基于机器学习技术。</p>

<hr />

<h2 id="前言">前言</h2>
<p>机器学习是智能专业的专核心课，其科目本身的难度较高，不论是在于理论层面还是代码实现层面都有一定的难度。想要征服机器学习还是一件非常具有挑战性的事情。</p>

<p>本次博客整理了有关机器学习课程的期末考试重点，希望同学们可以获得一个好成绩。</p>

<hr />

<h2 id="问题一有关拟合的问题">问题一：有关拟合的问题</h2>
<h4 id="什么是过拟合和欠拟合">什么是过拟合和欠拟合？</h4>

<p>过拟合是指模型在训练集上表现很好，到了验证和测试阶段就很差，即模型的泛化能力很差。
欠拟合是指模型在训练集上表现的不好，以至于在验证和测试阶段表现的也比较差。</p>

<h4 id="如何解决过拟合与欠拟合">如何解决过拟合与欠拟合？</h4>
<h5 id="过拟合的解决方法">过拟合的解决方法：</h5>
<ol>
  <li>重新调整一下参数和超参数。</li>
  <li>对数据进行特征降维处理，有选择性的抛弃一些特征。</li>
  <li>降低模型的复杂度。</li>
  <li>使用正则化约束。</li>
</ol>

<h5 id="欠拟合的解决方法">欠拟合的解决方法：</h5>
<ol>
  <li>增加模型的复杂度，例如使用神经网络代替线性回归、用随机森林代替决策树。</li>
  <li>考虑选用更多更具有代表意义的特征的数据特征。</li>
  <li>重新调整一下参数和超参数。</li>
  <li>降低正则化约束。</li>
</ol>

<h4 id="决策树如何防止过拟合">决策树如何防止过拟合</h4>
<p>剪枝。</p>

<hr />
<h2 id="问题二回归模型与分类模型的区别是什么请举例说明">问题二：回归模型与分类模型的区别是什么？请举例说明。</h2>

<p>回归模型：是对连续变量，进行预测的模型，即回归问题是定量问题。<br />
回归模型问题的举例：对某城市房价预测、对某地区空气湿度的预测。</p>

<p>分类模型：是对离散变量、进行预测的模型，即分类问题是定类问题。<br />
分类模型问题的举例：对明天是否下雨的预测、判断病人是否患有某种疾病的预测。</p>

<hr />
<h2 id="问题三机器学习的四大问题是什么">问题三：机器学习的四大问题是什么？</h2>
<p>回归、分类、聚类、降维。</p>

<hr />
<h2 id="问题四机器学习的一般步骤需要以某一实物为例">问题四：机器学习的一般步骤。（需要以某一实物为例）</h2>
<h4 id="回归问题以披萨价格预测为例">回归问题以披萨价格预测为例。</h4>
<h5 id="明确任务收集数据">明确任务收集数据。</h5>
<p>在一定范围内的各个城市中随机选取若干家披萨店，作为初始数据。</p>
<h5 id="数据分析与预处理">数据分析与预处理。</h5>
<p>将数据特征初步定为以下几项：</p>

<p>比萨的尺寸、披萨的脂肪含量、披萨的制作成本、披萨的口味、披萨的品牌、披萨所在城市的GDP水平、生产披萨的披萨店的知名度。</p>

<p>分析这些特征是否出现缺失值，对缺失值较多的特征直接删除。对缺失值较少的使用平均值填补定量的特征（例如披萨的脂肪含量），使用众数填补定类的特征（例如披萨的口味）。</p>

<p>将定类数据数值化，方便后期计算。</p>

<p>使用灰色关联分析法有选择性地剔除关联度较小的几个特征，即进行降维与特征选择处理。</p>

<h5 id="模型训练">模型训练</h5>

<p>选择使用线性回归解决该回归问题。</p>

<h5 id="模型评估与参数调优">模型评估与参数调优</h5>

<p>R2评估，模型的优劣，当R2的值越接近1时模型性能越好。
使用k折交叉验证方法选取出最佳的学习率等参数并再次进行模型训练。</p>

<h5 id="模型应用">模型应用</h5>

<p>将训练模型保存下来，并公布用以推广。</p>

<hr />

<h2 id="问题五k折交叉验证的简述">问题五：k折交叉验证的简述。</h2>

<p>k折交叉验证常用于参数调优，使得更容易训练出较高性能的模型。</p>

<p>k折交叉验证的工作流程：<br /></p>
<ol>
  <li>将训练集随机地进行k块、并选出其中1块作为验证集。</li>
  <li>用其余k-1块的数据进行训练，并用验证集，计算出这一次的误差。</li>
  <li>重复k次以上步骤，每次选取不同的块作为验证集</li>
  <li>统计每一次计算得到的误差估计，并取平均值作为本次训练参数的最终指标。</li>
</ol>

<hr />

<h2 id="问题六模型的评估标准">问题六：模型的评估标准</h2>
<h4 id="回归问题的评估标准">回归问题的评估标准</h4>
<ol>
  <li>MSE（均方误差） 预测残差的平方和，数值越小越好。</li>
  <li>RMSE（平均绝对误差）是在MSE的基础上开根号计算得到，同样数值越小越好。</li>
  <li>MAE（平均绝对误差）预测残差的绝对值之和，值越小越好。</li>
  <li>R2 (R方分数)既考虑预测值与真值之间的差异又考虑问题本身与真值之间的差异。结果的约接近于1越好。
    <h4 id="分类问题的评估标准">分类问题的评估标准</h4>
  </li>
  <li>正确率（Accuracy）即被预测正确的样本在所有预测样本中的占比。</li>
  <li>召回率(TRR) 即在所有真的正类中被模型预测出来的比例。</li>
  <li>AUC值：AUC的概率意义是随机取一对正负样本，正样本得分大于负样本得分的概
 AUC的范围在[0, 1]之间，并且越接近1越好，越接近0.5属于乱猜</li>
</ol>

<hr />

<h2 id="问题七决策树的建立以ppt为例">问题七：决策树的建立（以ppt为例）</h2>
<h4 id="考察公式">考察公式：</h4>

<p>信息熵公式：\(H(X)=\sum_{i=1}^{n}p_i log_2^{\frac{1}{p_i}}=-\sum_{i=1}^{n}p_i log_2{p_i}\)<br />
信息增益公式：\(Gain(D,a)=Ent(D)-Ent(d|a)=Ent(D)-\sum_{v=1}^V \frac{D_v}{D}Ent(D_v)\)</p>

<h4 id="问题描述">问题描述</h4>

<p>如下图，第一列为论坛号码，第二列为性别，第三列为活跃度，最后一列用户是否流失。</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/1.png" alt="1.png" />
    </div>
    
</div>

<p>根据该图整理得到如下表格：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/2.png" alt="2.png" />
    </div>
    
</div>

<h4 id="整体熵为多少">整体熵为多少</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/3.png" alt="3.png" />
    </div>
    
</div>

<h5 id="计算按照性别划分的信息增益">计算按照性别划分的信息增益</h5>

<p>要计算性别的信息增益需要先计算性别的信息熵</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/3.png" alt="3.png" />
    </div>
    
</div>

<p>因此得到按照性别划分的信息增益为</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/4.png" alt="4.png" />
    </div>
    
</div>

<h4 id="计算按照活跃度划分的信息增益">计算按照活跃度划分的信息增益</h4>

<p>同样的，要计算活跃度的信息增益需要先计算活跃度的信息熵</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/5.png" alt="5.png" />
    </div>
    
</div>

<p>因此得到按照活跃度划分的信息增益为：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/6.png" alt="6.png" />
    </div>
    
</div>

<h4 id="比较两种特征对流失度的影响">比较两种特征对流失度的影响</h4>

<p>活跃度的信息增益比性别的信息增益大，也就是说，活跃度对用户流失的影响比性别大。</p>

<h4 id="做出决策树图形并说明理由">做出决策树图形并说明理由</h4>

<p>根据第三问的分析，活跃度的信息增益比性别的信息增益大所以要选用，活跃度作为决策树的根节点。最终结果如下所示：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/7.png" alt="7.png" />
    </div>
    
</div>

<hr />

<h2 id="问题八逻辑回归的优化目标函数是什么交叉熵中的两个概率是分布什么不确定">问题八：逻辑回归的优化目标函数是什么？交叉熵中的两个概率是分布什么？(不确定)</h2>

<p>逻辑回归的优化目标函数是:对数似然函数。 <br />
交叉熵的灵感概率是：真实分布，非真实分布。</p>

<h2 id="问题九简述k近邻的算法流程以及问题问题分析">问题九：简述k近邻的算法流程，以及问题问题分析</h2>
<h3 id="算法流程">算法流程</h3>
<ol>
  <li><strong>计算距离</strong>：计算已知类别数据集中的点与当前点之间的距离
2）<strong>排序</strong>：按距离递增次序排序
3）<strong>选择</strong>：选取与当前点距离最小的k个点
4）<strong>计算频次</strong>：统计前k个点所在的类别出现的频率
5）<strong>确定类别</strong>：返回前k个点出现频率最高的类别作为当前点的预测分类</li>
</ol>

<h3 id="计算题以ppt为例">计算题（以ppt为例）</h3>
<h4 id="考察公式-1">考察公式</h4>
<p>欧氏距离：平方和开根号 <br />
曼哈顿距离（城市街区距离）：绝对值的和</p>

<h3 id="提问">提问</h3>
<p>假设我们现在有几部电影，如何去预测序号9电影的类别？</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/8.png" alt="8.png" />
    </div>
    
</div>

<p>分别计算每个电影和被预测电影的距离，然后求解</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/9.png" alt="9.png" />
    </div>
    
</div>

<p>所以最终结果预测为喜剧片。</p>

<hr />

<h2 id="问题十标准化与归一化问题以ppt为例">问题十：标准化与归一化问题（以PPT为例）</h2>
<h4 id="归一化重点">归一化（重点）</h4>

<p><strong>归一化定义</strong>：通过对原始数据进行变换把数据映射到(默认为[0,1])之间</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/10.png" alt="10.png" />
    </div>
    
</div>

<p>作用于每一列，max为一列的最大值，min为一列的最小值，那么X’’为最终结果，mx，mi分别为指定区间值，默认mx为1，mi为0</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/11.png" alt="11.png" />
    </div>
    
</div>

<h4 id="标准化">标准化</h4>

<p>定义：通过对原始数据进行变换把数据变换到均值为0,标准差为1范围内</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/12.png" alt="12.png" />
    </div>
    
</div>

<p>其中，它作用于每一列，mean为平均值，σ为标准差</p>

<hr />

<h2 id="问题十一k均值k-means聚类的算法">问题十一：k均值（k-means）聚类的算法</h2>
<h4 id="流程">流程</h4>
<ol>
  <li>随机设置K个特征空间内的点作为初始的聚类中心</li>
  <li>对于其他每个点计算到K个中心的距离，未知的点选择最近的一个聚类中心点作为标记类别</li>
  <li>接着对着标记的聚类中心之后，重新计算出每个聚类的新中心点（平均值）</li>
  <li>如果计算得出的新中心点与原中心点一样（质心不再移动），那么结束，否则重新进行第二步过程</li>
</ol>

<h4 id="目标函数及其描述">目标函数及其描述：</h4>
<p>？？？</p>

<hr />

<h2 id="问题十二梯度下降法">问题十二：梯度下降法</h2>
<h4 id="梯度下降算法的作用">梯度下降算法的作用：</h4>

<p>梯度下降法是一个优化算法，可以递归地找到模型的最小值，从而找到在最优参数。</p>

<h4 id="需要处理的问题">需要处理的问题：</h4>

<ol>
  <li>学习率：需要在模型建立的速度和质量上做出权衡，学习率过大可能会导致最终结果不收敛，学习率过小会导致训练时间过长。</li>
  <li>方向：计算出当前点的梯度方向，并向下不断更新自己的位置。</li>
  <li>终止条件：考虑使用迭代次数、损失函数值到达一定范围之后终止。</li>
</ol>

<hr />

<h2 id="问题十三逻辑回归不确定">问题十三：逻辑回归（不确定）</h2>
<h4 id="损失函数">损失函数：</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/13.png" alt="13.png" />
    </div>
    
</div>

<h4 id="目标函数">目标函数</h4>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machinelearning/14.png" alt="14.png" />
    </div>
    
</div>

<h4 id="定义">定义：</h4>
<p>逻辑回归是机器学习中的一种分类模型，做二分类（1/0）任务，并给出相应概率。</p>
<h4 id="sigmoid函数">sigmoid函数</h4>
<p>sigmoid可以将数值压缩到[0,1]的范围内。</p>

<hr />

<h2 id="问题十四编程大题">问题十四：编程大题</h2>
<h4 id="线性回归以实验为例">线性回归（以实验为例）</h4>

<table>
  <thead>
    <tr>
      <th>序号</th>
      <th>直径（英寸）</th>
      <th>价格（ 美元）</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>6</td>
      <td>7</td>
    </tr>
    <tr>
      <td>2</td>
      <td>8</td>
      <td>9</td>
    </tr>
    <tr>
      <td>3</td>
      <td>10</td>
      <td>13</td>
    </tr>
    <tr>
      <td>4</td>
      <td>14</td>
      <td>17.5</td>
    </tr>
    <tr>
      <td>5</td>
      <td>18</td>
      <td>18</td>
    </tr>
  </tbody>
</table>

<h5 id="该线性回归是一个几元函数表达式是什么">该线性回归是一个几元函数，表达式是什么？</h5>
<p>是一个一元线性回归函数。<br />
表达式为：\(f(x) = w_1x_1 + b\)<br />
其中\(w_1\)表示的是“直径”特征的权重，\(x_1\)表示“直径”变量，\(b\)表示截距</p>

<h5 id="代码实现">代码实现</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LinearRegression</span>   <span class="c1"># 最小二乘法线性回归
</span><span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">X_train_old</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">18</span><span class="p">]).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Y_train_old</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mf">17.5</span><span class="p">,</span><span class="mi">18</span><span class="p">]).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_train_old</span><span class="p">,</span><span class="n">Y_train_old</span>

<span class="c1"># 因为数据较少所以没必要再单独划出测试集了
</span><span class="n">X_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X_train_old</span><span class="p">,</span><span class="n">Y_train_old</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="mi">33</span><span class="p">,</span><span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">)</span>
<span class="c1"># X_train,X_test,Y_train,Y_test = X_train_old,[],Y_train_old,[]
</span><span class="n">X_train</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_test</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">LinearRegression</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span><span class="n">Y_train</span><span class="p">)</span>

<span class="n">T_sim1</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

</code></pre></div></div>
<h5 id="逻辑回归以实验为例">逻辑回归（以实验为例）</h5>
<p>代码实现：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="nn">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span>
<span class="kn">from</span> <span class="nn">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>

<span class="c1"># 1.获取数据
</span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Sample code number'</span><span class="p">,</span> <span class="s">'Clump Thickness'</span><span class="p">,</span> <span class="s">'Uniformity of Cell Size'</span><span class="p">,</span> <span class="s">'Uniformity of Cell Shape'</span><span class="p">,</span>
                   <span class="s">'Marginal Adhesion'</span><span class="p">,</span> <span class="s">'Single Epithelial Cell Size'</span><span class="p">,</span> <span class="s">'Bare Nuclei'</span><span class="p">,</span> <span class="s">'Bland Chromatin'</span><span class="p">,</span>
                   <span class="s">'Normal Nucleoli'</span><span class="p">,</span> <span class="s">'Mitoses'</span><span class="p">,</span> <span class="s">'Class'</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="sa">r</span><span class="s">"breast-cancer-wisconsin.data"</span><span class="p">,</span><span class="n">names</span><span class="o">=</span><span class="n">names</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="n">x_train</span><span class="p">,</span> <span class="n">x_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">22</span><span class="p">)</span>
<span class="n">x_train</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>

<span class="n">estimator</span> <span class="o">=</span> <span class="n">LogisticRegression</span><span class="p">()</span>
<span class="n">estimator</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="n">y_predict</span> <span class="o">=</span> <span class="n">estimator</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">x_test</span><span class="p">)</span>
</code></pre></div></div>
<h2 id="问题十五随机森林">问题十五：随机森林</h2>
<h4 id="随机森林的算法流程随机森林bagging决策树">随机森林的算法流程（随机森林=Bagging+决策树）</h4>

<ol>
  <li>随机选取m条数据</li>
  <li>随机选取k个特征</li>
  <li>训练决策树</li>
  <li>重复1-3</li>
  <li>对上面的若决策树进行平权投票</li>
</ol>

<h4 id="bagging和boosting的区别">bagging和boosting的区别</h4>

<h5 id="区别一数据方面">区别一:数据方面</h5>
<ol>
  <li>Bagging：对数据进行采样训练；</li>
  <li>Boosting：根据前一轮学习结果调整数据的重要性。</li>
</ol>

<h5 id="区别二投票方面">区别二:投票方面</h5>
<ol>
  <li>Bagging：所有学习器平权投票；</li>
  <li>Boosting：对学习器进行加权投票。</li>
</ol>

<h5 id="区别三学习顺序">区别三:学习顺序</h5>
<ol>
  <li>Bagging的学习是并行的，每个学习器没有依赖关系；</li>
  <li>Boosting学习是串行，学习有先后顺序。</li>
</ol>

<h5 id="区别四主要作用">区别四:主要作用</h5>
<ol>
  <li>Bagging主要用于提高泛化性能（解决过拟合，也可以说降低方差）</li>
  <li>Boosting主要用于提高训练精度 （解决欠拟合，也可以说降低偏差）</li>
</ol>]]></content><author><name>Ranok</name></author><category term="机器学习" /><category term="期末考试" /><category term="python" /><summary type="html"><![CDATA[今天的人工智能主要依赖的不再是符号知识表示和程序推理机制，现代 AI 而是建立在新的基础上，即机器学习。无论是传统的基于数学的机器学习模型或决策树，还是深度学习的神经网络架构，当今人工智能领域的大多数 AI 应用程序都是基于机器学习技术。]]></summary></entry><entry><title type="html">机器学习三大基础库</title><link href="http://localhost:4000/machine" rel="alternate" type="text/html" title="机器学习三大基础库" /><published>2022-12-06T00:00:00+08:00</published><updated>2022-12-06T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-machine</id><content type="html" xml:base="http://localhost:4000/machine"><![CDATA[<p>机器学习是研究怎样使用计算机模拟或实现人类学习活动的科学，是人工智能中最具智能特征，最前沿的研究领域之一。自20世纪80年代以来，机器学习作为实现人工智能的途径，在人工智能界引起了广泛的兴趣，特别是近十几年来，机器学习领域的研究工作发展很快，它已成为人工智能的重要课题之一。机器学习不仅在基于知识的系统中得到应用，而且在自然语言理解、非单调推理、机器视觉、模式识别等许多领域也得到了广泛应用。一个系统是否具有学习能力已成为是否具有“智能”的一个标志。</p>

<hr />

<h2 id="前言">前言</h2>

<p>本次博客主要内容为以下三个python库</p>
<ul>
  <li>numpy</li>
  <li>pandas</li>
  <li>matplotlib</li>
</ul>

<p>前两个库<code class="language-plaintext highlighter-rouge">numpy</code>、<code class="language-plaintext highlighter-rouge">pandas</code>主要作用是对于数据存储与数据处理，并且广泛适用于很多机器学习的模型。而<code class="language-plaintext highlighter-rouge">matplotlib</code>是作图的好帮手，主要用户机器模型数据的可视化。</p>

<h2 id="numpy机器学习前缀知识">numpy（机器学习前缀知识）</h2>
<h4 id="属性">属性</h4>
<ol>
  <li>数组的维数：对象名.ndim</li>
  <li>数组的每个维度的数量：对象名.shape返回一个元组，元组中的数字表示该维度的长度。</li>
  <li>元素总个数：对象名.size</li>
  <li>成员的数据类型：对象名.dtype</li>
  <li>矩阵的转置：对象名.T</li>
  <li>对象名.flat 表示返回一个可以遍历所有元素的迭代器</li>
  <li>numpy.nan 表示无穷</li>
  <li>xxx</li>
</ol>

<h4 id="功能型小函数">功能型小函数</h4>

<ol>
  <li>numpy.sum 求和</li>
  <li>numpy.min 求最小值</li>
  <li>numpy.max 求最大值</li>
  <li>numpy.average 求平均值</li>
  <li>numpy.median 求中位数</li>
  <li>numpy.cumsum 返回前缀和向量</li>
  <li>numpy.diff 返回一个差分数组（少一位）</li>
  <li>numpy.argmin 求最小值的索引（从0开始计算）</li>
  <li>numpy.argmax 求最大值的索引（从0开始计算）</li>
  <li>numpy.nonzero返回n个向量，表示非元素所在位置的索引。</li>
  <li>numpy.sort 返回对数组排序的结果，如果是多维则只会对一维排序（每一行）。</li>
  <li>numpy.transpose 返回矩阵转置的结果</li>
  <li>对象名.flatten() 返回该对象的一维展开（即变成一个行向量）</li>
  <li>对象名.copy() 返回该对象的值拷贝（直接使用“=”是引用拷贝）注意不同于列表使用对象名[:]不能实现值拷贝，必须使用copy函数</li>
  <li>numpy.random.randn 按正太分布的概率产生随机数数组</li>
  <li>numpy.all(逻辑表达式) 逻辑表达式后半段 通过用这种方式将矩阵中所有数据参与计算返回一个bool判断矩阵中是不是所有元素都满足这个式子。</li>
  <li>numpy.any(数组对象)逻辑表达式后半段 通过用这种方式将矩阵中所有数据参与计算返回一个bool判断矩阵中是否存在某个元素满足这个式子。</li>
</ol>

<h4 id="示例以numpysum为例">示例（以numpy.sum为例）</h4>
<p>函数的默认计算区域是所有元素，当想要指定维度使用时需要使用axis来指定，axis从<br />
0开始计数。特别的对于一个矩阵来说，axis=0表示对每一列求和，axis=1表示对每一行求和。</p>
<h5 id="代码示例">代码示例：</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>
<h5 id="程序运行截图">程序运行截图：</h5>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]]</span><span class="w">
</span><span class="mi">6</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">5</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h4 id="矩阵索引">矩阵索引</h4>
<p>以二维数组（矩阵）为例</p>

<h5 id="访问单元素的方法">访问单元素的方法</h5>
<p><code class="language-plaintext highlighter-rouge">a[i][j]</code>，或 <code class="language-plaintext highlighter-rouge">a[i,j]</code></p>

<h5 id="访问多元素的方法">访问多元素的方法</h5>
<p>访问第<code class="language-plaintext highlighter-rouge">i+1</code>行的所有元素<br />
<code class="language-plaintext highlighter-rouge">a[i,:]</code><br />
访问第<code class="language-plaintext highlighter-rouge">j+1</code>列的所有元素<br />
<code class="language-plaintext highlighter-rouge">a[:,j]</code></p>

<h4 id="矩阵初始化-array">矩阵初始化 array</h4>
<p>函数签名：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span><span class="p">(</span><span class="n">p_object</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>
<p>上面的构造器接受以下参数：</p>
<ol>
  <li>object 任何暴露数组接口方法的对象都会返回一个数组或任何（嵌套）序列。</li>
  <li>dtype 数组的所需数据类型，可选。</li>
  <li>copy 可选，默认为true，对象是否被复制。</li>
  <li>order C（按行）、F（按列）或A（任意，默认）。</li>
  <li>subok 默认情况下，返回的数组被强制为基类数组。 如果为true，则返回子类。</li>
  <li>ndmin 指定返回数组的最小维数。</li>
</ol>

<p>示例：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">array</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]].</span><span class="n">numpy</span><span class="p">.</span><span class="n">int64</span><span class="p">)</span>
</code></pre></div></div>
<h4 id="滤波器clip">滤波器clip</h4>

<h5 id="函数签名">函数签名：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">clip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">a_min</span><span class="p">,</span> <span class="n">a_max</span><span class="p">,</span> <span class="n">out</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>
<p>将数组中小于a_min的值取a_min，将数组中大于a_max的值取a_max<br />
代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">clip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：
<code class="language-plaintext highlighter-rouge">[5 5 5 5 5 5 6 7 8 9 9 9]</code></p>

<h4 id="创建一个全1数组ones">创建一个全1数组ones</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ones</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="s">'C'</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">like</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</code></pre></div></div>
<p>示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">noes</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># 创建一个2叶3行4列的全1矩阵
</span></code></pre></div></div>

<h4 id="创建一个全0数组zeros">创建一个全0数组zeros</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">zeros</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="s">'C'</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>

<p>示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="c1"># 创建一个2叶3行4列的全0矩阵。
</span></code></pre></div></div>

<h4 id="创建有序数组arange">创建有序数组arange</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">arange</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>
<h5 id="示例1创建一个09的行向量">示例1（创建一个0~9的行向量）：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：<code class="language-plaintext highlighter-rouge">[0 1 2 3 4 5 6 7 8 9]</code></p>

<h5 id="示例2创建一个59的行向量">示例2（创建一个5~9的行向量）：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arenge</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：<code class="language-plaintext highlighter-rouge">[5 6 7 8 9]</code></p>

<h5 id="示例3创建一个以3为步长110的行向量">示例3（创建一个以3为步长1~10的行向量）</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：<code class="language-plaintext highlighter-rouge">[ 1  4  7  10]</code></p>

<h5 id="示例4创建一个09的2行5列的矩阵">示例4（创建一个0~9的2行5列的矩阵）</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span> <span class="c1"># 规模必须与元素个数相匹配
</span></code></pre></div></div>
<p>程序输出：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">0</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">5</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">7</span><span class="w"> </span><span class="mi">8</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<h4 id="创建一个均匀划分的线段-linspace">创建一个均匀划分的线段 linspace</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">linspace</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">,</span> <span class="n">num</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">endpoint</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">retstep</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="nb">type</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</code></pre></div></div>
<p>作用：以start为开始以stop结束以num为划分次数创建一个行向量。</p>

<h5 id="示例1一般示例">示例1（一般示例）：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="err">，</span><span class="mi">10</span><span class="err">，</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：
<code class="language-plaintext highlighter-rouge">[ 0. 10.]</code></p>

<h5 id="示例2重组元素为一个25的矩阵">示例2（重组元素为一个2*5的矩阵）</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numpy</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>
<p>程序输出：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="w"> </span><span class="mi">0</span><span class="err">.</span><span class="w">          </span><span class="mf">1.11111111</span><span class="w">  </span><span class="mf">2.22222222</span><span class="w">  </span><span class="mf">3.33333333</span><span class="w">  </span><span class="mf">4.44444444</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="w"> </span><span class="mf">5.55555556</span><span class="w">  </span><span class="mf">6.66666667</span><span class="w">  </span><span class="mf">7.77777778</span><span class="w">  </span><span class="mf">8.88888889</span><span class="w"> </span><span class="mi">10</span><span class="err">.</span><span class="w">        </span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<h4 id="numpy的运算">numpy的运算</h4>
<h5 id="矩阵加减法">矩阵加减法：</h5>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="mi">18</span><span class="w"> </span><span class="mi">27</span><span class="w"> </span><span class="mi">36</span><span class="p">]</span><span class="w">
</span><span class="p">[</span><span class="mi">11</span><span class="w"> </span><span class="mi">22</span><span class="w"> </span><span class="mi">33</span><span class="w"> </span><span class="mi">44</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h5 id="矩阵点乘">矩阵点乘：</h5>
<h6 id="代码示例1矩阵点乘">代码示例1（矩阵点乘）：</h6>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：<code class="language-plaintext highlighter-rouge">[ 10  40  90 160]</code></p>

<h6 id="代码示例2矩阵乘数字">代码示例2（矩阵乘数字）：</h6>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：<code class="language-plaintext highlighter-rouge">[ 50 100 150 200]</code></p>

<h5 id="矩阵乘法">矩阵乘法：</h5>
<h6 id="示例1使用npdot函数实现矩阵乘法">示例1（使用np.dot函数实现矩阵乘法）</h6>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="n">c_dot</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
<span class="n">d_dot</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c_dot</span><span class="p">,</span><span class="n">d_dot</span><span class="p">,</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">14</span><span class="p">]]</span><span class="w">
</span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">6</span><span class="p">]</span><span class="w"> 
 </span><span class="p">[</span><span class="mi">3</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>
<h6 id="示例二使用符号实现矩阵乘法">示例二（使用@符号实现矩阵乘法）：</h6>

<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">@</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="o">@</span><span class="n">a</span><span class="p">,</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">14</span><span class="p">]]</span><span class="w">
</span><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">2</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">6</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">3</span><span class="w"> </span><span class="mi">6</span><span class="w"> </span><span class="mi">9</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>
<h5 id="数组的逻辑判断">数组的逻辑判断：</h5>

<p>数组可以直接进行逻辑判断，其返回值为与元素组同规模的bool型结果数组。
可以使用对象[逻辑表达式] 来过滤符合条件的项，返回一个行向量。</p>

<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">((</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">s</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="bp">True</span>  <span class="bp">True</span>  <span class="bp">True</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span> <span class="bp">False</span><span class="p">]</span>
<span class="p">[</span><span class="mf">0.50784044</span> <span class="mf">0.51138057</span> <span class="mf">0.75612031</span> <span class="mf">0.61457462</span> <span class="mf">0.9712732</span>  <span class="mf">0.79497591</span><span class="p">]</span>
</code></pre></div></div>
<h5 id="矩阵元素的函数运算">矩阵元素的函数运算：</h5>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span> <span class="mf">0.</span>          <span class="mf">0.84147098</span>  <span class="mf">0.90929743</span>  <span class="mf">0.14112001</span> <span class="o">-</span><span class="mf">0.7568025</span>  <span class="o">-</span><span class="mf">0.95892427</span>
 <span class="o">-</span><span class="mf">0.2794155</span>   <span class="mf">0.6569866</span>   <span class="mf">0.98935825</span>  <span class="mf">0.41211849</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="创建一个元素值在01之间的随机矩阵">创建一个元素值在0~1之间的随机矩阵</h5>
<h6 id="示例创建一个元素值在01之间的2行4列的随机矩阵">示例（创建一个元素值在0~1之间的2行4列的随机矩阵）：</h6>
<p>代码示例：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mf">0.24853676</span><span class="w"> </span><span class="mf">0.47803948</span><span class="w"> </span><span class="mf">0.04436044</span><span class="w"> </span><span class="mf">0.92552742</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mf">0.61756337</span><span class="w"> </span><span class="mf">0.31913713</span><span class="w"> </span><span class="mf">0.83677922</span><span class="w"> </span><span class="mf">0.51923448</span><span class="p">]]</span><span class="w">
</span></code></pre></div></div>

<h4 id="合并数组">合并数组</h4>
<h5 id="上下合并函数签名">上下合并函数签名：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">vstack</span><span class="p">(</span><span class="n">tup</span><span class="p">):</span>
</code></pre></div></div>
<h5 id="左右合并函数签名">左右合并函数签名：</h5>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hstack</span><span class="p">(</span><span class="n">tup</span><span class="p">):</span>
</code></pre></div></div>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)))</span>
</code></pre></div></div>
<p>程序运行截图：</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="p">]</span><span class="w">
 </span><span class="p">[</span><span class="mi">4</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">8</span><span class="p">]]</span><span class="w">
</span><span class="p">[</span><span class="mi">1</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="mi">5</span><span class="w"> </span><span class="mi">8</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>
<h4 id="数组分割-split-or-array_split">数组分割 split or array_split</h4>
<h5 id="等量数组分割-split">等量数组分割 split</h5>

<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">indices_or_sections</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</code></pre></div></div>
<p>注意：axis表示对照切割的维度，例如对于矩阵而言axis=0表示横向切割，axis=1表示纵向切割，切割必须是对等切割否则报错。<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"纵向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"横向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/1.png" alt="1.png" />
    </div>
    
</div>

<h5 id="不等量数组分割-array_split">不等量数组分割 array_split</h5>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">array_split</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">indices_or_sections</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</code></pre></div></div>
<p>注意：这里与函数split最大的区别就是可以实现不等分的分法。前面等分，后面几项少分。<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">12</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"纵向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"横向切割"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array_split</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/2.png" alt="2.png" />
    </div>
    
</div>

<h2 id="pandas机器学习前缀知识">pandas（机器学习前缀知识）</h2>
<h4 id="属性-1">属性</h4>
<ol>
  <li>dtypes 获取所有列的数据格式</li>
  <li>columns 获取所有列名</li>
  <li>values 去除行名和列名，返回所有的内容，返回对象是numpy.ndarry。</li>
  <li>T 获得矩阵的转置（列名和行名也会一起转）。
    <h5 id="功能型小函数-1">功能型小函数</h5>
  </li>
  <li>fillna(x) 将序列中出现的nan转变为x</li>
  <li>isnull返回一个bool矩阵当原矩阵中该数值为nan时为true，非nan数据时为false。可以与numpy.any，numpy.all配套使用。</li>
  <li>读取csv文件pd.read_csv(文件名)</li>
</ol>

<h4 id="初始化矩阵">初始化矩阵</h4>
<h5 id="创建矩阵-series">创建矩阵 Series</h5>
<p>创建方式类似于numpy<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/3.png" alt="3.png" />
    </div>
    
</div>

<p>定义有名称的数据 DataFrame<br />
说明：<br />
index表示行标题，columns表示列标题，默认名称为从0开始的有序数列<br />
注意：每一行对应的数据数量要保持一致。<br /></p>
<h5 id="示例1使用序列创建">示例1（使用序列创建）</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">mport</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">s</span> <span class="o">=</span> 
<span class="n">d</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'x'</span><span class="p">,</span><span class="s">'y'</span><span class="p">,</span><span class="s">'x'</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图:</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/4.png" alt="4.png" />
    </div>
    
</div>

<h5 id="示例2使用字典创建">示例2（使用字典创建）</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.2</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/5.png" alt="5.png" />
    </div>
    
</div>

<h4 id="数组访问">数组访问</h4>
<h5 id="loc-名称表示法">loc （名称）表示法</h5>
<p>说明：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">loc</span><span class="p">[</span> <span class="p">[</span><span class="nx">行名序列</span><span class="p">]</span><span class="err">，</span><span class="p">[</span><span class="nx">列名序列</span><span class="p">]</span> <span class="p">]</span><span class="nx">直接访问</span>
<span class="nx">loc</span><span class="p">[</span> <span class="nx">行名序列i</span><span class="err">：</span><span class="nx">行名序列j</span><span class="err">，</span><span class="nx">列名序列i</span><span class="err">：</span><span class="nx">列名序列j</span> <span class="p">]</span><span class="nx">切片访问</span><span class="err">（</span><span class="nx">切片是闭区间</span><span class="err">）</span>
</code></pre></div></div>
<p>两者可以混合使用。</p>

<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单个数据访问'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"20221002"</span><span class="p">,</span><span class="s">'a'</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行单列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'20221002'</span><span class="p">,</span><span class="s">'20221001'</span><span class="p">],</span><span class="s">'b'</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'20221002'</span><span class="p">,[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[[</span><span class="s">'20221002'</span><span class="p">,</span><span class="s">'20221001'</span><span class="p">],[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行多列切片访问'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'20221001'</span><span class="p">:</span><span class="s">'20221002'</span><span class="p">,[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/6.png" alt="6.png" />
    </div>
    
</div>

<h5 id="iloc下标表示法">iloc（下标）表示法</h5>
<p>说明：<br />
使用方式等同于loc但是序列名变成了索引号（从0开始计数）（不同于loc的是使用切片表示法时是左开右闭区间）<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单个数据访问'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行单列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'单行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="mi">3</span><span class="p">],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'多行多列'</span><span class="p">,</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">,[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">]],</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/7.png" alt="7.png" />
    </div>
    
</div>

<h5 id="访问一列">访问一列</h5>
<p>访问方式：<br /></p>

<p>对象名[列名]（适用于所有情况的访问方式）<br />
对象名.列名（这种访问方式仅适用于标题为字符串型的情况）</p>

<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="s">'a'</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/8.png" alt="8.png" />
    </div>
    
</div>

<h5 id="访问一行数据-loc">访问一行数据 loc</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"20221002"</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/9.png" alt="9.png" />
    </div>
    
</div>

<h5 id="访问多行数据">访问多行数据</h5>

<p>多行数据直接访问语法：<br />
<code class="language-plaintext highlighter-rouge">对象名[start:end]</code> 这里的start、end既可以是数字用于表示序列的索引，当行名不是整数型时也可以直接使用行名（行名可以是字符串）</p>

<h4 id="数组修改">数组修改</h4>
<p>说明：<br />
与赋值相似，对已存在的数值进行修改就是修改，对不存在的数据就是添加可以通过修改不存在的行列使得数据的行列增加（未知数据用NAN代替）<br />
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"修改数值"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">a</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"增加行"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">'new_index'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"增加列"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="s">"new_columns"</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"同时增加行和列"</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">8</span><span class="p">,</span><span class="s">'f'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/10.png" alt="10.png" />
    </div>
    
</div>

<h4 id="删除行列-dropna">删除行列 dropna</h4>
<p>说明：</p>

<p><code class="language-plaintext highlighter-rouge">axis = 0</code> 时表示删除行，1表示删除列</p>

<p><code class="language-plaintext highlighter-rouge">how</code>参数有两个值：</p>

<ul>
  <li>“any”：如果存在任何NAN值，则删除该行或列。</li>
  <li>“all”：如果所有值都为NAN值，则删除该行或列。</li>
</ul>

<p>注意：<code class="language-plaintext highlighter-rouge">dropna</code> 只是返回修改后的结果不会改变原本的值
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"axis == 0 时表示删除行，1表示删除列"</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'all'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'all'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'any'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/11.png" alt="11.png" />
    </div>
    
</div>

<h4 id="读写excle文件-read_excle-or-to_excle">读写excle文件 read_excle or .to_excle</h4>
<p>注意：<br /></p>

<p><code class="language-plaintext highlighter-rouge">read_excle</code> 得到的是一个<code class="language-plaintext highlighter-rouge">pandas</code>对象，之前数据访问修改删除等操作依然成立。
<code class="language-plaintext highlighter-rouge">to_excle</code>创建时会添加一列行名，可以使用<code class="language-plaintext highlighter-rouge">index=False</code> 去除行名的添加。</p>
<h4 id="脚本编程">脚本编程</h4>
<h5 id="逻辑表达式筛选">逻辑表达式筛选：</h5>

<p>使用对象名[逻辑表达式]方式筛选。
代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">date_range</span><span class="p">(</span><span class="s">'20221001'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="n">dates</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'c'</span><span class="p">,</span> <span class="s">'d'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'第0列数据大于0的数据有：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/12.png" alt="12.png" />
    </div>
    
</div>

<h4 id="数据分析-describe">数据分析 describe</h4>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span><span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mf">6.2</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">describe</span><span class="p">(),</span><span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/13.png" alt="13.png" />
    </div>
    
</div>

<h4 id="排序-sort_index--sort_values">排序 sort_index &amp; sort_values</h4>
<h5 id="sort_index-对行列名排序">sort_index 对行列名排序</h5>
<p>说明：<br />
<code class="language-plaintext highlighter-rouge">axis = 0</code>表示对行名进行排序，1表示对列名进行排序。<br />
排序默认升序排序，当ascending = True 表示倒序排序<br />
函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sort_index</span><span class="p">(</span>
    <span class="bp">self</span><span class="p">,</span>
    <span class="n">axis</span><span class="p">:</span> <span class="n">Axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">level</span><span class="p">:</span> <span class="n">Level</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">ascending</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="nb">int</span> <span class="o">|</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">bool</span> <span class="o">|</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">inplace</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"quicksort"</span><span class="p">,</span>
    <span class="n">na_position</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"last"</span><span class="p">,</span>
    <span class="n">sort_remaining</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">ignore_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">key</span><span class="p">:</span> <span class="n">IndexKeyFunc</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">):</span>
</code></pre></div></div>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mf">6.2</span><span class="p">]</span>
<span class="p">})</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">sort_index</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span> <span class="n">sep</span><span class="o">=</span><span class="s">'</span><span class="se">\n\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/14.png" alt="14.png" />
    </div>
    
</div>

<h5 id="sort_values对数据列排序">sort_values对数据列排序</h5>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sort_values</span><span class="p">(</span>  <span class="c1"># type: ignore[override]
</span>    <span class="bp">self</span><span class="p">,</span>
    <span class="n">by</span><span class="p">,</span>
    <span class="n">axis</span><span class="p">:</span> <span class="n">Axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">inplace</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"quicksort"</span><span class="p">,</span>
    <span class="n">na_position</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"last"</span><span class="p">,</span>
    <span class="n">ignore_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">key</span><span class="p">:</span> <span class="n">ValueKeyFunc</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">):</span>
</code></pre></div></div>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">s</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">"a"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="s">"b"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
    <span class="s">"c"</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="mi">84</span><span class="p">],</span>
    <span class="s">"d"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mf">6.2</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/15.png" alt="15.png" />
    </div>
    
</div>

<h4 id="合并数组-merge">合并数组 merge</h4>
<p>说明：<br />
<code class="language-plaintext highlighter-rouge">how</code> 有4个取值：inner（默认）、outer、left、right 分别表示内连接、外连接、左外连接、右外连接。
<code class="language-plaintext highlighter-rouge">on</code> 表示连接是使用的列（类似于外键）
<code class="language-plaintext highlighter-rouge">indictor == True</code>时，在结果列中增加一列以显示每一个数据连接的方式默认为False，可以给indictor赋予字符串，以表示新列的名称
<code class="language-plaintext highlighter-rouge">left_	index &amp; right_index</code>同时为True时可以按行名合并，默认都为False，两者必须同为True才能生效。
<code class="language-plaintext highlighter-rouge">suffixex</code>当给其一个包含两个字符串的元组时，合并时若出现同名字段，则会加上这两个字符串后缀。
函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">merge</span><span class="p">(</span>
    <span class="n">left</span><span class="p">:</span> <span class="n">DataFrame</span> <span class="o">|</span> <span class="n">Series</span><span class="p">,</span>
    <span class="n">right</span><span class="p">:</span> <span class="n">DataFrame</span> <span class="o">|</span> <span class="n">Series</span><span class="p">,</span>
    <span class="n">how</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="s">"inner"</span><span class="p">,</span>
    <span class="n">on</span><span class="p">:</span> <span class="n">IndexLabel</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">left_on</span><span class="p">:</span> <span class="n">IndexLabel</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">right_on</span><span class="p">:</span> <span class="n">IndexLabel</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">left_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">right_index</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">sort</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">suffixes</span><span class="p">:</span> <span class="n">Suffixes</span> <span class="o">=</span> <span class="p">(</span><span class="s">"_x"</span><span class="p">,</span> <span class="s">"_y"</span><span class="p">),</span>
    <span class="n">copy</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">indicator</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">validate</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="n">DataFrame</span><span class="p">:</span>
</code></pre></div></div>

<h5 id="案例演示">案例演示</h5>
<h6 id="示例1依照指定列进行合并">示例1（依照指定列进行合并）：</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">,</span> <span class="s">'k3'</span><span class="p">],</span>
    <span class="s">'A'</span><span class="p">:</span> <span class="p">[</span><span class="s">'A0'</span><span class="p">,</span> <span class="s">'A1'</span><span class="p">,</span> <span class="s">'A2'</span><span class="p">,</span> <span class="s">'A3'</span><span class="p">],</span>
    <span class="s">'B'</span><span class="p">:</span> <span class="p">[</span><span class="s">'B0'</span><span class="p">,</span> <span class="s">'B1'</span><span class="p">,</span> <span class="s">'B2'</span><span class="p">,</span> <span class="s">'B3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key'</span><span class="p">:[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">,</span> <span class="s">'k3'</span><span class="p">],</span>
    <span class="s">'C'</span><span class="p">:[</span><span class="s">'C0'</span><span class="p">,</span><span class="s">'C1'</span><span class="p">,</span><span class="s">'C2'</span><span class="p">,</span><span class="s">'C2'</span><span class="p">],</span>
    <span class="s">'D'</span><span class="p">:[</span><span class="s">'D0'</span><span class="p">,</span><span class="s">'D1'</span><span class="p">,</span><span class="s">'D2'</span><span class="p">,</span><span class="s">'D3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="s">'key'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/16.png" alt="16.png" />
    </div>
    
</div>

<h6 id="示例2依照多列进行合并">示例2依照多列进行合并</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">left</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key1'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">],</span>
    <span class="s">'key2'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">],</span>
    <span class="s">'A'</span><span class="p">:</span> <span class="p">[</span><span class="s">'A0'</span><span class="p">,</span> <span class="s">'A1'</span><span class="p">,</span> <span class="s">'A2'</span><span class="p">,</span> <span class="s">'A3'</span><span class="p">],</span>
    <span class="s">'B'</span><span class="p">:</span> <span class="p">[</span><span class="s">'B0'</span><span class="p">,</span> <span class="s">'B1'</span><span class="p">,</span> <span class="s">'B2'</span><span class="p">,</span> <span class="s">'B3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="n">right</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'key1'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">],</span>
    <span class="s">'key2'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">,</span> <span class="s">'k0'</span><span class="p">],</span>
    <span class="s">'C'</span><span class="p">:</span> <span class="p">[</span><span class="s">'C0'</span><span class="p">,</span> <span class="s">'C1'</span><span class="p">,</span> <span class="s">'C2'</span><span class="p">,</span> <span class="s">'C2'</span><span class="p">],</span>
    <span class="s">'D'</span><span class="p">:</span> <span class="p">[</span><span class="s">'D0'</span><span class="p">,</span> <span class="s">'D1'</span><span class="p">,</span> <span class="s">'D2'</span><span class="p">,</span> <span class="s">'D3'</span><span class="p">]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
<span class="c1"># how = ['left','right','inner','outer']
</span><span class="k">print</span><span class="p">(</span><span class="s">'内连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'inner'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'全外连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'左外连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'left'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'右外连接'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="s">'key1'</span><span class="p">,</span><span class="s">'key2'</span><span class="p">],</span><span class="n">how</span><span class="o">=</span><span class="s">'right'</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/17.png" alt="17.png" />
    </div>
    
</div>

<h6 id="示例3显示每一列的合并方式">示例3（显示每一列的合并方式）</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col1'</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="s">'col_left'</span><span class="p">:[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">]})</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col1'</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">],</span><span class="s">'col_right'</span><span class="p">:[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">]})</span>
<span class="k">print</span><span class="p">(</span><span class="n">df1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df2</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="s">'col1'</span><span class="p">,</span><span class="n">indicator</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/18.png" alt="18.png" />
    </div>
    
</div>

<h6 id="示例4依照行名进行合并">示例4（依照行名进行合并）</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">left</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'A'</span><span class="p">:[</span><span class="s">'A0'</span><span class="p">,</span><span class="s">'A1'</span><span class="p">,</span><span class="s">'A2'</span><span class="p">],</span>
    <span class="s">'B'</span><span class="p">:[</span><span class="s">'B0'</span><span class="p">,</span><span class="s">'B1'</span><span class="p">,</span><span class="s">'B2'</span><span class="p">]},</span>
    <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'K0'</span><span class="p">,</span><span class="s">'K1'</span><span class="p">,</span><span class="s">'K2'</span><span class="p">])</span>
<span class="n">right</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span>
    <span class="s">'C'</span><span class="p">:[</span><span class="s">'C0'</span><span class="p">,</span><span class="s">'C2'</span><span class="p">,</span><span class="s">'C3'</span><span class="p">],</span>
    <span class="s">'D'</span><span class="p">:[</span><span class="s">'D0'</span><span class="p">,</span><span class="s">'D2'</span><span class="p">,</span><span class="s">'D3'</span><span class="p">]},</span>
    <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="s">'K0'</span><span class="p">,</span><span class="s">'K2'</span><span class="p">,</span><span class="s">'K3'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">left_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/19.png" alt="19.png" />
    </div>
    
</div>

<h6 id="示例5同名字段加后缀">示例5（同名字段加后缀）</h6>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">boys</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'k'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'k1'</span><span class="p">,</span> <span class="s">'k2'</span><span class="p">],</span> <span class="s">'age'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]})</span>
<span class="n">girls</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'k'</span><span class="p">:</span> <span class="p">[</span><span class="s">'K0'</span><span class="p">,</span> <span class="s">'K1'</span><span class="p">,</span> <span class="s">'K2'</span><span class="p">],</span> <span class="s">'age'</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]})</span>
<span class="k">print</span><span class="p">(</span><span class="n">boys</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">girls</span><span class="p">)</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">merge</span><span class="p">(</span><span class="n">boys</span><span class="p">,</span><span class="n">girls</span><span class="p">,</span><span class="n">on</span><span class="o">=</span><span class="s">'k'</span><span class="p">,</span><span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="s">'_boy'</span><span class="p">,</span><span class="s">'_girl'</span><span class="p">),</span><span class="n">how</span><span class="o">=</span><span class="s">'outer'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/20.png" alt="20.png" />
    </div>
    
</div>

<h4 id="合并数组-concat">合并数组 concat</h4>
<p>说明：<br />
<code class="language-plaintext highlighter-rouge">axis == 0</code>(默认) 表示竖向的合并，1表示横向合并<br />
<code class="language-plaintext highlighter-rouge">ignore == True</code>表示纵向合并时忽略原行序列从新有序定义行标号，默认False<br />
<code class="language-plaintext highlighter-rouge">join</code> 表示纵向连接方式默认为<code class="language-plaintext highlighter-rouge">outer</code>外连接（默认），还可以选择 <code class="language-plaintext highlighter-rouge">inner</code> 内连接<br />
注意：当竖向合并时，列名不一致（不包括次序不一致）将产生新列（全外连接）</p>

<h5 id="示例1">示例1</h5>
<p>代码展示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">0</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df3</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">,</span><span class="n">df3</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/21.png" alt="21.png" />
    </div>
    
</div>

<h5 id="示例2纵向连接两种连接的比较">示例2（纵向连接，两种连接的比较）</h5>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">,</span><span class="s">'e'</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">join</span><span class="o">=</span><span class="s">'outer'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">join</span><span class="o">=</span><span class="s">'inner'</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/22.png" alt="22.png" />
    </div>
    
</div>

<h5 id="示例三横向连接的4种方式比较">示例三（横向连接的4种方式比较）</h5>
<p>注意：
代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">])</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span><span class="o">*</span><span class="mi">1</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">,</span><span class="s">'d'</span><span class="p">,</span><span class="s">'e'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"全外连接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"左外链接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df1</span><span class="p">.</span><span class="n">index</span><span class="p">)],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"右外连接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df2</span><span class="p">,</span><span class="n">df1</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df2</span><span class="p">.</span><span class="n">index</span><span class="p">)],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"内连接"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df2</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df1</span><span class="p">.</span><span class="n">reindex</span><span class="p">(</span><span class="n">df2</span><span class="p">.</span><span class="n">index</span><span class="p">).</span><span class="n">index</span><span class="p">)],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/23.png" alt="23.png" />
    </div>
    
</div>

<h4 id="数据筛选query">数据筛选query</h4>
<p><code class="language-plaintext highlighter-rouge">DataFrame.query(expr, inplace=False, **kwargs)</code>，用于通过boolean表达式来查询dataframe中的列。
主要参数为expr，它是字符串表达式，有如下说明：</p>

<p>可以引用变量，方法是在变量前添加一个@字符，例如@a + b。<br />
可以在反引号内将包含空格或运算符的列名引用起来。 这样，您还可以转义以数字开头或Python关键字的名称。 基本上是无效的Python标识符。</p>

<h2 id="matplotlib图像绘制">matplotlib（图像绘制）</h2>

<h4 id="函数应用">函数应用</h4>
<p>函数签名：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">scalex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">scaley</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</code></pre></div></div>

<ul>
  <li>x: 横坐标，可选的， 默认为 range(len(y))</li>
  <li>y: 纵坐标，即数据项，可以是一维或多维的列表或数组</li>
  <li>markersize: 标记大小</li>
  <li>color: 线条颜色</li>
  <li>marker: 数据标记的形状，默认是没有标记</li>
  <li>linestyle: 线条样式，默认为实线
代码演示：</li>
</ul>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="c1"># 以下两种写法等价，
</span><span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'green'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'dashed'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="c1"># plt.flot(x, y, 'go--'，linewidth=2, markersize=12)
# 可以在一个画布上绘制多张图片，
</span><span class="n">y1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'red'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'solid'</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/24.png" alt="24.png" />
    </div>
    
</div>

<h4 id="重要示例">重要示例</h4>

<h5 id="示例1创建4个折线图">示例1（创建4个折线图）</h5>
<p>说明：使用plot实现，其中show函数主要实现图像的展示工作。<br />
代码演示：</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">index</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span><span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s">"ABCD"</span><span class="p">))</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">cumsum</span><span class="p">()</span>    <span class="c1"># 累加
</span><span class="n">data</span><span class="p">.</span><span class="n">plot</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/25.png" alt="25.png" />
    </div>
    
</div>

<h5 id="示例二创建2个散点图">示例二（创建2个散点图）</h5>
<p>代码演示：</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randn</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="n">index</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">1000</span><span class="p">),</span><span class="n">columns</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="s">"ABCD"</span><span class="p">))</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">cumsum</span><span class="p">()</span>    <span class="c1"># 累加
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'A'</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">'B'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'DarkBlue'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">"Class 1"</span><span class="p">)</span>
<span class="n">data</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'A'</span><span class="p">,</span><span class="n">y</span><span class="o">=</span><span class="s">'C'</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="s">'DarkGreen'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="s">"Class 2"</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<p>程序运行截图：</p>

<div class="row">
    
    <div class="column">
        <img class="single" src="/assets/img/blog-img/machine/26.png" alt="26.png" />
    </div>
    
</div>

<h4 id="日常问题">日常问题</h4>
<h5 id="图形中文乱码">图形中文乱码</h5>

<p>解决方法：更改字体防止图形乱码</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">pl</span>
<span class="n">pl</span><span class="p">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s">'font.sans-serif'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">'SimHei'</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name>Ranok</name></author><category term="机器学习" /><category term="python" /><category term="numpy" /><category term="pandas" /><category term="matplotlib" /><summary type="html"><![CDATA[机器学习是研究怎样使用计算机模拟或实现人类学习活动的科学，是人工智能中最具智能特征，最前沿的研究领域之一。自20世纪80年代以来，机器学习作为实现人工智能的途径，在人工智能界引起了广泛的兴趣，特别是近十几年来，机器学习领域的研究工作发展很快，它已成为人工智能的重要课题之一。机器学习不仅在基于知识的系统中得到应用，而且在自然语言理解、非单调推理、机器视觉、模式识别等许多领域也得到了广泛应用。一个系统是否具有学习能力已成为是否具有“智能”的一个标志。]]></summary></entry><entry><title type="html">python 多线程与多进程</title><link href="http://localhost:4000/process" rel="alternate" type="text/html" title="python 多线程与多进程" /><published>2022-12-05T00:00:00+08:00</published><updated>2022-12-05T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-pythonProcessThreading</id><content type="html" xml:base="http://localhost:4000/process"><![CDATA[<p>进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。线程是进程中的一部分，也是进程的的实际运作单位，它也是操作系统中的最小运算调度单位。</p>

<hr />
<h2 id="前言">前言</h2>
<p>多线程与多进程还是比较实用的。本博客以应用为目的展示两个基础的类。</p>

<h2 id="多进程-process">多进程 Process</h2>

<p>process模块是一个创建进程的模块，借助这个模块，就可以完成进程的创建。<br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
</code></pre></div></div>
<h4 id="参数介绍">参数介绍</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Process</span><span class="p">(</span><span class="n">group</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(),</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{})</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">group</code>——参数未使用，值始终为<code class="language-plaintext highlighter-rouge">None</code></li>
  <li><code class="language-plaintext highlighter-rouge">target</code>——表示调用对象，即子进程要执行的任务</li>
  <li><code class="language-plaintext highlighter-rouge">args</code>——表示调用对象的位置参数元组，args=(1,2,’egon’,)</li>
  <li><code class="language-plaintext highlighter-rouge">kwargs</code>——表示调用对象的字典，kwargs={‘name’:’egon’,’age’:18}</li>
  <li><code class="language-plaintext highlighter-rouge">name</code>——为子进程的名称</li>
</ol>

<h4 id="方法介绍">方法介绍</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">obj.start()</code>：启动进程，并调用该子进程中的obj.run()</li>
  <li><code class="language-plaintext highlighter-rouge">obj.run()</code>：进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法</li>
  <li><code class="language-plaintext highlighter-rouge">obj.terminate()</code>：强制终止进程obj，不会进行任何清理操作，如果obj创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果obj还保存了一个锁那么也将不会被释放，进而导致死锁</li>
  <li><code class="language-plaintext highlighter-rouge">obj.is_alive()</code>：如果obj仍然运行，返回<code class="language-plaintext highlighter-rouge">True</code></li>
  <li><code class="language-plaintext highlighter-rouge">obj.join([timeout])</code>：主线程等待obj终止（强调：是主线程处于等的状态，而obj是处于运行的状态）。<code class="language-plaintext highlighter-rouge">timeout</code>是可选的超时时间，需要强调的是，obj.join只能join住start开启的进程，而不能join住run开启的进程</li>
</ol>

<h4 id="属性介绍">属性介绍</h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">obj.daemon</code>：默认值为False，如果设为True，代表obj为后台运行的守护进程，当obj的父进程终止时，obj也随之终止，并且设定为True后，obj不能创建自己的新进程，必须在</li>
  <li><code class="language-plaintext highlighter-rouge">obj.start()</code>：之前设置</li>
  <li><code class="language-plaintext highlighter-rouge">obj.name</code>：进程的名称</li>
  <li><code class="language-plaintext highlighter-rouge">obj.pid</code>：进程的<code class="language-plaintext highlighter-rouge">pid</code></li>
  <li><code class="language-plaintext highlighter-rouge">obj.exitcode</code>：进程在运行时为<code class="language-plaintext highlighter-rouge">None</code>、如果为–N，表示被信号N结束(了解即可)</li>
  <li><code class="language-plaintext highlighter-rouge">obj.authkey</code>：进程的身份验证键,默认是由<code class="language-plaintext highlighter-rouge">os.urandom()</code>随机生成的32字符的字符串。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）</li>
</ol>

<h4 id="使用案例">使用案例</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="k">def</span> <span class="nf">worker</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
    <span class="c1"># 返回父子进程的pid
</span>    <span class="k">print</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getpid</span><span class="p">(),</span> <span class="n">os</span><span class="p">.</span><span class="n">getppid</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'I am parent process'</span><span class="p">)</span>
    <span class="n">jobs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">i</span><span class="p">,))</span>
        <span class="n">jobs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>
<h4 id="方法介绍-1">方法介绍</h4>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/process/threading.png" alt="threading.png" />
    </div>
    
</div>

<h4 id="使用样例">使用样例</h4>
<h5 id="利用函数使用多线程">利用函数使用多线程</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">def</span> <span class="nf">work</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">a</span>
    <span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="err">，</span><span class="n">end</span><span class="o">=</span><span class="err">’’</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">childs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
        <span class="n">childs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">work</span><span class="p">))</span>
        <span class="n">childs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>

<p>程序运行结果：<br />
<code class="language-plaintext highlighter-rouge">1 2 3 4 5</code><br />
如果创建的不是线程而是进程则资源不会共享，运行结果会是：<br />
<code class="language-plaintext highlighter-rouge">1 1 1 1 1</code></p>

<h5 id="利用类重写thrrad方法实现多线程">利用类重写Thrrad方法实现多线程</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">childs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">class</span> <span class="nc">MyThread</span><span class="p">(</span><span class="n">Thread</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">t</span> <span class="o">=</span> <span class="n">num</span>

        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="s">'线程正在工作'</span><span class="p">)</span>
            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">childs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyThread</span><span class="p">())</span>
    <span class="n">childs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>
<p>运行结果之一：<br />
1 线程正在工作<br />
2 线程正在工作<br />
3 线程正在工作<br />
132 线程正在工作 线程正在工作 <br />
线程正在工作<br />
<br />
13 线程正在工作<br />
2 线程正在工作<br />
 线程正在工作<br /></p>

<p>可以看到输出<strong>十分的杂乱</strong>，说明确实是多线程输出。</p>]]></content><author><name>Ranok</name></author><category term="python" /><category term="多线程" /><category term="多进程" /><summary type="html"><![CDATA[进程是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。线程是进程中的一部分，也是进程的的实际运作单位，它也是操作系统中的最小运算调度单位。]]></summary></entry><entry><title type="html">Jekyll 入门指导</title><link href="http://localhost:4000/jekyll" rel="alternate" type="text/html" title="Jekyll 入门指导" /><published>2022-12-04T00:00:00+08:00</published><updated>2022-12-04T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll"><![CDATA[<p>jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。</p>

<hr />

<h2 id="前言">前言</h2>

<p>该博客的部署使用的就是Jekyll框架，Jekyll是一门很成熟的技术（也可能是有点老的缘故），他可以将makedown格式的文档转化成一个个静态的页面，即便你没有系统的学过前端三件套也可以制作自己的主页（真的太棒了！）。</p>

<p>对于使用者来说只需要找到对应的资源模板，套用jekyll即可得到你想要的博客。</p>

<p>如果你想要了解更多，这个是Jekyll官网的传送门 \(\Longrightarrow\) <a href="http://jekyllrb.com/">Jekyll</a></p>

<hr />

<h2 id="jekyll-基础知识">Jekyll 基础知识</h2>

<h3 id="基本结构">基本结构</h3>
<p>Jekyll 也遵循「约定大于配置」的基本原则，所以上手成本极低。</p>

<p>在新创建的项目目录下，有几个重要的文件夹：</p>

<h4 id="_layouts">_layouts</h4>

<p>用于存放各种布局.html 的文件用于对.md文件的转换，在md设置的消息头中的变量，.md文件选择了layout布局之后，会引入对应的布局.html中，html会存放这些变量的默认值，</p>

<h4 id="_drafts">_drafts</h4>

<p>用于存放.md博客的草稿，不会再jekyll工作的时候生成，需要使用指令jekyll server –draft 才会显示在界面中</p>
<h4 id="_posts">_posts</h4>

<p>用于存放博客文章</p>
<h4 id="_site">_site</h4>

<p>用于存放项目构建完成之后所生成的静态文件，也就是说，静态网站的所有文件都会来源于此，其中 CSS 文件、JS 文件以及图片文件，会存放在该目录下的 assets 文件夹中。我们可以直接把该目录下的文件拿去部署</p>

<p>除此之外，还有一些其他文件：</p>
<h4 id="_configyml">_config.yml</h4>

<p>是项目的配置文件，一些全局配置会写在这个文件内，比如 collections（后续推文会讲解），默认文件/路径，等等。总之，这里可以自定义很多东西</p>

<h4 id="gitignore">.gitignore</h4>

<p>创建项目时会自动生成，不需要纳入到 CVS 的文件存放于此，它可以限制一些元素在_site 中的生成</p>

<h4 id="gemfile--gemfilelock">Gemfile &amp; Gemfile.lock</h4>

<p>存放项目所依赖的 Ruby gems，里面拥有存放页面的样式信息，当新加入了主题配置之后，需要使用bundle install指令安装新的配置才能使用。需要使用新的主题时，需要在_config.yml文件的there做更改。注意，使用了新的布局之后可能会导致一些布局不可用，例如“post”，因为在新的主题上可能没有定义这样的布局。所以使用新的布局之后要在_layout中查看一下是否有对应的布局可以使用。</p>

<h4 id="aboutmd">about.md</h4>

<p>会存放有关在界面中的about的内容，生成的页面会出现在主界面上的位置，同理命名其他的文件也会在主界面的上方出现</p>

<hr />

<h2 id="makedown-语法">makedown 语法</h2>
<h4 id="permalink">permalink</h4>
<p>可以用于自定义所创建页面的URL。例如，permalink：/Jekyll/ 表示创建的页面会在主页面URL中后加上/Jekyll</p>

<h4 id="layout">layout</h4>
<p>表示自己所使用的界面样式，常见的值有post</p>

<h4 id="_configyml-1">._config.yml</h4>

<ol>
  <li>defaults：可用于写一些默认值，例如为layout设置默认值（要注意以下冒号的位置）
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">defaults</span><span class="pi">:</span>
  <span class="pi">-</span> 
<span class="err"> </span><span class="na">scope</span><span class="pi">:</span>
   <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>  <span class="c1"># 这里填写此默认值影响的返回路径</span>
 <span class="na">values</span><span class="pi">:</span>   <span class="c1"># 这里补充默认值</span>
     <span class="na">layout</span><span class="pi">:</span> <span class="s2">"</span><span class="s">post"</span>
</code></pre></div>    </div>
    <p>再例如对图片文件的加载：</p>
    <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">defaults</span><span class="pi">:</span>
  <span class="pi">-</span>
<span class="err"> </span><span class="na">scope</span><span class="pi">:</span>
   <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">assets/img"</span>
 <span class="na">values</span><span class="pi">:</span>
   <span class="na">image</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div>    </div>
    <p>该例子表示，在html文件中可能加载图片信息的位置会在，assets/img的文件夹下寻找</p>
  </li>
</ol>

<hr />
<h2 id="常用指令">常用指令</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">jekyll new 工程名</code>  创建工程</li>
  <li><code class="language-plaintext highlighter-rouge">bundle exec jekyll server</code>   启动项目，启动项目之后可以在浏览器中访问http://127.0.0.1:400/看到效果。</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll new PATH --blank</code>  创建新的空项目</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll build</code> 或 <code class="language-plaintext highlighter-rouge">jekyll b</code> 构建项目，生成可部署的 _site 目录</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll serve</code> 或 <code class="language-plaintext highlighter-rouge">jekyll s</code>  构建并运行项目，会自动监听文件变化，不需要反复执行</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll clean</code>  清除所有的构建产物</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll new-theme</code>  创建一个新的主题脚手架</li>
  <li><code class="language-plaintext highlighter-rouge">jekyll doctor</code>  诊断，输出所有已经废弃的依赖包或者有问题的配置</li>
</ol>]]></content><author><name>Ranok</name></author><category term="Jekyll" /><category term="web前端" /><summary type="html"><![CDATA[jekyll是一个简单的免费的Blog生成工具，类似WordPress。但是和WordPress又有很大的不同，原因是jekyll只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务,例如Disqus。最关键的是jekyll可以免费部署在Github上，而且可以绑定自己的域名。]]></summary></entry><entry><title type="html">OpenStack 期末复习</title><link href="http://localhost:4000/openstack" rel="alternate" type="text/html" title="OpenStack 期末复习" /><published>2022-12-04T00:00:00+08:00</published><updated>2022-12-04T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-openstack</id><content type="html" xml:base="http://localhost:4000/openstack"><![CDATA[<p>OpenStack是Rackspace和NASA共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的Web Service。简单来说，OpenStack就是一个操作系统，一套软件，一套IaaS（基础设施即服务）软件，对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。</p>

<hr />

<h2 id="前言">前言</h2>

<p>以下为openstack的期末复习，考试考点整理，内容比较多且知识点生僻难懂，请好好准备，祝愿各位可以在期末获取一个好成绩！</p>

<hr />

<h2 id="第一章考点">第一章考点</h2>

<h2 id="openstack-的主要项目以及对应的项目名称">OpenStack 的主要项目以及对应的项目名称</h2>

<table>
  <thead>
    <tr>
      <th>服务</th>
      <th>直译</th>
      <th>项目名称</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dashboard</td>
      <td>仪表盘</td>
      <td>Horizon</td>
    </tr>
    <tr>
      <td>Computer</td>
      <td>计算</td>
      <td>Nova</td>
    </tr>
    <tr>
      <td>Natwork</td>
      <td>网络</td>
      <td>Neutron</td>
    </tr>
    <tr>
      <td>Object Storage</td>
      <td>对象存储</td>
      <td>Swift</td>
    </tr>
    <tr>
      <td>Block Storage</td>
      <td>块存储</td>
      <td>Cindar</td>
    </tr>
    <tr>
      <td>Identity</td>
      <td>身份</td>
      <td>Keystone</td>
    </tr>
    <tr>
      <td>Image</td>
      <td>镜像</td>
      <td>Glance</td>
    </tr>
    <tr>
      <td>Telemetry</td>
      <td>计量</td>
      <td>Ceilometer</td>
    </tr>
    <tr>
      <td>Orchestration</td>
      <td>编排</td>
      <td>Heat</td>
    </tr>
    <tr>
      <td>Database</td>
      <td>数据库</td>
      <td>Trove</td>
    </tr>
    <tr>
      <td>Data Processing</td>
      <td>数据处理</td>
      <td>Sahara</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="第四章考点">第四章考点</h2>

<h4 id="rest-含义解释">REST 含义解释</h4>
<p>REST 是 Representational State Transfer 的缩写，通常译为<strong>表现层状态转化</strong></p>

<p>客户端在使用HTTP提供的四种操作（GET、POST、PUT、DELETE）访问服务器上的资源时，这些操作会让服务端的状态发生转化，而这种转化是建立在表现层之上的，所以被称之为表现层转化。</p>

<hr />
<h4 id="openstack-的认证与api-请求流程">OpenStack 的认证与API 请求流程</h4>

<ol>
  <li>向云管理员提供的身份端点请求一个认证令牌。</li>
  <li>如果请求成功，服务器会返回一个认证令牌。</li>
  <li>发送API请求，并在X-Auht-Token头部包含上一步返回的令牌认证。</li>
  <li>如果遇到未授权（401）的错误，则需要重新请求另一个令牌。</li>
</ol>

<h5 id="获取openstack认证令牌">获取OpenStack认证令牌</h5>

<ol>
  <li>进入demo环境：<code class="language-plaintext highlighter-rouge">source keystonerc_demo</code></li>
  <li>运行命令cURL来请求一个令牌。</li>
</ol>

<h5 id="发送api请求">发送API请求</h5>

<ol>
  <li>设置OS_TOKEN环境变量，将其值设为令牌ID： <code class="language-plaintext highlighter-rouge">export OS_TOKEN=令牌ID</code></li>
  <li>设置OS_PROJECT_NAME环境变量：<code class="language-plaintext highlighter-rouge">export OS_PROJECT_NAME=demo</code></li>
  <li>设置OS_COMPUTE_API环境变量：<code class="language-plaintext highlighter-rouge">export OS_COMPUTE_API=http://192.168.199.21:8774/v2.1</code></li>
  <li>使用Compute API列出示例类型。</li>
</ol>

<hr />
<h2 id="第五章">第五章</h2>

<h4 id="keystone的管理层次结构">Keystone的管理层次结构</h4>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/openstack/Keystone.bmp" alt="Keystone.bmp" />
    </div>
    
</div>

<p>问：在一个域中的用户<code class="language-plaintext highlighter-rouge">User1</code>是否可以管理项目<code class="language-plaintext highlighter-rouge">Project1</code></p>

<p>答：可以，因为用户User1是系统管理员，拥有对项目Project1的管理权限。</p>

<hr />
<h4 id="keystone认证流程图">Keystone认证流程图</h4>
<p>这张图需要背下来。</p>

<div class="row">
    
    <div style="flex: 100.0%">
        <img class="single" src="/assets/img/blog-img/openstack/KeystoneWWork.bmp" alt="KeystoneWWork.bmp" />
    </div>
    
</div>

<p>对图片的解释：</p>

<ol>
  <li>用户向Keystone提供凭证，Keystone验证通过后向用户返回令牌的同时还会返回一个通用目录。</li>
  <li>用户使用该令牌向该目录列表中的端点请求该用户对应的项目信息，Keystone验证通过后返回用户对应的项目列表</li>
  <li>用户从列表中选择要访问的项目再次向Keystone发出请求，Keystone验证通过后返回管理该项目的服务列表，并允许访问该项目的令牌。</li>
  <li>用户会通过这个服务和通用目录映射找到服务的端点，并通过端点找到实际服务组件的位置。</li>
  <li>用户在凭借项目令牌和端点来访问实际上的服务组件。</li>
  <li>服务组件会向Keystone提供这个用户项目令牌进行验证，Keystone验证通过后会返回一系列的确认信息和附加信息给服务</li>
  <li>服务执行一系列操作。</li>
</ol>

<h4 id="配置文件中对两个值的解释">配置文件中对两个值的解释</h4>

<h5 id="-空字符串">”” 空字符串</h5>
<p>表示“always”（总是）</p>

<h5 id="-感叹号">”!” 感叹号</h5>
<p>表示“nerver”或者“nobady”，即拒绝。</p>

<h2 id="小知识点">小知识点</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">oslo.policy</code>是<code class="language-plaintext highlighter-rouge">json</code>格式的文件。</li>
  <li><code class="language-plaintext highlighter-rouge">openstack</code>是使用<code class="language-plaintext highlighter-rouge">python</code>语言实现的。</li>
</ol>]]></content><author><name>Ranok</name></author><category term="OpenStack" /><category term="期末考试" /><summary type="html"><![CDATA[OpenStack是Rackspace和NASA共同成立的一个开源项目，它是为云计算服务的，提供存储空间、计算能力等资源服务的Web Service。简单来说，OpenStack就是一个操作系统，一套软件，一套IaaS（基础设施即服务）软件，对资源进行管理，并且以服务的形式提供给上层应用或者用户去使用。]]></summary></entry><entry><title type="html">MySql 学习笔记</title><link href="http://localhost:4000/mysql" rel="alternate" type="text/html" title="MySql 学习笔记" /><published>2022-12-03T00:00:00+08:00</published><updated>2022-12-03T00:00:00+08:00</updated><id>http://localhost:4000/wuhan-mysql</id><content type="html" xml:base="http://localhost:4000/mysql"><![CDATA[<p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>

<hr />
<h2 id="前言">前言</h2>
<p>本人比较懒，所以专门挑了一个篇幅比较少的MySql来写博客，主要还是针对笔记的性质来写的。如果有错欢迎指正。</p>

<hr />

<h2 id="mysql-基本语法">MySql 基本语法</h2>
<h4 id="1分组">1.分组</h4>
<p><code class="language-plaintext highlighter-rouge">GROUP BY</code> 字段名 [<code class="language-plaintext highlighter-rouge">HAVING</code> 条件表达式]</p>

<h4 id="2去重">2.去重</h4>
<p>在 <code class="language-plaintext highlighter-rouge">select</code>的字段前面加上<code class="language-plaintext highlighter-rouge">distinct</code>就可以去重</p>

<h4 id="3插入多行数据">3.插入多行数据</h4>

<p>格式：<br />
<code class="language-plaintext highlighter-rouge">insert into</code> 表名[（字段名1，字段名2,…）] <code class="language-plaintext highlighter-rouge">values</code>(值\(a_1\)，值\(b_1\),…), (值\(a_2\),值\(b_2\),…)</p>

<p>示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">insert</span> <span class="k">into</span> <span class="n">mywork</span>
<span class="k">values</span><span class="p">(</span><span class="nv">"小明"</span><span class="p">,</span><span class="mi">18</span><span class="p">),(</span><span class="nv">"小红"</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="4外连接">4.外连接</h4>
<p>语法：<br />
<code class="language-plaintext highlighter-rouge">select</code> 字段列表 <code class="language-plaintext highlighter-rouge">from</code> 表1 [inner] <code class="language-plaintext highlighter-rouge">join</code> 表2 <code class="language-plaintext highlighter-rouge">on</code> 连接条件;
示例:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> 
<span class="k">from</span> <span class="n">wuhan</span><span class="p">.</span><span class="n">commercialhousing</span> 
<span class="k">join</span> <span class="n">secondhouse</span> <span class="k">on</span> <span class="n">district</span> <span class="n">regexp</span> <span class="n">qy</span>
<span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<p>同理还有左外连接：<code class="language-plaintext highlighter-rouge">left join</code>，右外连接：<code class="language-plaintext highlighter-rouge">right join</code></p>

<h4 id="5排序">5.排序</h4>

<p>排序语句：<code class="language-plaintext highlighter-rouge">order by</code> 字段值<code class="language-plaintext highlighter-rouge">[ desc | asc]</code>
其中 <code class="language-plaintext highlighter-rouge">asc</code>是表示升序（默认），表示降序</p>

<p>示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">customer_number</span>
<span class="k">from</span> <span class="n">Orders</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">customer_number</span>
<span class="k">order</span> <span class="k">by</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">desc</span>
</code></pre></div></div>

<h4 id="6if语句">6.if语句</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">IF(expr1,expr2,expr3)</code></p>

<p>如果 expr1 是<code class="language-plaintext highlighter-rouge">TRUE</code> (或者expr1 &lt;&gt; 0 且 expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2;<br /> 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。</p>

<h4 id="7ifnull语句">7.ifnull语句</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">IFNULL(expr1,expr2)</code>
expr1不为<code class="language-plaintext highlighter-rouge">NULL</code>，则 IFNULL() 的返回值为expr1; 否则其返回值为 expr2。<br />IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。</p>

<h4 id="8正则语句">8.正则语句</h4>

<p>关键字：<code class="language-plaintext highlighter-rouge">regexp</code></p>

<p>使用语法：被检测字符串 <code class="language-plaintext highlighter-rouge">regexp [binary]</code> 正则语句
不区分大小写（即大写和小写都匹配）。为区分大小写，可以使用 BINARY 关键字<br />例如：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">WHHERE</span> <span class="n">name</span> <span class="n">REGEXP</span> <span class="nb">BINARY</span> <span class="s1">'Hern .000'</span>
</code></pre></div></div>

<h4 id="9存在判断语句-exists">9.存在判断语句 exists</h4>

<p>当我们只需要判断某些满足特定条件的数据是否存在时，为了提高效率，我们不需要将所有的数据捞出来判断，只需要判断是否存在就可以了。
采用exists即可满足需求。<br />
示例：<br /></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">exists</span> <span class="p">(</span><span class="k">SELECT</span> <span class="o">*</span>
        <span class="k">from</span>  <span class="n">a</span> 
        <span class="k">where</span>
        <span class="n">money</span><span class="o">&gt;</span><span class="mi">0</span> <span class="k">and</span> <span class="nb">time</span><span class="o">&gt;</span><span class="s1">'2021-03-05'</span><span class="p">;</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="10表格合并">10.表格合并</h4>

<p><code class="language-plaintext highlighter-rouge">UNION</code>操作符合并两个或多个 SELECT 语句的结果。<br />
<code class="language-plaintext highlighter-rouge">UNION</code>关键字应处于两次查询之间<br />
默认地，<code class="language-plaintext highlighter-rouge">UNION</code> 操作符选取不同的值。如果允许重复的值，请使用 <code class="language-plaintext highlighter-rouge">UNION ALL</code>。<br />
<strong>注意</strong>：<code class="language-plaintext highlighter-rouge">union</code>的优先级低于<code class="language-plaintext highlighter-rouge">order by</code>，即先合并再排序。
示例1：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">column_name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">table1</span>
<span class="k">UNION</span>
<span class="k">SELECT</span> <span class="k">column_name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">table2</span><span class="p">;</span>
</code></pre></div></div>
<p>示例2：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="k">column_name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">table1</span>
<span class="k">UNION</span> <span class="k">ALL</span>
<span class="k">SELECT</span> <span class="k">column_name</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">table2</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="11数据修改-update">11.数据修改 update</h4>
<p>语法：<br /></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">UPDATE</span> <span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="err">字段</span> <span class="mi">1</span><span class="o">=</span><span class="err">值</span> <span class="mi">1</span> <span class="p">[,</span><span class="err">字段</span> <span class="mi">2</span><span class="o">=</span><span class="err">值</span> <span class="mi">2</span><span class="err">…</span> <span class="p">]</span> 
<span class="p">[</span><span class="k">WHERE</span> <span class="err">子句</span> <span class="p">]</span>
<span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="err">子句</span><span class="p">]</span> <span class="p">[</span><span class="k">LIMIT</span> <span class="err">子句</span><span class="p">]</span>
</code></pre></div></div>

<hr />

<h2 id="mysql常用函数">mysql常用函数</h2>

<h4 id="日期比较函数datediff">日期比较函数：datediff</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">DATEDIFF(date1,date2)</code>
参数说明<br />
date1: 比较日期1<br />
date2: 比较日期2<br /></p>

<p>DATEDIFF函数返回date1 - date2的计算结果，date1和date2两个参数需是有效的日期或日期时间值;如果参数传递的是日期时间值，DATEDIFF函数仅将日期部分用于计算，并忽略时间部分(只有值的日期部分参与计算)</p>

<p>示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">DATEDIFF</span><span class="p">(</span><span class="s1">'2022-04-29'</span><span class="p">,</span><span class="s1">'2022-04-30'</span><span class="p">);</span> <span class="c1">--返回 -1</span>
<span class="k">SELECT</span> <span class="n">DATEDIFF</span><span class="p">(</span><span class="s1">'2022-04-30'</span><span class="p">,</span><span class="s1">'2022-04-29'</span><span class="p">);</span> <span class="c1">--返回 1</span>
</code></pre></div></div>

<h4 id="日期加减函数date_add">日期加减函数：date_add</h4>

<p>语法：<code class="language-plaintext highlighter-rouge">date_add(‘某个日期时间’,interval 1 时间种类名)</code><br />
示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">date_add</span><span class="p">(</span><span class="k">data</span><span class="p">,</span> <span class="n">interval</span> <span class="mi">1</span> <span class="nb">year</span><span class="p">);</span> <span class="c1">--加1年</span>
<span class="k">select</span> <span class="n">date_add</span><span class="p">(</span><span class="n">fata</span><span class="p">,</span> <span class="n">interval</span> <span class="mi">1</span> <span class="k">month</span><span class="p">);</span> <span class="c1">--加1月</span>
</code></pre></div></div>

<p>quarter:季，week:周，day:天，hour:小时，minute:分钟，second:秒，microsecond:毫秒<br />
注：也可以不用变量，直接加减某个时间，如：select date_add(‘1998-01-01’, interval 1 day);</p>

<h3 id="字符串专题">字符串专题</h3>
<h4 id="字符串拼接concat">字符串拼接：concat</h4>

<p>将给入的参数逐一拼接<br />
例如：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">concat</span><span class="p">(</span><span class="err">‘</span><span class="o">%</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="n">abc</span><span class="err">’</span><span class="p">,</span><span class="err">’</span><span class="o">%</span><span class="err">’</span><span class="p">)</span> <span class="c1">--结果为%abc%</span>
</code></pre></div></div>
<h4 id="字符串与日期的相互转换">字符串与日期的相互转换</h4>
<p>使用语法：<br />
<code class="language-plaintext highlighter-rouge">DATE_FORMAT(date,format) </code>日期转字符串<br />
<code class="language-plaintext highlighter-rouge">STR_TO_DATE(str,format) </code>字符串转日期<br />
示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">DATE_FORMAT</span><span class="p">(</span><span class="n">now</span><span class="p">(),</span><span class="s1">'%Y-%m-%d %H:%i:%s'</span><span class="p">);</span>
</code></pre></div></div>
<p>返回：2022-12-01 10:07:41</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="n">str_to_date</span><span class="p">(</span><span class="s1">'2022-8-7'</span><span class="p">,</span><span class="s1">'%Y'</span><span class="p">)</span>
</code></pre></div></div>
<p>返回：2022-00-00<br />
因为这里只获取到了年份，但是作为datetime对象需要补全月份和日所以会有-00-00出现。</p>

<h4 id="组内字符串拼接-group_concat">组内字符串拼接 group_concat</h4>

<p>语法：<br /></p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">GROUP_CONCAT</span><span class="p">([</span><span class="k">DISTINCT</span><span class="p">]</span> <span class="n">column1</span> <span class="p">[</span><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">column2</span> <span class="k">ASC</span><span class="o">|</span><span class="k">DESC</span><span class="p">]</span> <span class="p">[</span><span class="n">SEPARATOR</span> <span class="n">seq</span><span class="p">])</span>
</code></pre></div></div>

<p>将分组中column1这一列对应的多行的值按照column2 升序或者降序进行连接，其中分隔符为seq<br />
如果用到了DISTINCT，将表示将不重复的column1按照column2升序或者降序连接<br />
如果没有指定SEPARATOR的话，也就是说没有写，那么就会默认以 ‘,’分隔</p>

<h4 id="字符串截取-substring">字符串截取 substring</h4>
<p>语法格式：<code class="language-plaintext highlighter-rouge">SUBSTRING(str, begin, end)</code><br />
substring函数可以将字符串str从下标begin到end截取下来（下标从1开始计算）（闭区间包括begin和end），其中end默认为空，当end省略时表示截取到字符串最后。<br />
mysq支持逆向访问，即可以使用负数表示下标，负数的下标即从右边开始计算的下标。<br />
示例：</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>	<span class="c1">-- 01</span>
<span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">-- 01234</span>
<span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span> <span class="c1">-- 01234</span>
<span class="k">select</span> <span class="k">substring</span><span class="p">(</span><span class="nv">"01234"</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">-- 4</span>
</code></pre></div></div>

<h4 id="字符串大小写转换">字符串大小写转换</h4>
<p><code class="language-plaintext highlighter-rouge">upper(str)</code>  字符串中所有字母转大写<br />
<code class="language-plaintext highlighter-rouge">lower(str)</code>  字符串中所有字母转小写</p>

<hr />

<h2 id="技巧语法">技巧语法</h2>

<h4 id="查询排名前n的数据">查询排名前n的数据</h4>

<p>使用<code class="language-plaintext highlighter-rouge">limit</code> n语句实现（该语句需要放在查询结果的最后）</p>

<p>示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">wuhan</span><span class="p">.</span><span class="n">secondhouse</span> <span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="使用正则配对字符串">使用正则配对字符串</h4>

<p>使用<code class="language-plaintext highlighter-rouge">regexp</code>关键字实现
格式： <code class="language-plaintext highlighter-rouge">字段值 regexp 正则字符串</code>
示例：</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="k">distinct</span> <span class="n">district</span><span class="p">,</span><span class="n">house_type</span><span class="p">,</span><span class="n">wq_area</span><span class="p">,</span><span class="n">wq_num</span><span class="p">,</span><span class="n">yqy_area</span><span class="p">,</span><span class="n">yqy_num</span>
<span class="k">from</span> <span class="n">commercialhousing</span>
<span class="k">where</span> <span class="n">district</span> <span class="n">regexp</span> <span class="s1">'江岸'</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>Ranok</name></author><category term="MySql" /><category term="数据库" /><summary type="html"><![CDATA[MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。]]></summary></entry></feed>